
CLI25Q80.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a4  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800872c  0800872c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08008734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b8  2000018c  080088c0  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20002444  080088c0  00022444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b47  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300f  00000000  00000000  00030d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00033d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028099  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013674  00000000  00000000  0005da39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef60a  00000000  00000000  000710ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001606b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  00160708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007468 	.word	0x08007468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08007468 	.word	0x08007468

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_DMA_Init+0x38>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <MX_DMA_Init+0x38>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6493      	str	r3, [r2, #72]	; 0x48
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_DMA_Init+0x38>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 fd29 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 fd42 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b46      	ldr	r3, [pc, #280]	; (8000710 <MX_GPIO_Init+0x130>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a45      	ldr	r2, [pc, #276]	; (8000710 <MX_GPIO_Init+0x130>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <MX_GPIO_Init+0x130>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <MX_GPIO_Init+0x130>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a3f      	ldr	r2, [pc, #252]	; (8000710 <MX_GPIO_Init+0x130>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <MX_GPIO_Init+0x130>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_GPIO_Init+0x130>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a39      	ldr	r2, [pc, #228]	; (8000710 <MX_GPIO_Init+0x130>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b37      	ldr	r3, [pc, #220]	; (8000710 <MX_GPIO_Init+0x130>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <MX_GPIO_Init+0x130>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a33      	ldr	r2, [pc, #204]	; (8000710 <MX_GPIO_Init+0x130>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <MX_GPIO_Init+0x130>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_GPIO_Init+0x130>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <MX_GPIO_Init+0x130>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_GPIO_Init+0x130>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_FLASH_CS_Pin|SPI_FLASH_CS2_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f248 0110 	movw	r1, #32784	; 0x8010
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f001 f8c2 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_GPIO_Port, BLINK_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2120      	movs	r1, #32
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f001 f8bc 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_FLASH_WP_UP_GPIO_Port, SPI_FLASH_WP_UP_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2104      	movs	r1, #4
 800068c:	4821      	ldr	r0, [pc, #132]	; (8000714 <MX_GPIO_Init+0x134>)
 800068e:	f001 f8b7 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000698:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	481b      	ldr	r0, [pc, #108]	; (8000718 <MX_GPIO_Init+0x138>)
 80006aa:	f000 fee7 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_FLASH_CS_Pin|SPI_FLASH_CS2_Pin;
 80006ae:	f248 0310 	movw	r3, #32784	; 0x8010
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f000 fed7 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 80006ce:	2320      	movs	r3, #32
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f000 fec8 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_FLASH_WP_UP_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_FLASH_WP_UP_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0x134>)
 8000704:	f000 feba 	bl	800147c <HAL_GPIO_Init>

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	48000c00 	.word	0x48000c00
 8000718:	48000800 	.word	0x48000800

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fb02 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f815 	bl	8000752 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff ff5a 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800072c:	f7ff ff3a 	bl	80005a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000730:	f000 fa16 	bl	8000b60 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000734:	f000 f8a2 	bl	800087c <MX_SPI3_Init>
  MX_SPI1_Init();
 8000738:	f000 f862 	bl	8000800 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  userApp();
 800073c:	f004 ffda 	bl	80056f4 <userApp>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f001 f873 	bl	8001830 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 800074a:	2096      	movs	r0, #150	; 0x96
 800074c:	f000 fb68 	bl	8000e20 <HAL_Delay>
	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000750:	e7f6      	b.n	8000740 <main+0x24>

08000752 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b096      	sub	sp, #88	; 0x58
 8000756:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2244      	movs	r2, #68	; 0x44
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f006 f973 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000774:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000778:	f001 f882 	bl	8001880 <HAL_PWREx_ControlVoltageScaling>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000782:	f000 f837 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a4:	2307      	movs	r3, #7
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 f8b9 	bl	800192c <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007c0:	f000 f818 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2303      	movs	r3, #3
 80007ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80007cc:	23b0      	movs	r3, #176	; 0xb0
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 fc81 	bl	80020e4 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e8:	f000 f804 	bl	80007f4 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3758      	adds	r7, #88	; 0x58
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_SPI1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_SPI1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_SPI1_Init+0x74>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI1_Init+0x74>)
 800081a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800081e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI1_Init+0x74>)
 8000822:	2202      	movs	r2, #2
 8000824:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_SPI1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI1_Init+0x74>)
 800082e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000832:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI1_Init+0x74>)
 8000836:	2238      	movs	r2, #56	; 0x38
 8000838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI1_Init+0x74>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_SPI1_Init+0x74>)
 8000860:	f002 fb20 	bl	8002ea4 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f7ff ffc3 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a8 	.word	0x200001a8
 8000878:	40013000 	.word	0x40013000

0800087c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI3_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI3_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI3_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI3_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI3_Init+0x74>)
 80008dc:	f002 fae2 	bl	8002ea4 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f7ff ff85 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000020c 	.word	0x2000020c
 80008f4:	40003c00 	.word	0x40003c00

080008f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a3d      	ldr	r2, [pc, #244]	; (8000a0c <HAL_SPI_MspInit+0x114>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d145      	bne.n	80009a6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a36      	ldr	r2, [pc, #216]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000962:	23c0      	movs	r3, #192	; 0xc0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800096e:	2301      	movs	r3, #1
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fd7c 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000984:	2308      	movs	r3, #8
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000994:	2305      	movs	r3, #5
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	481d      	ldr	r0, [pc, #116]	; (8000a14 <HAL_SPI_MspInit+0x11c>)
 80009a0:	f000 fd6c 	bl	800147c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009a4:	e02d      	b.n	8000a02 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_SPI_MspInit+0x120>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d128      	bne.n	8000a02 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ba:	6593      	str	r3, [r2, #88]	; 0x58
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_SPI_MspInit+0x118>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f2:	2306      	movs	r3, #6
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <HAL_SPI_MspInit+0x124>)
 80009fe:	f000 fd3d 	bl	800147c <HAL_GPIO_Init>
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40013000 	.word	0x40013000
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400
 8000a18:	40003c00 	.word	0x40003c00
 8000a1c:	48000800 	.word	0x48000800

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	; 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f994 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel6_IRQHandler+0x10>)
 8000ac2:	f000 fbfb 	bl	80012bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002f8 	.word	0x200002f8

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f005 ff52 	bl	80069a8 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20018000 	.word	0x20018000
 8000b30:	00002000 	.word	0x00002000
 8000b34:	20000270 	.word	0x20000270
 8000b38:	20002448 	.word	0x20002448

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b66:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <MX_USART2_UART_Init+0x5c>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f003 f88e 	bl	8003cc4 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bae:	f7ff fe21 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000274 	.word	0x20000274
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ac      	sub	sp, #176	; 0xb0
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2288      	movs	r2, #136	; 0x88
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 ff33 	bl	8006a4c <memset>
  if(uartHandle->Instance==USART2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <HAL_UART_MspInit+0x104>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d165      	bne.n	8000cbc <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fc95 	bl	800252c <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c08:	f7ff fdf4 	bl	80007f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c10:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6593      	str	r3, [r2, #88]	; 0x58
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_UART_MspInit+0x108>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c54:	2307      	movs	r3, #7
 8000c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fc0a 	bl	800147c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0x110>)
 8000c6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c94:	2220      	movs	r2, #32
 8000c96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000c9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000ca2:	f000 f9f3 	bl	800108c <HAL_DMA_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000cac:	f7ff fda2 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <HAL_UART_MspInit+0x10c>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	37b0      	adds	r7, #176	; 0xb0
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	200002f8 	.word	0x200002f8
 8000cd0:	4002006c 	.word	0x4002006c

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff ff30 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f005 fe57 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d06:	f7ff fd09 	bl	800071c <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000d18:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 8000d1c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000d20:	20002444 	.word	0x20002444

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_Init+0x3c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x3c>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f000 f962 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f80f 	bl	8000d68 <HAL_InitTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	e001      	b.n	8000d5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d56:	f7ff fe63 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d023      	beq.n	8000dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_InitTick+0x70>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f96d 	bl	8001072 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d809      	bhi.n	8000db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f000 f937 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0x74>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e001      	b.n	8000dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000340 	.word	0x20000340

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000340 	.word	0x20000340

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e098      	b.n	80011d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <HAL_DMA_Init+0x150>)
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d80f      	bhi.n	80010ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <HAL_DMA_Init+0x154>)
 80010b2:	4413      	add	r3, r2
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_DMA_Init+0x158>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	009a      	lsls	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a48      	ldr	r2, [pc, #288]	; (80011e8 <HAL_DMA_Init+0x15c>)
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
 80010c8:	e00e      	b.n	80010e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <HAL_DMA_Init+0x160>)
 80010d2:	4413      	add	r3, r2
 80010d4:	4a43      	ldr	r2, [pc, #268]	; (80011e4 <HAL_DMA_Init+0x158>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	009a      	lsls	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <HAL_DMA_Init+0x164>)
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001102:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800110c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001142:	d039      	beq.n	80011b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_DMA_Init+0x15c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11a      	bne.n	8001184 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_DMA_Init+0x168>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 031c 	and.w	r3, r3, #28
 800115a:	210f      	movs	r1, #15
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	4924      	ldr	r1, [pc, #144]	; (80011f4 <HAL_DMA_Init+0x168>)
 8001164:	4013      	ands	r3, r2
 8001166:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_DMA_Init+0x168>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 031c 	and.w	r3, r3, #28
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	491d      	ldr	r1, [pc, #116]	; (80011f4 <HAL_DMA_Init+0x168>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
 8001182:	e019      	b.n	80011b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_DMA_Init+0x16c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 031c 	and.w	r3, r3, #28
 8001190:	210f      	movs	r1, #15
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	4917      	ldr	r1, [pc, #92]	; (80011f8 <HAL_DMA_Init+0x16c>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_DMA_Init+0x16c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6859      	ldr	r1, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f003 031c 	and.w	r3, r3, #28
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	4911      	ldr	r1, [pc, #68]	; (80011f8 <HAL_DMA_Init+0x16c>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40020407 	.word	0x40020407
 80011e0:	bffdfff8 	.word	0xbffdfff8
 80011e4:	cccccccd 	.word	0xcccccccd
 80011e8:	40020000 	.word	0x40020000
 80011ec:	bffdfbf8 	.word	0xbffdfbf8
 80011f0:	40020400 	.word	0x40020400
 80011f4:	400200a8 	.word	0x400200a8
 80011f8:	400204a8 	.word	0x400204a8

080011fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_DMA_Start_IT+0x20>
 8001218:	2302      	movs	r3, #2
 800121a:	e04b      	b.n	80012b4 <HAL_DMA_Start_IT+0xb8>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b01      	cmp	r3, #1
 800122e:	d13a      	bne.n	80012a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0201 	bic.w	r2, r2, #1
 800124c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f8e0 	bl	800141a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 020e 	orr.w	r2, r2, #14
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	e00f      	b.n	8001294 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 020a 	orr.w	r2, r2, #10
 8001292:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e005      	b.n	80012b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012ae:	2302      	movs	r3, #2
 80012b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 031c 	and.w	r3, r3, #28
 80012dc:	2204      	movs	r2, #4
 80012de:	409a      	lsls	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d026      	beq.n	8001336 <HAL_DMA_IRQHandler+0x7a>
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d021      	beq.n	8001336 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0204 	bic.w	r2, r2, #4
 800130e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	f003 021c 	and.w	r2, r3, #28
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	2104      	movs	r1, #4
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	2b00      	cmp	r3, #0
 800132a:	d071      	beq.n	8001410 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001334:	e06c      	b.n	8001410 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f003 031c 	and.w	r3, r3, #28
 800133e:	2202      	movs	r2, #2
 8001340:	409a      	lsls	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d02e      	beq.n	80013a8 <HAL_DMA_IRQHandler+0xec>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d029      	beq.n	80013a8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10b      	bne.n	800137a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020a 	bic.w	r2, r2, #10
 8001370:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f003 021c 	and.w	r2, r3, #28
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	2102      	movs	r1, #2
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	2b00      	cmp	r3, #0
 800139c:	d038      	beq.n	8001410 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013a6:	e033      	b.n	8001410 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f003 031c 	and.w	r3, r3, #28
 80013b0:	2208      	movs	r2, #8
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02a      	beq.n	8001412 <HAL_DMA_IRQHandler+0x156>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d025      	beq.n	8001412 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 020e 	bic.w	r2, r2, #14
 80013d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 021c 	and.w	r2, r3, #28
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001410:	bf00      	nop
 8001412:	bf00      	nop
}
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f003 021c 	and.w	r2, r3, #28
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	2101      	movs	r1, #1
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
 800143a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d108      	bne.n	800145e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800145c:	e007      	b.n	800146e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	60da      	str	r2, [r3, #12]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e17f      	b.n	800178c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8171 	beq.w	8001786 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d005      	beq.n	80014bc <HAL_GPIO_Init+0x40>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b03      	cmp	r3, #3
 8001528:	d118      	bne.n	800155c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001530:	2201      	movs	r2, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b03      	cmp	r3, #3
 8001566:	d017      	beq.n	8001598 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d123      	bne.n	80015ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	6939      	ldr	r1, [r7, #16]
 80015e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80ac 	beq.w	8001786 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_GPIO_Init+0x330>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6613      	str	r3, [r2, #96]	; 0x60
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_GPIO_Init+0x330>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001646:	4a5a      	ldr	r2, [pc, #360]	; (80017b0 <HAL_GPIO_Init+0x334>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001670:	d025      	beq.n	80016be <HAL_GPIO_Init+0x242>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <HAL_GPIO_Init+0x338>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01f      	beq.n	80016ba <HAL_GPIO_Init+0x23e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_GPIO_Init+0x33c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x23a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_GPIO_Init+0x340>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x236>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_GPIO_Init+0x344>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x232>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <HAL_GPIO_Init+0x348>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x22e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <HAL_GPIO_Init+0x34c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x22a>
 80016a2:	2306      	movs	r3, #6
 80016a4:	e00c      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e00a      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x244>
 80016be:	2300      	movs	r3, #0
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d0:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x334>)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_GPIO_Init+0x350>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001702:	4a32      	ldr	r2, [pc, #200]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_GPIO_Init+0x350>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172c:	4a27      	ldr	r2, [pc, #156]	; (80017cc <HAL_GPIO_Init+0x350>)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_GPIO_Init+0x350>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	43db      	mvns	r3, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4013      	ands	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_GPIO_Init+0x350>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	f47f ae78 	bne.w	800148c <HAL_GPIO_Init+0x10>
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000800 	.word	0x48000800
 80017bc:	48000c00 	.word	0x48000c00
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48001400 	.word	0x48001400
 80017c8:	48001800 	.word	0x48001800
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181c:	e002      	b.n	8001824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43d9      	mvns	r1, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	400b      	ands	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_PWREx_GetVoltageRange+0x18>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40007000 	.word	0x40007000

08001880 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d130      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800189c:	d038      	beq.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a6:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2232      	movs	r2, #50	; 0x32
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c4:	e002      	b.n	80018cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d8:	d102      	bne.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f2      	bne.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ec:	d110      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e00f      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d007      	beq.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40007000 	.word	0x40007000
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e3ca      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001948:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80e4 	beq.w	8001b28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_RCC_OscConfig+0x4a>
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	f040 808b 	bne.w	8001a84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b01      	cmp	r3, #1
 8001972:	f040 8087 	bne.w	8001a84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001976:	4b89      	ldr	r3, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x62>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e3a2      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1a      	ldr	r2, [r3, #32]
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_RCC_OscConfig+0x7c>
 800199e:	4b7f      	ldr	r3, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a6:	e005      	b.n	80019b4 <HAL_RCC_OscConfig+0x88>
 80019a8:	4b7c      	ldr	r3, [pc, #496]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d223      	bcs.n	8001a00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fd55 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e383      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019cc:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a72      	ldr	r2, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b70      	ldr	r3, [pc, #448]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	496d      	ldr	r1, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ea:	4b6c      	ldr	r3, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	4968      	ldr	r1, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	e025      	b.n	8001a4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4960      	ldr	r1, [pc, #384]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	495b      	ldr	r1, [pc, #364]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fd15 	bl	800246c <RCC_SetFlashLatencyFromMSIRange>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e343      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a4c:	f000 fc4a 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b52      	ldr	r3, [pc, #328]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	4950      	ldr	r1, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x274>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	4a4e      	ldr	r2, [pc, #312]	; (8001ba4 <HAL_RCC_OscConfig+0x278>)
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f979 	bl	8000d68 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d052      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	e327      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d032      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f9b6 	bl	8000e08 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f9b2 	bl	8000e08 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e310      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4931      	ldr	r1, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	492c      	ldr	r1, [pc, #176]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e01a      	b.n	8001b28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f983 	bl	8000e08 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b06:	f7ff f97f 	bl	8000e08 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e2dd      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x1da>
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d074      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x21a>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d10e      	bne.n	8001b5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d064      	beq.n	8001c1c <HAL_RCC_OscConfig+0x2f0>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d160      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e2ba      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x24a>
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e026      	b.n	8001bc4 <HAL_RCC_OscConfig+0x298>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7e:	d115      	bne.n	8001bac <HAL_RCC_OscConfig+0x280>
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a02      	ldr	r2, [pc, #8]	; (8001b9c <HAL_RCC_OscConfig+0x270>)
 8001b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x298>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	080085a8 	.word	0x080085a8
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	4ba0      	ldr	r3, [pc, #640]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9f      	ldr	r2, [pc, #636]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b9d      	ldr	r3, [pc, #628]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a9c      	ldr	r2, [pc, #624]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f91c 	bl	8000e08 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f918 	bl	8000e08 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e276      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be6:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x2a8>
 8001bf2:	e014      	b.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f908 	bl	8000e08 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f904 	bl	8000e08 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	; 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e262      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c0e:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2d0>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d060      	beq.n	8001cec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x310>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d119      	bne.n	8001c6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d116      	bne.n	8001c6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3c:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x328>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e23f      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	4973      	ldr	r1, [pc, #460]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	e040      	b.n	8001cec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d023      	beq.n	8001cba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f8c3 	bl	8000e08 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff f8bf 	bl	8000e08 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e21d      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c98:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	495f      	ldr	r1, [pc, #380]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e018      	b.n	8001cec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f89f 	bl	8000e08 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f89b 	bl	8000e08 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1f9      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d00:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff f87a 	bl	8000e08 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f876 	bl	8000e08 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1d4      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ef      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3ec>
 8001d38:	e01b      	b.n	8001d72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d40:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f85d 	bl	8000e08 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff f859 	bl	8000e08 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1b7      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ef      	bne.n	8001d52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a6 	beq.w	8001ecc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d118      	bne.n	8001dea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_RCC_OscConfig+0x508>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_RCC_OscConfig+0x508>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f820 	bl	8000e08 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7ff f81c 	bl	8000e08 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e17a      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_RCC_OscConfig+0x508>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4d8>
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e02:	e029      	b.n	8001e58 <HAL_RCC_OscConfig+0x52c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d115      	bne.n	8001e38 <HAL_RCC_OscConfig+0x50c>
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2c:	e014      	b.n	8001e58 <HAL_RCC_OscConfig+0x52c>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40007000 	.word	0x40007000
 8001e38:	4b9c      	ldr	r3, [pc, #624]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a9b      	ldr	r2, [pc, #620]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	4b98      	ldr	r3, [pc, #608]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a97      	ldr	r2, [pc, #604]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7fe ffd2 	bl	8000e08 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe ffce 	bl	8000e08 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e12a      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ed      	beq.n	8001e68 <HAL_RCC_OscConfig+0x53c>
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ffbb 	bl	8000e08 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe ffb7 	bl	8000e08 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e113      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eac:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ed      	bne.n	8001e96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a79      	ldr	r2, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80fe 	beq.w	80020d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f040 80d0 	bne.w	8002080 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ee0:	4b72      	ldr	r3, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d130      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	3b01      	subs	r3, #1
 8001f00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d127      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d11f      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f20:	2a07      	cmp	r2, #7
 8001f22:	bf14      	ite	ne
 8001f24:	2201      	movne	r2, #1
 8001f26:	2200      	moveq	r2, #0
 8001f28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d113      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d06e      	beq.n	8002034 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d069      	beq.n	8002030 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0ad      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f84:	f7fe ff40 	bl	8000e08 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe ff3c 	bl	8000e08 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e09a      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <HAL_RCC_OscConfig+0x784>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fba:	3a01      	subs	r2, #1
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fc4:	0212      	lsls	r2, r2, #8
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fcc:	0852      	lsrs	r2, r2, #1
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	0552      	lsls	r2, r2, #21
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fd8:	0852      	lsrs	r2, r2, #1
 8001fda:	3a01      	subs	r2, #1
 8001fdc:	0652      	lsls	r2, r2, #25
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe4:	0912      	lsrs	r2, r2, #4
 8001fe6:	0452      	lsls	r2, r2, #17
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	4930      	ldr	r1, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a2a      	ldr	r2, [pc, #168]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002006:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002008:	f7fe fefe 	bl	8000e08 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe fefa 	bl	8000e08 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e058      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002022:	4b22      	ldr	r3, [pc, #136]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202e:	e050      	b.n	80020d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e04f      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d148      	bne.n	80020d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002058:	f7fe fed6 	bl	8000e08 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe fed2 	bl	8000e08 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e030      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x734>
 800207e:	e028      	b.n	80020d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d023      	beq.n	80020ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_RCC_OscConfig+0x780>)
 800208c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe feb9 	bl	8000e08 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	e00c      	b.n	80020b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe feb5 	bl	8000e08 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d905      	bls.n	80020b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e013      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_OscConfig+0x7b0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ec      	bne.n	800209a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_OscConfig+0x7b0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4905      	ldr	r1, [pc, #20]	; (80020dc <HAL_RCC_OscConfig+0x7b0>)
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x7b4>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e001      	b.n	80020d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	feeefffc 	.word	0xfeeefffc

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0e7      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d910      	bls.n	8002128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4970      	ldr	r1, [pc, #448]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cf      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002140:	429a      	cmp	r2, r3
 8002142:	d908      	bls.n	8002156 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4960      	ldr	r1, [pc, #384]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04c      	beq.n	80021fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d121      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0a6      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e09a      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e08e      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e086      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4943      	ldr	r1, [pc, #268]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021cc:	f7fe fe1c 	bl	8000e08 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7fe fe18 	bl	8000e08 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e06e      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d010      	beq.n	800222a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002214:	429a      	cmp	r2, r3
 8002216:	d208      	bcs.n	800222a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	492b      	ldr	r1, [pc, #172]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d210      	bcs.n	800225a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4923      	ldr	r1, [pc, #140]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_ClockConfig+0x1ec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e036      	b.n	80022c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4918      	ldr	r1, [pc, #96]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4910      	ldr	r1, [pc, #64]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002298:	f000 f824 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	490b      	ldr	r1, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1f4>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1f8>)
 80022b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1fc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fd53 	bl	8000d68 <HAL_InitTick>
 80022c2:	4603      	mov	r3, r0
 80022c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80022c6:	7afb      	ldrb	r3, [r7, #11]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40021000 	.word	0x40021000
 80022d8:	080085a8 	.word	0x080085a8
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f2:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022fc:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x34>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d121      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d11e      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d107      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002324:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e005      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002340:	4a2b      	ldr	r2, [pc, #172]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002354:	e00a      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d102      	bne.n	8002362 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e004      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d101      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800236a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d134      	bne.n	80023dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0xa6>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d003      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0xac>
 8002388:	e005      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800238c:	617b      	str	r3, [r7, #20]
      break;
 800238e:	e005      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002392:	617b      	str	r3, [r7, #20]
      break;
 8002394:	e002      	b.n	800239c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	617b      	str	r3, [r7, #20]
      break;
 800239a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	3301      	adds	r3, #1
 80023a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	fb03 f202 	mul.w	r2, r3, r2
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	0e5b      	lsrs	r3, r3, #25
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	3301      	adds	r3, #1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023dc:	69bb      	ldr	r3, [r7, #24]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	080085c0 	.word	0x080085c0
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	007a1200 	.word	0x007a1200

080023fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x14>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002418:	f7ff fff0 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_RCC_GetPCLK1Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	080085b8 	.word	0x080085b8

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002444:	f7ff ffda 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0adb      	lsrs	r3, r3, #11
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	080085b8 	.word	0x080085b8

0800246c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002484:	f7ff f9ee 	bl	8001864 <HAL_PWREx_GetVoltageRange>
 8002488:	6178      	str	r0, [r7, #20]
 800248a:	e014      	b.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a24      	ldr	r2, [pc, #144]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b22      	ldr	r3, [pc, #136]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024a4:	f7ff f9de 	bl	8001864 <HAL_PWREx_GetVoltageRange>
 80024a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024bc:	d10b      	bne.n	80024d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d919      	bls.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2ba0      	cmp	r3, #160	; 0xa0
 80024c8:	d902      	bls.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ca:	2302      	movs	r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	e013      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e010      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d902      	bls.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024dc:	2303      	movs	r3, #3
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e00a      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d102      	bne.n	80024ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e004      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d101      	bne.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 0207 	bic.w	r2, r3, #7
 8002500:	4909      	ldr	r1, [pc, #36]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40022000 	.word	0x40022000

0800252c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002534:	2300      	movs	r3, #0
 8002536:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002538:	2300      	movs	r3, #0
 800253a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	2b00      	cmp	r3, #0
 8002546:	d041      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002550:	d02a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002552:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002556:	d824      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002558:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800255c:	d008      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800255e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002562:	d81e      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800256c:	d010      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800256e:	e018      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002570:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a85      	ldr	r2, [pc, #532]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800257c:	e015      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fabb 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800258e:	e00c      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3320      	adds	r3, #32
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fba6 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a0:	e003      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	74fb      	strb	r3, [r7, #19]
      break;
 80025a6:	e000      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025be:	4973      	ldr	r1, [pc, #460]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025c6:	e001      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d041      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025e0:	d02a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025e6:	d824      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025f2:	d81e      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d010      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025fe:	e018      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002600:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a61      	ldr	r2, [pc, #388]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800260c:	e015      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fa73 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800261e:	e00c      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3320      	adds	r3, #32
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fb5e 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002630:	e003      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	74fb      	strb	r3, [r7, #19]
      break;
 8002636:	e000      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002640:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264e:	494f      	ldr	r1, [pc, #316]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002656:	e001      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a0 	beq.w	80027aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00d      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	6593      	str	r3, [r2, #88]	; 0x58
 8002690:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ac:	f7fe fbac 	bl	8000e08 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b2:	e009      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7fe fba8 	bl	8000e08 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	74fb      	strb	r3, [r7, #19]
        break;
 80026c6:	e005      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d15c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01f      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d019      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fb67 	bl	8000e08 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00b      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fb63 	bl	8000e08 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d902      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	74fb      	strb	r3, [r7, #19]
            break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ec      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277a:	4904      	ldr	r1, [pc, #16]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002782:	e009      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
 8002788:	e006      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002798:	7c7b      	ldrb	r3, [r7, #17]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b9e      	ldr	r3, [pc, #632]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a9d      	ldr	r2, [pc, #628]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b6:	4b98      	ldr	r3, [pc, #608]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f023 0203 	bic.w	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	4994      	ldr	r1, [pc, #592]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d8:	4b8f      	ldr	r3, [pc, #572]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 020c 	bic.w	r2, r3, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	498c      	ldr	r1, [pc, #560]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fa:	4b87      	ldr	r3, [pc, #540]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4983      	ldr	r1, [pc, #524]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	497b      	ldr	r1, [pc, #492]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	4972      	ldr	r1, [pc, #456]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002860:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	496a      	ldr	r1, [pc, #424]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002882:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	4961      	ldr	r1, [pc, #388]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028a4:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	4959      	ldr	r1, [pc, #356]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028c6:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	4950      	ldr	r1, [pc, #320]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	4948      	ldr	r1, [pc, #288]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	493f      	ldr	r1, [pc, #252]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d028      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292c:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293a:	4937      	ldr	r1, [pc, #220]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294a:	d106      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002956:	60d3      	str	r3, [r2, #12]
 8002958:	e011      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800295e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002962:	d10c      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f8c8 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d028      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	491f      	ldr	r1, [pc, #124]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b4:	60d3      	str	r3, [r2, #12]
 80029b6:	e011      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f899 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02b      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a06:	d109      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a02      	ldr	r2, [pc, #8]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a12:	60d3      	str	r3, [r2, #12]
 8002a14:	e014      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f867 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02f      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5a:	4928      	ldr	r1, [pc, #160]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2102      	movs	r1, #2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f844 	bl	8002b00 <RCCEx_PLLSAI1_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	74bb      	strb	r3, [r7, #18]
 8002a86:	e011      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3320      	adds	r3, #32
 8002a96:	2102      	movs	r1, #2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f925 	bl	8002ce8 <RCCEx_PLLSAI2_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac6:	490d      	ldr	r1, [pc, #52]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aea:	4904      	ldr	r1, [pc, #16]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002af2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000

08002b00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b0e:	4b75      	ldr	r3, [pc, #468]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d018      	beq.n	8002b4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b1a:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d10d      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b32:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
       ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d047      	beq.n	8002bd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	e044      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d018      	beq.n	8002b86 <RCCEx_PLLSAI1_Config+0x86>
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d825      	bhi.n	8002ba4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d002      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0x62>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d009      	beq.n	8002b74 <RCCEx_PLLSAI1_Config+0x74>
 8002b60:	e020      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b62:	4b60      	ldr	r3, [pc, #384]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11d      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b72:	e01a      	b.n	8002baa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b74:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d116      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e013      	b.n	8002bae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b86:	4b57      	ldr	r3, [pc, #348]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b92:	4b54      	ldr	r3, [pc, #336]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ba2:	e006      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e004      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	4944      	ldr	r1, [pc, #272]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d17d      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bdc:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f90e 	bl	8000e08 <HAL_GetTick>
 8002bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bee:	e009      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf0:	f7fe f90a 	bl	8000e08 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d902      	bls.n	8002c04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	73fb      	strb	r3, [r7, #15]
        break;
 8002c02:	e005      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ef      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d160      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	0211      	lsls	r1, r2, #8
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	0912      	lsrs	r2, r2, #4
 8002c34:	0452      	lsls	r2, r2, #17
 8002c36:	430a      	orrs	r2, r1
 8002c38:	492a      	ldr	r1, [pc, #168]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	610b      	str	r3, [r1, #16]
 8002c3e:	e027      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d112      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c46:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6892      	ldr	r2, [r2, #8]
 8002c56:	0211      	lsls	r1, r2, #8
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6912      	ldr	r2, [r2, #16]
 8002c5c:	0852      	lsrs	r2, r2, #1
 8002c5e:	3a01      	subs	r2, #1
 8002c60:	0552      	lsls	r2, r2, #21
 8002c62:	430a      	orrs	r2, r1
 8002c64:	491f      	ldr	r1, [pc, #124]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
 8002c6a:	e011      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	0211      	lsls	r1, r2, #8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6952      	ldr	r2, [r2, #20]
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0652      	lsls	r2, r2, #25
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	4916      	ldr	r1, [pc, #88]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f8b4 	bl	8000e08 <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca2:	e009      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca4:	f7fe f8b0 	bl	8000e08 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb6:	e005      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf6:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d02:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0203 	and.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10d      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
       ||
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d1a:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
       ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d047      	beq.n	8002dbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e044      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d018      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0x86>
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d825      	bhi.n	8002d8c <RCCEx_PLLSAI2_Config+0xa4>
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d002      	beq.n	8002d4a <RCCEx_PLLSAI2_Config+0x62>
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d009      	beq.n	8002d5c <RCCEx_PLLSAI2_Config+0x74>
 8002d48:	e020      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d4a:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11d      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5a:	e01a      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d116      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6c:	e013      	b.n	8002d96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d7a:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d8a:	e006      	b.n	8002d9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d90:	e004      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	430b      	orrs	r3, r1
 8002db8:	4939      	ldr	r1, [pc, #228]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d167      	bne.n	8002e94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f81a 	bl	8000e08 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd6:	e009      	b.n	8002dec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd8:	f7fe f816 	bl	8000e08 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d902      	bls.n	8002dec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dea:	e005      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ef      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d14a      	bne.n	8002e94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d111      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6892      	ldr	r2, [r2, #8]
 8002e14:	0211      	lsls	r1, r2, #8
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68d2      	ldr	r2, [r2, #12]
 8002e1a:	0912      	lsrs	r2, r2, #4
 8002e1c:	0452      	lsls	r2, r2, #17
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	491f      	ldr	r1, [pc, #124]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	614b      	str	r3, [r1, #20]
 8002e26:	e011      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	0211      	lsls	r1, r2, #8
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6912      	ldr	r2, [r2, #16]
 8002e3e:	0852      	lsrs	r2, r2, #1
 8002e40:	3a01      	subs	r2, #1
 8002e42:	0652      	lsls	r2, r2, #25
 8002e44:	430a      	orrs	r2, r1
 8002e46:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fd ffd6 	bl	8000e08 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e5e:	e009      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e60:	f7fd ffd2 	bl	8000e08 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	73fb      	strb	r3, [r7, #15]
          break;
 8002e72:	e005      	b.n	8002e80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ef      	beq.n	8002e60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e095      	b.n	8002fe2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d009      	beq.n	8002edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	e005      	b.n	8002edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fcfe 	bl	80008f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f1c:	d902      	bls.n	8002f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e002      	b.n	8002f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f32:	d007      	beq.n	8002f44 <HAL_SPI_Init+0xa0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	ea42 0103 	orr.w	r1, r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	f003 0204 	and.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b088      	sub	sp, #32
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_SPI_Transmit+0x22>
 8003008:	2302      	movs	r3, #2
 800300a:	e158      	b.n	80032be <HAL_SPI_Transmit+0x2d4>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003014:	f7fd fef8 	bl	8000e08 <HAL_GetTick>
 8003018:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d002      	beq.n	8003030 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800302e:	e13d      	b.n	80032ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_SPI_Transmit+0x52>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003040:	e134      	b.n	80032ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	d10f      	bne.n	80030ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d007      	beq.n	80030cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d4:	d94b      	bls.n	800316e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0xfa>
 80030de:	8afb      	ldrh	r3, [r7, #22]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d13e      	bne.n	8003162 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003108:	e02b      	b.n	8003162 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d112      	bne.n	800313e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800313c:	e011      	b.n	8003162 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313e:	f7fd fe63 	bl	8000e08 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d803      	bhi.n	8003156 <HAL_SPI_Transmit+0x16c>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x172>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003160:	e0a4      	b.n	80032ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ce      	bne.n	800310a <HAL_SPI_Transmit+0x120>
 800316c:	e07c      	b.n	8003268 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_SPI_Transmit+0x192>
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d170      	bne.n	800325e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d912      	bls.n	80031ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	881a      	ldrh	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b02      	subs	r3, #2
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031aa:	e058      	b.n	800325e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031d2:	e044      	b.n	800325e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d12b      	bne.n	800323a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d912      	bls.n	8003212 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b02      	subs	r3, #2
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003210:	e025      	b.n	800325e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003238:	e011      	b.n	800325e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323a:	f7fd fde5 	bl	8000e08 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d803      	bhi.n	8003252 <HAL_SPI_Transmit+0x268>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003250:	d102      	bne.n	8003258 <HAL_SPI_Transmit+0x26e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800325c:	e026      	b.n	80032ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1b5      	bne.n	80031d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fce3 	bl	8003c38 <SPI_EndRxTxTransaction>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e000      	b.n	80032ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 80032aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d112      	bne.n	800330a <HAL_SPI_Receive+0x44>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10e      	bne.n	800330a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2204      	movs	r2, #4
 80032f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032f4:	88fa      	ldrh	r2, [r7, #6]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f910 	bl	8003526 <HAL_SPI_TransmitReceive>
 8003306:	4603      	mov	r3, r0
 8003308:	e109      	b.n	800351e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_SPI_Receive+0x52>
 8003314:	2302      	movs	r3, #2
 8003316:	e102      	b.n	800351e <HAL_SPI_Receive+0x258>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003320:	f7fd fd72 	bl	8000e08 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003332:	2302      	movs	r3, #2
 8003334:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003336:	e0e9      	b.n	800350c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_Receive+0x7e>
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003348:	e0e0      	b.n	800350c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2204      	movs	r2, #4
 800334e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003394:	d908      	bls.n	80033a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	e007      	b.n	80033b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	d10f      	bne.n	80033e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d007      	beq.n	8003400 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003408:	d867      	bhi.n	80034da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800340a:	e030      	b.n	800346e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d117      	bne.n	800344a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f103 020c 	add.w	r2, r3, #12
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003448:	e011      	b.n	800346e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800344a:	f7fd fcdd 	bl	8000e08 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d803      	bhi.n	8003462 <HAL_SPI_Receive+0x19c>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003460:	d102      	bne.n	8003468 <HAL_SPI_Receive+0x1a2>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800346c:	e04e      	b.n	800350c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1c8      	bne.n	800340c <HAL_SPI_Receive+0x146>
 800347a:	e034      	b.n	80034e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d115      	bne.n	80034b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	b292      	uxth	r2, r2
 8003496:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034b4:	e011      	b.n	80034da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b6:	f7fd fca7 	bl	8000e08 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d803      	bhi.n	80034ce <HAL_SPI_Receive+0x208>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Receive+0x20e>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034d8:	e018      	b.n	800350c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1ca      	bne.n	800347c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fb4c 	bl	8003b88 <SPI_EndRxTransaction>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
 8003508:	e000      	b.n	800350c <HAL_SPI_Receive+0x246>
  }

error :
 800350a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	; 0x28
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_SPI_TransmitReceive+0x26>
 8003548:	2302      	movs	r3, #2
 800354a:	e1fb      	b.n	8003944 <HAL_SPI_TransmitReceive+0x41e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003554:	f7fd fc58 	bl	8000e08 <HAL_GetTick>
 8003558:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003560:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003570:	7efb      	ldrb	r3, [r7, #27]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00e      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x6e>
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357c:	d106      	bne.n	800358c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_SPI_TransmitReceive+0x66>
 8003586:	7efb      	ldrb	r3, [r7, #27]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d003      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003592:	e1cd      	b.n	8003930 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x80>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0x80>
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035ac:	e1c0      	b.n	8003930 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d003      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2205      	movs	r2, #5
 80035be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	887a      	ldrh	r2, [r7, #2]
 80035d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	887a      	ldrh	r2, [r7, #2]
 80035da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	887a      	ldrh	r2, [r7, #2]
 80035ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003604:	d802      	bhi.n	800360c <HAL_SPI_TransmitReceive+0xe6>
 8003606:	8a3b      	ldrh	r3, [r7, #16]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d908      	bls.n	800361e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	e007      	b.n	800362e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800362c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d007      	beq.n	800364c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003654:	d97c      	bls.n	8003750 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x13e>
 800365e:	8a7b      	ldrh	r3, [r7, #18]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d169      	bne.n	8003738 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003688:	e056      	b.n	8003738 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b02      	cmp	r3, #2
 8003696:	d11b      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x1aa>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x1aa>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d113      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d11c      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x1f2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	b292      	uxth	r2, r2
 80036f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	1c9a      	adds	r2, r3, #2
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003718:	f7fd fb76 	bl	8000e08 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003724:	429a      	cmp	r2, r3
 8003726:	d807      	bhi.n	8003738 <HAL_SPI_TransmitReceive+0x212>
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372e:	d003      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003736:	e0fb      	b.n	8003930 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1a3      	bne.n	800368a <HAL_SPI_TransmitReceive+0x164>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d19d      	bne.n	800368a <HAL_SPI_TransmitReceive+0x164>
 800374e:	e0df      	b.n	8003910 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x23a>
 8003758:	8a7b      	ldrh	r3, [r7, #18]
 800375a:	2b01      	cmp	r3, #1
 800375c:	f040 80cb 	bne.w	80038f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d912      	bls.n	8003790 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b02      	subs	r3, #2
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800378e:	e0b2      	b.n	80038f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b6:	e09e      	b.n	80038f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d134      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x30a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02f      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x30a>
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d12c      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d912      	bls.n	8003806 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	1c9a      	adds	r2, r3, #2
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b02      	subs	r3, #2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003804:	e012      	b.n	800382c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d148      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x3aa>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d042      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d923      	bls.n	800389e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	b292      	uxth	r2, r2
 8003862:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b02      	subs	r3, #2
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d81f      	bhi.n	80038cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	e016      	b.n	80038cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f103 020c 	add.w	r2, r3, #12
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038d0:	f7fd fa9a 	bl	8000e08 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038dc:	429a      	cmp	r2, r3
 80038de:	d803      	bhi.n	80038e8 <HAL_SPI_TransmitReceive+0x3c2>
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x3c8>
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80038f4:	e01c      	b.n	8003930 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af5b 	bne.w	80037b8 <HAL_SPI_TransmitReceive+0x292>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	f47f af54 	bne.w	80037b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f98f 	bl	8003c38 <SPI_EndRxTxTransaction>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
 800392c:	e000      	b.n	8003930 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800392e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003944:	4618      	mov	r0, r3
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800395c:	f7fd fa54 	bl	8000e08 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	4413      	add	r3, r2
 800396a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800396c:	f7fd fa4c 	bl	8000e08 <HAL_GetTick>
 8003970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003972:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	015b      	lsls	r3, r3, #5
 8003978:	0d1b      	lsrs	r3, r3, #20
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003982:	e054      	b.n	8003a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398a:	d050      	beq.n	8003a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800398c:	f7fd fa3c 	bl	8000e08 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	d902      	bls.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d13d      	bne.n	8003a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ba:	d111      	bne.n	80039e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d004      	beq.n	80039d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ce:	d107      	bne.n	80039e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e8:	d10f      	bne.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e017      	b.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d19b      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000000 	.word	0x20000000

08003a5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a6e:	f7fd f9cb 	bl	8000e08 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a7e:	f7fd f9c3 	bl	8000e08 <HAL_GetTick>
 8003a82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a8c:	4b3d      	ldr	r3, [pc, #244]	; (8003b84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	0d1b      	lsrs	r3, r3, #20
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003aa4:	e060      	b.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003aac:	d107      	bne.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x62>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac4:	d050      	beq.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac6:	f7fd f99f 	bl	8000e08 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d902      	bls.n	8003adc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d13d      	bne.n	8003b58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af4:	d111      	bne.n	8003b1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d004      	beq.n	8003b0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d107      	bne.n	8003b1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b22:	d10f      	bne.n	8003b44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e010      	b.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d196      	bne.n	8003aa6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3728      	adds	r7, #40	; 0x28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000000 	.word	0x20000000

08003b88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b9c:	d111      	bne.n	8003bc2 <SPI_EndRxTransaction+0x3a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba6:	d004      	beq.n	8003bb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d107      	bne.n	8003bc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff febd 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e023      	b.n	8003c30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf0:	d11d      	bne.n	8003c2e <SPI_EndRxTransaction+0xa6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d004      	beq.n	8003c06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c04:	d113      	bne.n	8003c2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ff22 	bl	8003a5c <SPI_WaitFifoStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e000      	b.n	8003c30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff ff03 	bl	8003a5c <SPI_WaitFifoStateUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e027      	b.n	8003cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff fe68 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e014      	b.n	8003cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fedc 	bl	8003a5c <SPI_WaitFifoStateUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e000      	b.n	8003cbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e040      	b.n	8003d58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fc ff6a 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	; 0x24
 8003cf0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f940 	bl	8003f88 <UART_SetConfig>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e022      	b.n	8003d58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fbec 	bl	80044f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fc73 	bl	800463c <UART_CheckIdleState>
 8003d56:	4603      	mov	r3, r0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	f040 8082 	bne.w	8003e7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_UART_Transmit+0x26>
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07a      	b.n	8003e80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Transmit+0x38>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e073      	b.n	8003e80 <HAL_UART_Transmit+0x120>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2221      	movs	r2, #33	; 0x21
 8003dac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dae:	f7fd f82b 	bl	8000e08 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dcc:	d108      	bne.n	8003de0 <HAL_UART_Transmit+0x80>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	e003      	b.n	8003de8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003df0:	e02d      	b.n	8003e4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fc66 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e039      	b.n	8003e80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	3302      	adds	r3, #2
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e008      	b.n	8003e3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b292      	uxth	r2, r2
 8003e34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1cb      	bne.n	8003df2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	; 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fc32 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e005      	b.n	8003e80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d142      	bne.n	8003f24 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_Receive_DMA+0x22>
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e03b      	b.n	8003f26 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Receive_DMA+0x34>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e034      	b.n	8003f26 <HAL_UART_Receive_DMA+0x9e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_UART_Receive_DMA+0xa8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d01f      	beq.n	8003f14 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d018      	beq.n	8003f14 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	69f9      	ldr	r1, [r7, #28]
 8003f06:	6a3a      	ldr	r2, [r7, #32]
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e6      	bne.n	8003ee2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fc9c 	bl	8004858 <UART_Start_Receive_DMA>
 8003f20:	4603      	mov	r3, r0
 8003f22:	e000      	b.n	8003f26 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40008000 	.word	0x40008000

08003f34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b08a      	sub	sp, #40	; 0x28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4ba4      	ldr	r3, [pc, #656]	; (8004248 <UART_SetConfig+0x2c0>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a99      	ldr	r2, [pc, #612]	; (800424c <UART_SetConfig+0x2c4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a90      	ldr	r2, [pc, #576]	; (8004250 <UART_SetConfig+0x2c8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d126      	bne.n	8004060 <UART_SetConfig+0xd8>
 8004012:	4b90      	ldr	r3, [pc, #576]	; (8004254 <UART_SetConfig+0x2cc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0xd0>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0xa0>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	08004049 	.word	0x08004049
 8004030:	08004041 	.word	0x08004041
 8004034:	08004051 	.word	0x08004051
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e116      	b.n	800426e <UART_SetConfig+0x2e6>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004046:	e112      	b.n	800426e <UART_SetConfig+0x2e6>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800404e:	e10e      	b.n	800426e <UART_SetConfig+0x2e6>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004056:	e10a      	b.n	800426e <UART_SetConfig+0x2e6>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800405e:	e106      	b.n	800426e <UART_SetConfig+0x2e6>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7c      	ldr	r2, [pc, #496]	; (8004258 <UART_SetConfig+0x2d0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d138      	bne.n	80040dc <UART_SetConfig+0x154>
 800406a:	4b7a      	ldr	r3, [pc, #488]	; (8004254 <UART_SetConfig+0x2cc>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d82d      	bhi.n	80040d4 <UART_SetConfig+0x14c>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0xf8>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040d5 	.word	0x080040d5
 8004088:	080040d5 	.word	0x080040d5
 800408c:	080040d5 	.word	0x080040d5
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040d5 	.word	0x080040d5
 8004098:	080040d5 	.word	0x080040d5
 800409c:	080040d5 	.word	0x080040d5
 80040a0:	080040bd 	.word	0x080040bd
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ba:	e0d8      	b.n	800426e <UART_SetConfig+0x2e6>
 80040bc:	2302      	movs	r3, #2
 80040be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c2:	e0d4      	b.n	800426e <UART_SetConfig+0x2e6>
 80040c4:	2304      	movs	r3, #4
 80040c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ca:	e0d0      	b.n	800426e <UART_SetConfig+0x2e6>
 80040cc:	2308      	movs	r3, #8
 80040ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d2:	e0cc      	b.n	800426e <UART_SetConfig+0x2e6>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040da:	e0c8      	b.n	800426e <UART_SetConfig+0x2e6>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a5e      	ldr	r2, [pc, #376]	; (800425c <UART_SetConfig+0x2d4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d125      	bne.n	8004132 <UART_SetConfig+0x1aa>
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <UART_SetConfig+0x2cc>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d016      	beq.n	8004122 <UART_SetConfig+0x19a>
 80040f4:	2b30      	cmp	r3, #48	; 0x30
 80040f6:	d818      	bhi.n	800412a <UART_SetConfig+0x1a2>
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d00a      	beq.n	8004112 <UART_SetConfig+0x18a>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d814      	bhi.n	800412a <UART_SetConfig+0x1a2>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <UART_SetConfig+0x182>
 8004104:	2b10      	cmp	r3, #16
 8004106:	d008      	beq.n	800411a <UART_SetConfig+0x192>
 8004108:	e00f      	b.n	800412a <UART_SetConfig+0x1a2>
 800410a:	2300      	movs	r3, #0
 800410c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004110:	e0ad      	b.n	800426e <UART_SetConfig+0x2e6>
 8004112:	2302      	movs	r3, #2
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004118:	e0a9      	b.n	800426e <UART_SetConfig+0x2e6>
 800411a:	2304      	movs	r3, #4
 800411c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004120:	e0a5      	b.n	800426e <UART_SetConfig+0x2e6>
 8004122:	2308      	movs	r3, #8
 8004124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004128:	e0a1      	b.n	800426e <UART_SetConfig+0x2e6>
 800412a:	2310      	movs	r3, #16
 800412c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004130:	e09d      	b.n	800426e <UART_SetConfig+0x2e6>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4a      	ldr	r2, [pc, #296]	; (8004260 <UART_SetConfig+0x2d8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d125      	bne.n	8004188 <UART_SetConfig+0x200>
 800413c:	4b45      	ldr	r3, [pc, #276]	; (8004254 <UART_SetConfig+0x2cc>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004146:	2bc0      	cmp	r3, #192	; 0xc0
 8004148:	d016      	beq.n	8004178 <UART_SetConfig+0x1f0>
 800414a:	2bc0      	cmp	r3, #192	; 0xc0
 800414c:	d818      	bhi.n	8004180 <UART_SetConfig+0x1f8>
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d00a      	beq.n	8004168 <UART_SetConfig+0x1e0>
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d814      	bhi.n	8004180 <UART_SetConfig+0x1f8>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <UART_SetConfig+0x1d8>
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d008      	beq.n	8004170 <UART_SetConfig+0x1e8>
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x1f8>
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e082      	b.n	800426e <UART_SetConfig+0x2e6>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e07e      	b.n	800426e <UART_SetConfig+0x2e6>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e07a      	b.n	800426e <UART_SetConfig+0x2e6>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e076      	b.n	800426e <UART_SetConfig+0x2e6>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e072      	b.n	800426e <UART_SetConfig+0x2e6>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a35      	ldr	r2, [pc, #212]	; (8004264 <UART_SetConfig+0x2dc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d12a      	bne.n	80041e8 <UART_SetConfig+0x260>
 8004192:	4b30      	ldr	r3, [pc, #192]	; (8004254 <UART_SetConfig+0x2cc>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a0:	d01a      	beq.n	80041d8 <UART_SetConfig+0x250>
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a6:	d81b      	bhi.n	80041e0 <UART_SetConfig+0x258>
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d00c      	beq.n	80041c8 <UART_SetConfig+0x240>
 80041ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b2:	d815      	bhi.n	80041e0 <UART_SetConfig+0x258>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <UART_SetConfig+0x238>
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d008      	beq.n	80041d0 <UART_SetConfig+0x248>
 80041be:	e00f      	b.n	80041e0 <UART_SetConfig+0x258>
 80041c0:	2300      	movs	r3, #0
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e052      	b.n	800426e <UART_SetConfig+0x2e6>
 80041c8:	2302      	movs	r3, #2
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e04e      	b.n	800426e <UART_SetConfig+0x2e6>
 80041d0:	2304      	movs	r3, #4
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e04a      	b.n	800426e <UART_SetConfig+0x2e6>
 80041d8:	2308      	movs	r3, #8
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041de:	e046      	b.n	800426e <UART_SetConfig+0x2e6>
 80041e0:	2310      	movs	r3, #16
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e6:	e042      	b.n	800426e <UART_SetConfig+0x2e6>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <UART_SetConfig+0x2c4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d13a      	bne.n	8004268 <UART_SetConfig+0x2e0>
 80041f2:	4b18      	ldr	r3, [pc, #96]	; (8004254 <UART_SetConfig+0x2cc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004200:	d01a      	beq.n	8004238 <UART_SetConfig+0x2b0>
 8004202:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004206:	d81b      	bhi.n	8004240 <UART_SetConfig+0x2b8>
 8004208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420c:	d00c      	beq.n	8004228 <UART_SetConfig+0x2a0>
 800420e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004212:	d815      	bhi.n	8004240 <UART_SetConfig+0x2b8>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <UART_SetConfig+0x298>
 8004218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421c:	d008      	beq.n	8004230 <UART_SetConfig+0x2a8>
 800421e:	e00f      	b.n	8004240 <UART_SetConfig+0x2b8>
 8004220:	2300      	movs	r3, #0
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e022      	b.n	800426e <UART_SetConfig+0x2e6>
 8004228:	2302      	movs	r3, #2
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e01e      	b.n	800426e <UART_SetConfig+0x2e6>
 8004230:	2304      	movs	r3, #4
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e01a      	b.n	800426e <UART_SetConfig+0x2e6>
 8004238:	2308      	movs	r3, #8
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e016      	b.n	800426e <UART_SetConfig+0x2e6>
 8004240:	2310      	movs	r3, #16
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e012      	b.n	800426e <UART_SetConfig+0x2e6>
 8004248:	efff69f3 	.word	0xefff69f3
 800424c:	40008000 	.word	0x40008000
 8004250:	40013800 	.word	0x40013800
 8004254:	40021000 	.word	0x40021000
 8004258:	40004400 	.word	0x40004400
 800425c:	40004800 	.word	0x40004800
 8004260:	40004c00 	.word	0x40004c00
 8004264:	40005000 	.word	0x40005000
 8004268:	2310      	movs	r3, #16
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a9f      	ldr	r2, [pc, #636]	; (80044f0 <UART_SetConfig+0x568>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d17a      	bne.n	800436e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427c:	2b08      	cmp	r3, #8
 800427e:	d824      	bhi.n	80042ca <UART_SetConfig+0x342>
 8004280:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <UART_SetConfig+0x300>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042cb 	.word	0x080042cb
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042cb 	.word	0x080042cb
 8004298:	080042bb 	.word	0x080042bb
 800429c:	080042cb 	.word	0x080042cb
 80042a0:	080042cb 	.word	0x080042cb
 80042a4:	080042cb 	.word	0x080042cb
 80042a8:	080042c3 	.word	0x080042c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe f8b2 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80042b0:	61f8      	str	r0, [r7, #28]
        break;
 80042b2:	e010      	b.n	80042d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b4:	4b8f      	ldr	r3, [pc, #572]	; (80044f4 <UART_SetConfig+0x56c>)
 80042b6:	61fb      	str	r3, [r7, #28]
        break;
 80042b8:	e00d      	b.n	80042d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ba:	f7fe f813 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80042be:	61f8      	str	r0, [r7, #28]
        break;
 80042c0:	e009      	b.n	80042d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c6:	61fb      	str	r3, [r7, #28]
        break;
 80042c8:	e005      	b.n	80042d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80fb 	beq.w	80044d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d305      	bcc.n	80042fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d903      	bls.n	8004302 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004300:	e0e8      	b.n	80044d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2200      	movs	r2, #0
 8004306:	461c      	mov	r4, r3
 8004308:	4615      	mov	r5, r2
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	022b      	lsls	r3, r5, #8
 8004314:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004318:	0222      	lsls	r2, r4, #8
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	6849      	ldr	r1, [r1, #4]
 800431e:	0849      	lsrs	r1, r1, #1
 8004320:	2000      	movs	r0, #0
 8004322:	4688      	mov	r8, r1
 8004324:	4681      	mov	r9, r0
 8004326:	eb12 0a08 	adds.w	sl, r2, r8
 800432a:	eb43 0b09 	adc.w	fp, r3, r9
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800433c:	4650      	mov	r0, sl
 800433e:	4659      	mov	r1, fp
 8004340:	f7fb ffae 	bl	80002a0 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004352:	d308      	bcc.n	8004366 <UART_SetConfig+0x3de>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435a:	d204      	bcs.n	8004366 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e0b6      	b.n	80044d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800436c:	e0b2      	b.n	80044d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004376:	d15e      	bne.n	8004436 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800437c:	2b08      	cmp	r3, #8
 800437e:	d828      	bhi.n	80043d2 <UART_SetConfig+0x44a>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x400>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043d3 	.word	0x080043d3
 8004398:	080043c3 	.word	0x080043c3
 800439c:	080043d3 	.word	0x080043d3
 80043a0:	080043d3 	.word	0x080043d3
 80043a4:	080043d3 	.word	0x080043d3
 80043a8:	080043cb 	.word	0x080043cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe f832 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e014      	b.n	80043de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7fe f844 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 80043b8:	61f8      	str	r0, [r7, #28]
        break;
 80043ba:	e010      	b.n	80043de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <UART_SetConfig+0x56c>)
 80043be:	61fb      	str	r3, [r7, #28]
        break;
 80043c0:	e00d      	b.n	80043de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fd ff8f 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80043c6:	61f8      	str	r0, [r7, #28]
        break;
 80043c8:	e009      	b.n	80043de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	61fb      	str	r3, [r7, #28]
        break;
 80043d0:	e005      	b.n	80043de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d077      	beq.n	80044d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005a      	lsls	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d916      	bls.n	800442e <UART_SetConfig+0x4a6>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004406:	d212      	bcs.n	800442e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f023 030f 	bic.w	r3, r3, #15
 8004410:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	b29b      	uxth	r3, r3
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	b29a      	uxth	r2, r3
 800441e:	8afb      	ldrh	r3, [r7, #22]
 8004420:	4313      	orrs	r3, r2
 8004422:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	8afa      	ldrh	r2, [r7, #22]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	e052      	b.n	80044d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004434:	e04e      	b.n	80044d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800443a:	2b08      	cmp	r3, #8
 800443c:	d827      	bhi.n	800448e <UART_SetConfig+0x506>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x4bc>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004469 	.word	0x08004469
 8004448:	08004471 	.word	0x08004471
 800444c:	08004479 	.word	0x08004479
 8004450:	0800448f 	.word	0x0800448f
 8004454:	0800447f 	.word	0x0800447f
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fd ffd4 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 800446c:	61f8      	str	r0, [r7, #28]
        break;
 800446e:	e014      	b.n	800449a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004470:	f7fd ffe6 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e010      	b.n	800449a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <UART_SetConfig+0x56c>)
 800447a:	61fb      	str	r3, [r7, #28]
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fd ff31 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8004482:	61f8      	str	r0, [r7, #28]
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e005      	b.n	800449a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004498:	bf00      	nop
    }

    if (pclk != 0U)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d019      	beq.n	80044d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	085a      	lsrs	r2, r3, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d909      	bls.n	80044ce <UART_SetConfig+0x546>
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c0:	d205      	bcs.n	80044ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e002      	b.n	80044d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3728      	adds	r7, #40	; 0x28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	40008000 	.word	0x40008000
 80044f4:	00f42400 	.word	0x00f42400

080044f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01a      	beq.n	800460e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045f6:	d10a      	bne.n	800460e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af02      	add	r7, sp, #8
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800464c:	f7fc fbdc 	bl	8000e08 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b08      	cmp	r3, #8
 800465e:	d10e      	bne.n	800467e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f82d 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e023      	b.n	80046c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d10e      	bne.n	80046aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800468c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f817 	bl	80046ce <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e00d      	b.n	80046c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b09c      	sub	sp, #112	; 0x70
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	e0a5      	b.n	800482c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e6:	f000 80a1 	beq.w	800482c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fc fb8d 	bl	8000e08 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <UART_WaitOnFlagUntilTimeout+0x32>
 80046fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d13e      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004714:	667b      	str	r3, [r7, #100]	; 0x64
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004720:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800472c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e6      	bne.n	8004700 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	663b      	str	r3, [r7, #96]	; 0x60
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3308      	adds	r3, #8
 8004750:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004752:	64ba      	str	r2, [r7, #72]	; 0x48
 8004754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e5      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e067      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d04f      	beq.n	800482c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d147      	bne.n	800482c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3308      	adds	r3, #8
 80047de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	613b      	str	r3, [r7, #16]
   return(result);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047f8:	623a      	str	r2, [r7, #32]
 80047fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69f9      	ldr	r1, [r7, #28]
 80047fe:	6a3a      	ldr	r2, [r7, #32]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	61bb      	str	r3, [r7, #24]
   return(result);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e010      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	429a      	cmp	r2, r3
 8004848:	f43f af4a 	beq.w	80046e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3770      	adds	r7, #112	; 0x70
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b096      	sub	sp, #88	; 0x58
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2222      	movs	r2, #34	; 0x22
 8004880:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02b      	beq.n	80048e2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	4a42      	ldr	r2, [pc, #264]	; (8004998 <UART_Start_Receive_DMA+0x140>)
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a41      	ldr	r2, [pc, #260]	; (800499c <UART_Start_Receive_DMA+0x144>)
 8004898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <UART_Start_Receive_DMA+0x148>)
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	2200      	movs	r2, #0
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3324      	adds	r3, #36	; 0x24
 80048b4:	4619      	mov	r1, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	461a      	mov	r2, r3
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	f7fc fc9d 	bl	80011fc <HAL_DMA_Start_IT>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00c      	beq.n	80048e2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2210      	movs	r2, #16
 80048cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e055      	b.n	800498e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004906:	657b      	str	r3, [r7, #84]	; 0x54
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
 8004912:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e6      	bne.n	80048f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	653b      	str	r3, [r7, #80]	; 0x50
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004944:	637a      	str	r2, [r7, #52]	; 0x34
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800494a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e5      	bne.n	8004924 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3308      	adds	r3, #8
 800495e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	e853 3f00 	ldrex	r3, [r3]
 8004966:	613b      	str	r3, [r7, #16]
   return(result);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004978:	623a      	str	r2, [r7, #32]
 800497a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	69f9      	ldr	r1, [r7, #28]
 800497e:	6a3a      	ldr	r2, [r7, #32]
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	61bb      	str	r3, [r7, #24]
   return(result);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e5      	bne.n	8004958 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3758      	adds	r7, #88	; 0x58
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	08004ab7 	.word	0x08004ab7
 800499c:	08004bdb 	.word	0x08004bdb
 80049a0:	08004c13 	.word	0x08004c13

080049a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	; 0x24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80049e4:	bf00      	nop
 80049e6:	3724      	adds	r7, #36	; 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b095      	sub	sp, #84	; 0x54
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
 8004a18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e6      	bne.n	80049f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e5      	bne.n	8004a2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d118      	bne.n	8004a98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f023 0310 	bic.w	r3, r3, #16
 8004a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6979      	ldr	r1, [r7, #20]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	613b      	str	r3, [r7, #16]
   return(result);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e6      	bne.n	8004a66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004aaa:	bf00      	nop
 8004aac:	3754      	adds	r7, #84	; 0x54
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b09c      	sub	sp, #112	; 0x70
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d170      	bne.n	8004bb4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e6      	bne.n	8004ada <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	667b      	str	r3, [r7, #100]	; 0x64
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b2c:	647a      	str	r2, [r7, #68]	; 0x44
 8004b2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b56:	663b      	str	r3, [r7, #96]	; 0x60
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b60:	633a      	str	r2, [r7, #48]	; 0x30
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b76:	2220      	movs	r2, #32
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d118      	bne.n	8004bb4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bc6:	f7ff f9d3 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bca:	e002      	b.n	8004bd2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004bcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bce:	f7ff f9b1 	bl	8003f34 <HAL_UART_RxCpltCallback>
}
 8004bd2:	bf00      	nop
 8004bd4:	3770      	adds	r7, #112	; 0x70
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d109      	bne.n	8004c04 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff f9b7 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c02:	e002      	b.n	8004c0a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff f99f 	bl	8003f48 <HAL_UART_RxHalfCpltCallback>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b80      	cmp	r3, #128	; 0x80
 8004c38:	d109      	bne.n	8004c4e <UART_DMAError+0x3c>
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b21      	cmp	r3, #33	; 0x21
 8004c3e:	d106      	bne.n	8004c4e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f7ff feab 	bl	80049a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d109      	bne.n	8004c70 <UART_DMAError+0x5e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b22      	cmp	r3, #34	; 0x22
 8004c60:	d106      	bne.n	8004c70 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f7ff fec0 	bl	80049f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c76:	f043 0210 	orr.w	r2, r3, #16
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c80:	6978      	ldr	r0, [r7, #20]
 8004c82:	f7ff f96b 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <initMatchNVM25Q80>:
volatile bool_t pfERASE_NVM(uint8_t* retByte){
	*retByte = CLEAR_NVM_SPI_BYTE_VOLUE;
	return TRUE;
}

static void initMatchNVM25Q80(){
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
	fGetCharStream = NULL;//сбросить все и вся, если сбой! или комплит ресив
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <initMatchNVM25Q80+0x14>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20000350 	.word	0x20000350

08004ca8 <threadNVM25Q80>:

/*
 *  @brief не блокирующая таймер-функция входа в обработчик внутренних событий неблокирующего автомата
 *  		необходимо организовать периодический вызов из суперцикла, задачи ОСРВ или таймера
 */
match_nvm_t threadNVM25Q80(){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
	switch (stateNvm){
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d84c      	bhi.n	8004d4e <threadNVM25Q80+0xa6>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <threadNVM25Q80+0x14>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cd1 	.word	0x08004cd1
 8004cc0:	08004d57 	.word	0x08004d57
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004d3b 	.word	0x08004d3b
 8004ccc:	08004d47 	.word	0x08004d47
		case NO_INIT_NVM:{
			initMatchNVM25Q80();
 8004cd0:	f7ff ffde 	bl	8004c90 <initMatchNVM25Q80>
			stateNvm++;
 8004cd4:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004cde:	701a      	strb	r2, [r3, #0]
		}break;
 8004ce0:	e03a      	b.n	8004d58 <threadNVM25Q80+0xb0>
		case WAIT_INIT_NVM_AREA:{
			//состояние автомата смениться автоматически, при передаче в функцию инициации startNvm необходимых параметров для процесса связанного с NVM
		}break;
		//
		case WAIT_NVM_DATA:{
			if ( fGetCharStream != NULL){
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <threadNVM25Q80+0xbc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d023      	beq.n	8004d32 <threadNVM25Q80+0x8a>
				while (  (*fGetCharStream)(&byteToNvm)  ){
 8004cea:	e01a      	b.n	8004d22 <threadNVM25Q80+0x7a>
					byteReadyForExtern = TRUE;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <threadNVM25Q80+0xc0>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
					//здесь буду решать чего с этим byteToNvm из потока делать..

					////////////addByteToNvm(byteToNvm);

					if ( iNvm.numbsWrite != 0 ){
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <threadNVM25Q80+0x5c>
						iNvm.numbsWrite--;
 8004cfa:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	4a1a      	ldr	r2, [pc, #104]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004d02:	6053      	str	r3, [r2, #4]
					}
					if ( iNvm.numbsWrite >= ALL_SPI_FLASH_SIZE ){
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0c:	d302      	bcc.n	8004d14 <threadNVM25Q80+0x6c>
						iNvm.numbsWrite=0;
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	605a      	str	r2, [r3, #4]
					}
					if ( iNvm.numbsWrite == 0 ){
 8004d14:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <threadNVM25Q80+0xc4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <threadNVM25Q80+0x7a>
						stateNvm = NVM_STREAM_RECIVE_COMPLITE;
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d1e:	2203      	movs	r2, #3
 8004d20:	701a      	strb	r2, [r3, #0]
				while (  (*fGetCharStream)(&byteToNvm)  ){
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <threadNVM25Q80+0xbc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4812      	ldr	r0, [pc, #72]	; (8004d70 <threadNVM25Q80+0xc8>)
 8004d28:	4798      	blx	r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1dd      	bne.n	8004cec <threadNVM25Q80+0x44>
					}
				}
			}else{
				stateNvm = NVM_INTERN_ERROR ;
			}
		}break;
 8004d30:	e012      	b.n	8004d58 <threadNVM25Q80+0xb0>
				stateNvm = NVM_INTERN_ERROR ;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d34:	2204      	movs	r2, #4
 8004d36:	701a      	strb	r2, [r3, #0]
		}break;
 8004d38:	e00e      	b.n	8004d58 <threadNVM25Q80+0xb0>
		//
		case NVM_STREAM_RECIVE_COMPLITE:{
			initMatchNVM25Q80();
 8004d3a:	f7ff ffa9 	bl	8004c90 <initMatchNVM25Q80>
			stateNvm = WAIT_INIT_NVM_AREA;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
		}break;
 8004d44:	e008      	b.n	8004d58 <threadNVM25Q80+0xb0>
		//
		case NVM_INTERN_ERROR:{
			stateNvm = NO_INIT_NVM;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
		}break;
 8004d4c:	e004      	b.n	8004d58 <threadNVM25Q80+0xb0>
		//error match state
		default:{
			stateNvm = NVM_INTERN_ERROR ;
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d50:	2204      	movs	r2, #4
 8004d52:	701a      	strb	r2, [r3, #0]
		}break;
 8004d54:	e000      	b.n	8004d58 <threadNVM25Q80+0xb0>
		}break;
 8004d56:	bf00      	nop
	}//switch(..
	return (stateNvm);
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <threadNVM25Q80+0xb8>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000354 	.word	0x20000354
 8004d64:	20000350 	.word	0x20000350
 8004d68:	20000355 	.word	0x20000355
 8004d6c:	20000344 	.word	0x20000344
 8004d70:	20000009 	.word	0x20000009

08004d74 <startNvm>:

/*
 * после валидации данных для автомата процесса NVM
 * инициируется необходимый процесс и автомат NVM приступает к работе
 */
bool_t startNvm(nvm_t* aNvm){
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
//	aNvm->numbsWrite
	if ( aNvm->startAddrNvm < ALL_SPI_FLASH_SIZE ){
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d84:	d20c      	bcs.n	8004da0 <startNvm+0x2c>
		iNvm.startAddrNvm=aNvm->startAddrNvm;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <startNvm+0x6c>)
 8004d8c:	6013      	str	r3, [r2, #0]
	}else{return FALSE;}
	if (  ( ( aNvm->startAddrNvm + aNvm->numbsWrite ) <  ALL_SPI_FLASH_SIZE )  ){
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	d20b      	bcs.n	8004db6 <startNvm+0x42>
 8004d9e:	e001      	b.n	8004da4 <startNvm+0x30>
	}else{return FALSE;}
 8004da0:	2300      	movs	r3, #0
 8004da2:	e016      	b.n	8004dd2 <startNvm+0x5e>
			iNvm.numbsWrite = aNvm->numbsWrite;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <startNvm+0x6c>)
 8004daa:	6053      	str	r3, [r2, #4]
	}else{return FALSE;}
	if ( aNvm->passCallback != NULL ){
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <startNvm+0x56>
 8004db4:	e001      	b.n	8004dba <startNvm+0x46>
	}else{return FALSE;}
 8004db6:	2300      	movs	r3, #0
 8004db8:	e00b      	b.n	8004dd2 <startNvm+0x5e>
		iNvm.passCallback=aNvm->passCallback;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <startNvm+0x6c>)
 8004dc0:	6093      	str	r3, [r2, #8]
		fGetCharStream=iNvm.passCallback;
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <startNvm+0x6c>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <startNvm+0x70>)
 8004dc8:	6013      	str	r3, [r2, #0]
	}
	stateNvm = WAIT_NVM_DATA;
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <startNvm+0x74>)
 8004dcc:	2202      	movs	r2, #2
 8004dce:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8004dd0:	2301      	movs	r3, #1
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000344 	.word	0x20000344
 8004de4:	20000350 	.word	0x20000350
 8004de8:	20000354 	.word	0x20000354

08004dec <respondERROR>:
}
void respondREAD(){
	printCli (szREAD);
}
*/
void respondERROR(){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	printCli(szERROR);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <respondERROR+0x10>)
 8004df2:	f001 fd07 	bl	8006804 <printCli>
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200000fc 	.word	0x200000fc

08004e00 <respondErrorNumersArg>:

void respondErrorNumersArg(){
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
	respondERROR();
 8004e04:	f7ff fff2 	bl	8004dec <respondERROR>
	printCli(" Количество аргументов не соответствует команде \n\r");
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <respondErrorNumersArg+0x14>)
 8004e0a:	f001 fcfb 	bl	8006804 <printCli>
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	08007ec4 	.word	0x08007ec4

08004e18 <help>:

void help(int argc, const char * const * argv){
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	printCli ("microCLI library based shell v 1.1\n\r\n");
 8004e22:	4819      	ldr	r0, [pc, #100]	; (8004e88 <help+0x70>)
 8004e24:	f001 fcee 	bl	8006804 <printCli>
	int i=0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004e2c:	e01c      	b.n	8004e68 <help+0x50>
		printCli("[");
 8004e2e:	4817      	ldr	r0, [pc, #92]	; (8004e8c <help+0x74>)
 8004e30:	f001 fce8 	bl	8006804 <printCli>
		printCli(list_cmds[i].name);
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <help+0x78>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fce0 	bl	8006804 <printCli>
		printCli("] \t ");
 8004e44:	4813      	ldr	r0, [pc, #76]	; (8004e94 <help+0x7c>)
 8004e46:	f001 fcdd 	bl	8006804 <printCli>
		printCli(list_cmds[i].descriptions);
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <help+0x78>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	4413      	add	r3, r2
 8004e52:	3308      	adds	r3, #8
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fcd4 	bl	8006804 <printCli>
		printCli("\n\r");
 8004e5c:	480e      	ldr	r0, [pc, #56]	; (8004e98 <help+0x80>)
 8004e5e:	f001 fcd1 	bl	8006804 <printCli>
		i++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004e68:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <help+0x78>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	4413      	add	r3, r2
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1da      	bne.n	8004e2e <help+0x16>
	}
	printCli ("When you enter a command without a parameter, "
 8004e78:	4808      	ldr	r0, [pc, #32]	; (8004e9c <help+0x84>)
 8004e7a:	f001 fcc3 	bl	8006804 <printCli>
			"the current set value is displayed.");
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08007f24 	.word	0x08007f24
 8004e8c:	08007f4c 	.word	0x08007f4c
 8004e90:	2000000c 	.word	0x2000000c
 8004e94:	08007f50 	.word	0x08007f50
 8004e98:	08007f58 	.word	0x08007f58
 8004e9c:	08007f5c 	.word	0x08007f5c

08004ea0 <clear>:
void clear(int argc, const char * const * argv){
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	printCli ("\033[2J");    // ESC seq for clear entire screen
 8004eaa:	4805      	ldr	r0, [pc, #20]	; (8004ec0 <clear+0x20>)
 8004eac:	f001 fcaa 	bl	8006804 <printCli>
	printCli ("\033[H");     // ESC seq for move cursor at left-top corner
 8004eb0:	4804      	ldr	r0, [pc, #16]	; (8004ec4 <clear+0x24>)
 8004eb2:	f001 fca7 	bl	8006804 <printCli>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	08007fb0 	.word	0x08007fb0
 8004ec4:	08007fb8 	.word	0x08007fb8

08004ec8 <list>:
void list(int argc, const char * const * argv){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	int i=0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
	printCli(CLYELLOW);
 8004ed6:	4812      	ldr	r0, [pc, #72]	; (8004f20 <list+0x58>)
 8004ed8:	f001 fc94 	bl	8006804 <printCli>
	while (list_cmds[i].name[0]){
 8004edc:	e010      	b.n	8004f00 <list+0x38>
		printCli("'");
 8004ede:	4811      	ldr	r0, [pc, #68]	; (8004f24 <list+0x5c>)
 8004ee0:	f001 fc90 	bl	8006804 <printCli>
		printCli(list_cmds[i].name);
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <list+0x60>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	4413      	add	r3, r2
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fc88 	bl	8006804 <printCli>
		printCli ("'\t");
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <list+0x64>)
 8004ef6:	f001 fc85 	bl	8006804 <printCli>
		i++;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004f00:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <list+0x60>)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	4413      	add	r3, r2
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e6      	bne.n	8004ede <list+0x16>
	}
	printCli(CLDEFAULTTEXT);
 8004f10:	4807      	ldr	r0, [pc, #28]	; (8004f30 <list+0x68>)
 8004f12:	f001 fc77 	bl	8006804 <printCli>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	08007fbc 	.word	0x08007fbc
 8004f24:	08007fc4 	.word	0x08007fc4
 8004f28:	2000000c 	.word	0x2000000c
 8004f2c:	08007fc8 	.word	0x08007fc8
 8004f30:	08007fcc 	.word	0x08007fcc

08004f34 <prolongationsExec>:

void prolongationsExec( int argc , const char * const * argv ){
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	execute_list_commands ( argc , &argv[0]);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 fca7 	bl	8006894 <execute_list_commands>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <catver>:

void catver(int argc, const char *const* argv){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	printCli ("FwVersion:");
 8004f5a:	4805      	ldr	r0, [pc, #20]	; (8004f70 <catver+0x20>)
 8004f5c:	f001 fc52 	bl	8006804 <printCli>
	printCli ( "Build: " __DATE__", " __TIME__ );
 8004f60:	4804      	ldr	r0, [pc, #16]	; (8004f74 <catver+0x24>)
 8004f62:	f001 fc4f 	bl	8006804 <printCli>
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	08007fd4 	.word	0x08007fd4
 8004f74:	08007fe0 	.word	0x08007fe0

08004f78 <man>:

void man(int argc, const char *const* argv){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	int i=0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004f86:	e030      	b.n	8004fea <man+0x72>
		if (strcmp(argv[0],list_cmds[i].name)==0){
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	491e      	ldr	r1, [pc, #120]	; (8005008 <man+0x90>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	440b      	add	r3, r1
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7fb f919 	bl	80001d0 <strcmp>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d11f      	bne.n	8004fe4 <man+0x6c>
			if (list_cmds[i].man[0]!=0){
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <man+0x90>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	330c      	adds	r3, #12
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <man+0x52>
				printCli(list_cmds[i].man);
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <man+0x90>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4413      	add	r3, r2
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fc1e 	bl	8006804 <printCli>
 8004fc8:	e008      	b.n	8004fdc <man+0x64>
			}else{
				printCli(list_cmds[i].descriptions);
 8004fca:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <man+0x90>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4413      	add	r3, r2
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fc14 	bl	8006804 <printCli>
			}
			printCli("\n\r");
 8004fdc:	480b      	ldr	r0, [pc, #44]	; (800500c <man+0x94>)
 8004fde:	f001 fc11 	bl	8006804 <printCli>
			return;
 8004fe2:	e00d      	b.n	8005000 <man+0x88>
		}
		i++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004fea:	4a07      	ldr	r2, [pc, #28]	; (8005008 <man+0x90>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	4413      	add	r3, r2
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1c6      	bne.n	8004f88 <man+0x10>
	}
	printCli ("Command for man absent, exec 'man man' and exec 'list'\n\r");
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <man+0x98>)
 8004ffc:	f001 fc02 	bl	8006804 <printCli>
}
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000000c 	.word	0x2000000c
 800500c:	08007f58 	.word	0x08007f58
 8005010:	08008000 	.word	0x08008000

08005014 <uid>:

#include "w25q80def.h"

void uid(int argc, const char *const* argv){
 8005014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005018:	b0ae      	sub	sp, #184	; 0xb8
 800501a:	af06      	add	r7, sp, #24
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
	uint8_t UId[8];
	getUniqueIdFlash25q(UId);
 8005020:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fc72 	bl	800590e <getUniqueIdFlash25q>

	const char stroutmask[]= "Manufacture Uniqui UID SPI flash: %02x%02x%02x%02x%02x%02x%02x%02x\n\r";
 800502a:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <uid+0x84>)
 800502c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005030:	4611      	mov	r1, r2
 8005032:	2245      	movs	r2, #69	; 0x45
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fce1 	bl	80069fc <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 800503a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800503e:	469c      	mov	ip, r3
 8005040:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8005044:	469e      	mov	lr, r3
 8005046:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 800504a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 800504e:	f897 109c 	ldrb.w	r1, [r7, #156]	; 0x9c
 8005052:	460c      	mov	r4, r1
 8005054:	f897 109d 	ldrb.w	r1, [r7, #157]	; 0x9d
 8005058:	460d      	mov	r5, r1
			UId[6], UId[7]);
 800505a:	f897 109e 	ldrb.w	r1, [r7, #158]	; 0x9e
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 800505e:	460e      	mov	r6, r1
			UId[6], UId[7]);
 8005060:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 8005064:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8005068:	f107 0008 	add.w	r0, r7, #8
 800506c:	9105      	str	r1, [sp, #20]
 800506e:	9604      	str	r6, [sp, #16]
 8005070:	9503      	str	r5, [sp, #12]
 8005072:	9402      	str	r4, [sp, #8]
 8005074:	9201      	str	r2, [sp, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4673      	mov	r3, lr
 800507a:	4662      	mov	r2, ip
 800507c:	4641      	mov	r1, r8
 800507e:	f001 fd21 	bl	8006ac4 <siprintf>
	printCli(strout);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fbbc 	bl	8006804 <printCli>
}
 800508c:	bf00      	nop
 800508e:	37a0      	adds	r7, #160	; 0xa0
 8005090:	46bd      	mov	sp, r7
 8005092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005096:	bf00      	nop
 8005098:	0800803c 	.word	0x0800803c

0800509c <reg>:

void reg( int argc , const char * const * argv ){
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b0a0      	sub	sp, #128	; 0x80
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]

	if (argc!=1){
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d002      	beq.n	80050b2 <reg+0x16>
		respondERROR();
 80050ac:	f7ff fe9e 	bl	8004dec <respondERROR>
		return;
 80050b0:	e039      	b.n	8005126 <reg+0x8a>
	}
	uint8_t status;
	size_t i=atol(argv[0]);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 fc72 	bl	80069a0 <atol>
 80050bc:	4603      	mov	r3, r0
 80050be:	67fb      	str	r3, [r7, #124]	; 0x7c
	if ( (i==1) || (i==2) ){
 80050c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d002      	beq.n	80050cc <reg+0x30>
 80050c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d129      	bne.n	8005120 <reg+0x84>
		status=getStatusRegFlash25q(i);
 80050cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fbf9 	bl	80058c8 <getStatusRegFlash25q>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80050dc:	bf00      	nop
	}else{
		respondERROR();
		return;
	}
	const char stroutmask[]= "Текущий статус Status Register-%d : %d\n\n\r";
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <reg+0x90>)
 80050e0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80050e4:	461d      	mov	r5, r3
 80050e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80050f6:	6020      	str	r0, [r4, #0]
 80050f8:	3404      	adds	r4, #4
 80050fa:	8021      	strh	r1, [r4, #0]
 80050fc:	3402      	adds	r4, #2
 80050fe:	0c0b      	lsrs	r3, r1, #16
 8005100:	7023      	strb	r3, [r4, #0]
	char strout[sizeof(stroutmask)+2];
	sprintf( strout , stroutmask , i , status );
 8005102:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005106:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800510a:	f107 0008 	add.w	r0, r7, #8
 800510e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005110:	f001 fcd8 	bl	8006ac4 <siprintf>
	printCli(strout);
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	4618      	mov	r0, r3
 800511a:	f001 fb73 	bl	8006804 <printCli>
 800511e:	e002      	b.n	8005126 <reg+0x8a>
		respondERROR();
 8005120:	f7ff fe64 	bl	8004dec <respondERROR>
		return;
 8005124:	bf00      	nop

}
 8005126:	3780      	adds	r7, #128	; 0x80
 8005128:	46bd      	mov	sp, r7
 800512a:	bdb0      	pop	{r4, r5, r7, pc}
 800512c:	08008084 	.word	0x08008084

08005130 <eraseAll>:

void eraseAll( int argc , const char * const * argv ){
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	eraseAllChipFlash25q();
 800513a:	f000 fccc 	bl	8005ad6 <eraseAllChipFlash25q>
	printCli("\n\rChip erased complite!\n\r");
 800513e:	4803      	ldr	r0, [pc, #12]	; (800514c <eraseAll+0x1c>)
 8005140:	f001 fb60 	bl	8006804 <printCli>
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	080080bc 	.word	0x080080bc

08005150 <cathex>:


void cathex( int argc , const char * const * argv ){
 8005150:	b580      	push	{r7, lr}
 8005152:	b0c2      	sub	sp, #264	; 0x108
 8005154:	af00      	add	r7, sp, #0
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800515e:	6018      	str	r0, [r3, #0]
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005168:	6019      	str	r1, [r3, #0]

	if (argc!=2){
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d002      	beq.n	800517e <cathex+0x2e>
		respondErrorNumersArg();
 8005178:	f7ff fe42 	bl	8004e00 <respondErrorNumersArg>
		return;
 800517c:	e073      	b.n	8005266 <cathex+0x116>
	}
	size_t addr=atol(argv[0]);
 800517e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fc08 	bl	80069a0 <atol>
 8005190:	4603      	mov	r3, r0
 8005192:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	if (addr>=ALL_SPI_FLASH_SIZE){
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519e:	d303      	bcc.n	80051a8 <cathex+0x58>
		printCli("Адрес задан вне допустимого диапазона\n\r");
 80051a0:	4833      	ldr	r0, [pc, #204]	; (8005270 <cathex+0x120>)
 80051a2:	f001 fb2f 	bl	8006804 <printCli>
		return;
 80051a6:	e05e      	b.n	8005266 <cathex+0x116>
	}
	size_t numbs=atoi(argv[1]);
 80051a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fbee 	bl	8006998 <atoi>
 80051bc:	4603      	mov	r3, r0
 80051be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	const char stroutmask[]= "Вывод содержимого внешней SPI flash по адресу %u в кол-ве %u байт в HEX(16):\n\n\r";
 80051c2:	4a2c      	ldr	r2, [pc, #176]	; (8005274 <cathex+0x124>)
 80051c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051c8:	4611      	mov	r1, r2
 80051ca:	227a      	movs	r2, #122	; 0x7a
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 fc15 	bl	80069fc <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf(strout, stroutmask,addr,numbs );
 80051d2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80051d6:	f107 0008 	add.w	r0, r7, #8
 80051da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051de:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80051e2:	f001 fc6f 	bl	8006ac4 <siprintf>
	printCli(strout);
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fb0a 	bl	8006804 <printCli>


	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 80051f0:	e02a      	b.n	8005248 <cathex+0xf8>
		uint8_t bSrc = readByteAddrFlash25q(addr);
 80051f2:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80051f6:	f000 fc0f 	bl	8005a18 <readByteAddrFlash25q>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		sprintf(strout,"%02X ",bSrc);
 8005200:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	491b      	ldr	r1, [pc, #108]	; (8005278 <cathex+0x128>)
 800520a:	4618      	mov	r0, r3
 800520c:	f001 fc5a 	bl	8006ac4 <siprintf>
		printCli(strout);
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4618      	mov	r0, r3
 8005216:	f001 faf5 	bl	8006804 <printCli>
		if ((numbs&7)==7)printCli(" ");
 800521a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	2b07      	cmp	r3, #7
 8005224:	d102      	bne.n	800522c <cathex+0xdc>
 8005226:	4815      	ldr	r0, [pc, #84]	; (800527c <cathex+0x12c>)
 8005228:	f001 faec 	bl	8006804 <printCli>
		if ((numbs&31)==31)printCli("\n\r");
 800522c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2b1f      	cmp	r3, #31
 8005236:	d102      	bne.n	800523e <cathex+0xee>
 8005238:	4811      	ldr	r0, [pc, #68]	; (8005280 <cathex+0x130>)
 800523a:	f001 fae3 	bl	8006804 <printCli>
		addr++;
 800523e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005242:	3301      	adds	r3, #1
 8005244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 8005248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <cathex+0x110>
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525e:	d3c8      	bcc.n	80051f2 <cathex+0xa2>
	}
	printCli("\n\r-- end --\n\r");
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <cathex+0x134>)
 8005262:	f001 facf 	bl	8006804 <printCli>
}
 8005266:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	080080d8 	.word	0x080080d8
 8005274:	08008140 	.word	0x08008140
 8005278:	08008124 	.word	0x08008124
 800527c:	0800812c 	.word	0x0800812c
 8005280:	08007f58 	.word	0x08007f58
 8005284:	08008130 	.word	0x08008130

08005288 <jedec>:

void jedec( int argc , const char * const * argv ){
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b0dd      	sub	sp, #372	; 0x174
 800528c:	af02      	add	r7, sp, #8
 800528e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005292:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005296:	6018      	str	r0, [r3, #0]
 8005298:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800529c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80052a0:	6019      	str	r1, [r3, #0]
	char pVoid[3];
	getJedecIdFlash25q(pVoid);
 80052a2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fb7c 	bl	80059a4 <getJedecIdFlash25q>

	const char stroutmask[]= "winbond JedecId SPI flash (page 54, https://static.chipdip.ru/lib/463/DOC002463585.pdf) \n\r"
 80052ac:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <jedec+0x68>)
 80052ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052b2:	4611      	mov	r1, r2
 80052b4:	22ac      	movs	r2, #172	; 0xac
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 fba0 	bl	80069fc <memcpy>
			"Manufacturer ID (0xEF=25Q80): %02X\n\r"
			"Memory Type ID1: %+02X\n\r"
			"Capacity ID: %+02X \n\r";
	char strout[sizeof(stroutmask)+2];
	sprintf(strout, stroutmask, pVoid[2],pVoid[1],pVoid[0] );
 80052bc:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 80052c0:	461a      	mov	r2, r3
 80052c2:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 80052c6:	461c      	mov	r4, r3
 80052c8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 80052cc:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80052d0:	f107 0008 	add.w	r0, r7, #8
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4623      	mov	r3, r4
 80052d8:	f001 fbf4 	bl	8006ac4 <siprintf>
	printCli(strout);
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 fa8f 	bl	8006804 <printCli>

}
 80052e6:	bf00      	nop
 80052e8:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd90      	pop	{r4, r7, pc}
 80052f0:	080081bc 	.word	0x080081bc

080052f4 <cat>:

void cat( int argc , const char * const * argv ){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0c2      	sub	sp, #264	; 0x108
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005302:	6018      	str	r0, [r3, #0]
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	6019      	str	r1, [r3, #0]

	if (argc!=2){
 800530e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d002      	beq.n	8005322 <cat+0x2e>
		respondErrorNumersArg();
 800531c:	f7ff fd70 	bl	8004e00 <respondErrorNumersArg>
		return;
 8005320:	e065      	b.n	80053ee <cat+0xfa>
	}
	size_t addr=atol(argv[0]);
 8005322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fb36 	bl	80069a0 <atol>
 8005334:	4603      	mov	r3, r0
 8005336:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	if (addr>=ALL_SPI_FLASH_SIZE){
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005342:	d303      	bcc.n	800534c <cat+0x58>
		printCli("Адрес задан вне допустимого диапазона\n\r");
 8005344:	482c      	ldr	r0, [pc, #176]	; (80053f8 <cat+0x104>)
 8005346:	f001 fa5d 	bl	8006804 <printCli>
		return;
 800534a:	e050      	b.n	80053ee <cat+0xfa>
	}
	size_t numbs=atoi(argv[1]);
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3304      	adds	r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f001 fb1c 	bl	8006998 <atoi>
 8005360:	4603      	mov	r3, r0
 8005362:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	const char stroutmask[]= "Вывод содержимого внешней SPI flash по адресу %u в кол-ве %u байт в ASCII:\n\n\r";
 8005366:	4a25      	ldr	r2, [pc, #148]	; (80053fc <cat+0x108>)
 8005368:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800536c:	4611      	mov	r1, r2
 800536e:	2278      	movs	r2, #120	; 0x78
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fb43 	bl	80069fc <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf(strout, stroutmask,addr,numbs );
 8005376:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800537a:	f107 0008 	add.w	r0, r7, #8
 800537e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005382:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005386:	f001 fb9d 	bl	8006ac4 <siprintf>
	printCli(strout);
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f001 fa38 	bl	8006804 <printCli>

	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 8005394:	e018      	b.n	80053c8 <cat+0xd4>

		uint8_t bSrc = readByteAddrFlash25q(addr);
 8005396:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800539a:	f000 fb3d 	bl	8005a18 <readByteAddrFlash25q>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		sprintf(strout,"%c",bSrc);
 80053a4:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4914      	ldr	r1, [pc, #80]	; (8005400 <cat+0x10c>)
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fb88 	bl	8006ac4 <siprintf>
		printCli(strout);
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 fa23 	bl	8006804 <printCli>
		addr++;
 80053be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c2:	3301      	adds	r3, #1
 80053c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 80053c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <cat+0xec>
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053de:	d3da      	bcc.n	8005396 <cat+0xa2>
	}

	unselectFlash25q();
 80053e0:	f000 fa3e 	bl	8005860 <unselectFlash25q>

	printCli("\n\r-- end --\n\r");
 80053e4:	4807      	ldr	r0, [pc, #28]	; (8005404 <cat+0x110>)
 80053e6:	f001 fa0d 	bl	8006804 <printCli>
	flushKeyboard();
 80053ea:	f001 fa45 	bl	8006878 <flushKeyboard>
}
 80053ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	080080d8 	.word	0x080080d8
 80053fc:	0800826c 	.word	0x0800826c
 8005400:	08008268 	.word	0x08008268
 8005404:	08008130 	.word	0x08008130

08005408 <echo>:

void echo( int argc , const char * const * argv ){
 8005408:	b580      	push	{r7, lr}
 800540a:	b0c4      	sub	sp, #272	; 0x110
 800540c:	af00      	add	r7, sp, #0
 800540e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005416:	6018      	str	r0, [r3, #0]
 8005418:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800541c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005420:	6019      	str	r1, [r3, #0]
	if (argc<2){
 8005422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005426:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	dc02      	bgt.n	8005436 <echo+0x2e>
		respondErrorNumersArg();
 8005430:	f7ff fce6 	bl	8004e00 <respondErrorNumersArg>
		return;
 8005434:	e091      	b.n	800555a <echo+0x152>
	}
	size_t addr=atol(argv[0]);
 8005436:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800543a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f001 faac 	bl	80069a0 <atol>
 8005448:	4603      	mov	r3, r0
 800544a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	if (addr>=ALL_SPI_FLASH_SIZE){
 800544e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d303      	bcc.n	8005460 <echo+0x58>
		printCli("Адрес задан вне допустимого диапазона\n\r");
 8005458:	4842      	ldr	r0, [pc, #264]	; (8005564 <echo+0x15c>)
 800545a:	f001 f9d3 	bl	8006804 <printCli>
		return;
 800545e:	e07c      	b.n	800555a <echo+0x152>
	}
	//собираем аргументы обратно в \0 терминированную строку
	int i=argc;
 8005460:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005464:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	while(--argc>1){
 800546e:	e013      	b.n	8005498 <echo+0x90>
		char* src=argv[argc]-1;
 8005470:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005474:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005480:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	4413      	add	r3, r2
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		*src=32;
 8005490:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005494:	2220      	movs	r2, #32
 8005496:	701a      	strb	r2, [r3, #0]
	while(--argc>1){
 8005498:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800549c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054a0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80054a4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	3a01      	subs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	dcd9      	bgt.n	8005470 <echo+0x68>
	}
	size_t numbs=strlen(argv[1]);
 80054bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80054c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3304      	adds	r3, #4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fa fe8a 	bl	80001e4 <strlen>
 80054d0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (  numbs  >  ( PAGE_CACH_FLASH - (addr%PAGE_CACH_FLASH) )  ){
 80054d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80054de:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d905      	bls.n	80054f2 <echo+0xea>
		respondERROR();
 80054e6:	f7ff fc81 	bl	8004dec <respondERROR>
		printCli("Данные выходят за границы страницы кэш флеш");
 80054ea:	481f      	ldr	r0, [pc, #124]	; (8005568 <echo+0x160>)
 80054ec:	f001 f98a 	bl	8006804 <printCli>
		return;
 80054f0:	e033      	b.n	800555a <echo+0x152>
	}
	const char stroutmask[]= "Ввод содержимого во внешнюю SPI flash по адресу %u в кол-ве %u байт в ASCII: '";
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <echo+0x164>)
 80054f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054f8:	4611      	mov	r1, r2
 80054fa:	227a      	movs	r2, #122	; 0x7a
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 fa7d 	bl	80069fc <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf( strout , stroutmask , addr , numbs );
 8005502:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8005506:	f107 0008 	add.w	r0, r7, #8
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005512:	f001 fad7 	bl	8006ac4 <siprintf>
	printCli(strout);
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f972 	bl	8006804 <printCli>
	printCli(argv[1]);
 8005520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005524:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3304      	adds	r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f001 f968 	bl	8006804 <printCli>
	printCli("'\n\r");
 8005534:	480e      	ldr	r0, [pc, #56]	; (8005570 <echo+0x168>)
 8005536:	f001 f965 	bl	8006804 <printCli>

	startWritePageFlash25q( argv[1] , addr , numbs );
 800553a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800553e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3304      	adds	r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800554c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fa9d 	bl	8005a90 <startWritePageFlash25q>

	flushKeyboard();
 8005556:	f001 f98f 	bl	8006878 <flushKeyboard>
}
 800555a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	080080d8 	.word	0x080080d8
 8005568:	080082e4 	.word	0x080082e4
 800556c:	0800833c 	.word	0x0800833c
 8005570:	08008338 	.word	0x08008338

08005574 <returnCliByte>:

bool_t returnCliByte(uint8_t* retByte){
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	if (rxCharLen()!=0){
 800557c:	f001 f926 	bl	80067cc <rxCharLen>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <returnCliByte+0x2c>
		uint8_t chars[2]={0,0};
 8005586:	2300      	movs	r3, #0
 8005588:	81bb      	strh	r3, [r7, #12]
		chars[0]=(uint8_t)get_char();
 800558a:	f001 f951 	bl	8006830 <get_char>
 800558e:	4603      	mov	r3, r0
 8005590:	733b      	strb	r3, [r7, #12]
		printCli((char*)chars);
 8005592:	f107 030c 	add.w	r3, r7, #12
 8005596:	4618      	mov	r0, r3
 8005598:	f001 f934 	bl	8006804 <printCli>
		return TRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <returnCliByte+0x2e>
	}
	return FALSE;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <writeRaw>:

void writeRaw( int argc , const char * const * argv ){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b0e4      	sub	sp, #400	; 0x190
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80055b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055ba:	6018      	str	r0, [r3, #0]
 80055bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80055c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055c4:	6019      	str	r1, [r3, #0]
	if (argc!=2){
 80055c6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80055ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d002      	beq.n	80055da <writeRaw+0x2e>
		respondErrorNumersArg();
 80055d4:	f7ff fc14 	bl	8004e00 <respondErrorNumersArg>
		return;
 80055d8:	e07c      	b.n	80056d4 <writeRaw+0x128>
	}
	size_t addr=atol(argv[0]);
 80055da:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80055de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f9da 	bl	80069a0 <atol>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	if ( addr >= ALL_SPI_FLASH_SIZE){
 80055f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fa:	d305      	bcc.n	8005608 <writeRaw+0x5c>
		respondERROR();
 80055fc:	f7ff fbf6 	bl	8004dec <respondERROR>
		printCli("Адрес задан вне допустимого диапазона");
 8005600:	4836      	ldr	r0, [pc, #216]	; (80056dc <writeRaw+0x130>)
 8005602:	f001 f8ff 	bl	8006804 <printCli>
		return;
 8005606:	e065      	b.n	80056d4 <writeRaw+0x128>
	}
	size_t numbs=atol(argv[1]);
 8005608:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800560c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3304      	adds	r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f9c2 	bl	80069a0 <atol>
 800561c:	4603      	mov	r3, r0
 800561e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	if (  ( numbs + addr )  >=  ALL_SPI_FLASH_SIZE  ){
 8005622:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005626:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800562a:	4413      	add	r3, r2
 800562c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005630:	d305      	bcc.n	800563e <writeRaw+0x92>
		respondERROR();
 8005632:	f7ff fbdb 	bl	8004dec <respondERROR>
		printCli("Данные выйдут за границы флеш");
 8005636:	482a      	ldr	r0, [pc, #168]	; (80056e0 <writeRaw+0x134>)
 8005638:	f001 f8e4 	bl	8006804 <printCli>
		return;
 800563c:	e04a      	b.n	80056d4 <writeRaw+0x128>
	}
	const char stroutmask[]= "Ввод из потока этого терминала содержимого во внешнюю SPI flash по адресу %u в кол-ве %u байт в RAW формате: '";
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <writeRaw+0x138>)
 8005640:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005644:	4611      	mov	r1, r2
 8005646:	22b7      	movs	r2, #183	; 0xb7
 8005648:	4618      	mov	r0, r3
 800564a:	f001 f9d7 	bl	80069fc <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf( strout , stroutmask , addr , numbs );
 800564e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8005652:	f107 0014 	add.w	r0, r7, #20
 8005656:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800565a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800565e:	f001 fa31 	bl	8006ac4 <siprintf>
	printCli(strout);
 8005662:	f107 0314 	add.w	r3, r7, #20
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f8cc 	bl	8006804 <printCli>
	printCli(argv[1]);
 800566c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005670:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3304      	adds	r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f8c2 	bl	8006804 <printCli>
	printCli("'\n\r <<");
 8005680:	4819      	ldr	r0, [pc, #100]	; (80056e8 <writeRaw+0x13c>)
 8005682:	f001 f8bf 	bl	8006804 <printCli>

	nvm_t tNvm;
		tNvm.numbsWrite = numbs;
 8005686:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800568a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800568e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005692:	605a      	str	r2, [r3, #4]
		tNvm.startAddrNvm = addr;
 8005694:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005698:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800569c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80056a0:	601a      	str	r2, [r3, #0]
		tNvm.passCallback = returnCliByte;
 80056a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80056a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80056aa:	4a10      	ldr	r2, [pc, #64]	; (80056ec <writeRaw+0x140>)
 80056ac:	609a      	str	r2, [r3, #8]

		if ( startNvm(&tNvm) ) {
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fb5e 	bl	8004d74 <startNvm>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <writeRaw+0x11e>
			while ( threadNVM25Q80()>=WAIT_NVM_DATA );	//внимание! автомат nvm вызывается отсюда,
 80056be:	bf00      	nop
 80056c0:	f7ff faf2 	bl	8004ca8 <threadNVM25Q80>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d8fa      	bhi.n	80056c0 <writeRaw+0x114>
		}												//пока не отработает
														//прочие задачи блокируются
														//сам будет вызывать поток
														//драйвер для изъятия данных из потока
														//returnCliByte(..)
	flushKeyboard();
 80056ca:	f001 f8d5 	bl	8006878 <flushKeyboard>
	printCli("\n\n\r ------ end recive ------");
 80056ce:	4808      	ldr	r0, [pc, #32]	; (80056f0 <writeRaw+0x144>)
 80056d0:	f001 f898 	bl	8006804 <printCli>
}
 80056d4:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	080083b8 	.word	0x080083b8
 80056e0:	08008400 	.word	0x08008400
 80056e4:	08008460 	.word	0x08008460
 80056e8:	08008438 	.word	0x08008438
 80056ec:	08005575 	.word	0x08005575
 80056f0:	08008440 	.word	0x08008440

080056f4 <userApp>:
#include <usb.h>



void userApp(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0

	initFlash25q();
 80056f8:	f000 f8b8 	bl	800586c <initFlash25q>

	initCLI();
 80056fc:	f001 f81e 	bl	800673c <initCLI>


	while (1){

		//
		threadNVM25Q80();
 8005700:	f7ff fad2 	bl	8004ca8 <threadNVM25Q80>
		//

		//!! thread - 01
	#ifdef __SW_CLI_HTREAD
		CLIthread();
 8005704:	f001 f848 	bl	8006798 <CLIthread>
	#endif
	//!! thread - 02
		HAL_Delay(1);
 8005708:	2001      	movs	r0, #1
 800570a:	f7fb fb89 	bl	8000e20 <HAL_Delay>
		static char c;
		if ((++c & 127) == 127){
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <userApp+0x40>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <userApp+0x40>)
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <userApp+0x40>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005722:	2b7f      	cmp	r3, #127	; 0x7f
 8005724:	d1ec      	bne.n	8005700 <userApp+0xc>
			  HAL_GPIO_TogglePin(fromMX(BLINK));
 8005726:	2120      	movs	r1, #32
 8005728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800572c:	f7fc f880 	bl	8001830 <HAL_GPIO_TogglePin>
	while (1){
 8005730:	e7e6      	b.n	8005700 <userApp+0xc>
 8005732:	bf00      	nop
 8005734:	20000356 	.word	0x20000356

08005738 <selectFlashSpi>:

#include "w25Qxx.h"

#define SPITIMEOUTMS (3000)

void selectFlashSpi(void){
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
	if ( HAL_GPIO_ReadPin(fromMX(SPI_FLASH_CS)) == SET ){
 800573c:	2110      	movs	r1, #16
 800573e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005742:	f7fc f845 	bl	80017d0 <HAL_GPIO_ReadPin>
 8005746:	4603      	mov	r3, r0
 8005748:	2b01      	cmp	r3, #1
 800574a:	d108      	bne.n	800575e <selectFlashSpi+0x26>
		HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),RESET);
 800574c:	2200      	movs	r2, #0
 800574e:	2110      	movs	r1, #16
 8005750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005754:	f7fc f854 	bl	8001800 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8005758:	2001      	movs	r0, #1
 800575a:	f7fb fb61 	bl	8000e20 <HAL_Delay>
	}
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}

08005762 <deselectFlashSpi>:
void deselectFlashSpi(void){
 8005762:	b580      	push	{r7, lr}
 8005764:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),SET);
 8005766:	2201      	movs	r2, #1
 8005768:	2110      	movs	r1, #16
 800576a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800576e:	f7fc f847 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005772:	2001      	movs	r0, #1
 8005774:	f7fb fb54 	bl	8000e20 <HAL_Delay>
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}

0800577c <sendDataSpi>:

void sendDataSpi(void* arg, uint16_t aNumbs ){
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	807b      	strh	r3, [r7, #2]
	t_spi_data TX = arg;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1
 800578c:	887a      	ldrh	r2, [r7, #2]
 800578e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4803      	ldr	r0, [pc, #12]	; (80057a4 <sendDataSpi+0x28>)
 8005796:	f7fd fc28 	bl	8002fea <HAL_SPI_Transmit>
			, arg
			,aNumbs/*sizeof(t_spi_data)*/
			,SPITIMEOUTMS
			);

	return ;
 800579a:	bf00      	nop
}
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200001a8 	.word	0x200001a8

080057a8 <sendByteSpi>:

void sendByteSpi(t_spi_data arg){
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
	t_spi_data TX = arg;
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	73fb      	strb	r3, [r7, #15]
	t_spi_data RX;
	HAL_SPI_Transmit(&hspi1
 80057b6:	f107 010f 	add.w	r1, r7, #15
 80057ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80057be:	2201      	movs	r2, #1
 80057c0:	4803      	ldr	r0, [pc, #12]	; (80057d0 <sendByteSpi+0x28>)
 80057c2:	f7fd fc12 	bl	8002fea <HAL_SPI_Transmit>
			, &TX
			,1
			,SPITIMEOUTMS
			);

	return ( RX );
 80057c6:	bf00      	nop
}
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	200001a8 	.word	0x200001a8

080057d4 <getByteSpi>:

t_spi_data getByteSpi() {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
		t_spi_data RX;
		HAL_SPI_Receive(&hspi1
 80057da:	1df9      	adds	r1, r7, #7
 80057dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80057e0:	2201      	movs	r2, #1
 80057e2:	4804      	ldr	r0, [pc, #16]	; (80057f4 <getByteSpi+0x20>)
 80057e4:	f7fd fd6f 	bl	80032c6 <HAL_SPI_Receive>
				, &RX
				,1
				,SPITIMEOUTMS
				);
		return ( RX );
 80057e8:	79fb      	ldrb	r3, [r7, #7]
	}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200001a8 	.word	0x200001a8

080057f8 <sleep>:

#include "al-spi.h"

//t_spi_data (*_pfSpiGetSendByte)(t_spi_data) = &sendGetByteSpi;

static void sleep(uint32_t a){
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(a);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7fb fb0d 	bl	8000e20 <HAL_Delay>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <sendSpiData>:

void sendSpiData(t_spi_data* pArg,uint16_t numbs) {
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	460b      	mov	r3, r1
 8005818:	807b      	strh	r3, [r7, #2]
	sendDataSpi(pArg,numbs);
 800581a:	887b      	ldrh	r3, [r7, #2]
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff ffac 	bl	800577c <sendDataSpi>
}
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <sendSpiFlashByte>:

void sendSpiFlashByte(t_spi_data pArg) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
	sendByteSpi(pArg);
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ffb5 	bl	80057a8 <sendByteSpi>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <getSpiByte>:

t_spi_data getSpiByte(){
 8005846:	b580      	push	{r7, lr}
 8005848:	af00      	add	r7, sp, #0
	return (getByteSpi());
 800584a:	f7ff ffc3 	bl	80057d4 <getByteSpi>
 800584e:	4603      	mov	r3, r0
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}

08005854 <selectFlash25q>:


void selectFlash25q(){
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
	selectFlashSpi();
 8005858:	f7ff ff6e 	bl	8005738 <selectFlashSpi>
}
 800585c:	bf00      	nop
 800585e:	bd80      	pop	{r7, pc}

08005860 <unselectFlash25q>:

void unselectFlash25q(){
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
	deselectFlashSpi();
 8005864:	f7ff ff7d 	bl	8005762 <deselectFlashSpi>
}
 8005868:	bf00      	nop
 800586a:	bd80      	pop	{r7, pc}

0800586c <initFlash25q>:

void initFlash25q(){
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
	unselectFlash25q();
 8005872:	f7ff fff5 	bl	8005860 <unselectFlash25q>
	HAL_Delay(100);
 8005876:	2064      	movs	r0, #100	; 0x64
 8005878:	f7fb fad2 	bl	8000e20 <HAL_Delay>
	setResetModeFlash25q();
 800587c:	f000 f80a 	bl	8005894 <setResetModeFlash25q>
	doResetFlash25q();
 8005880:	f000 f811 	bl	80058a6 <doResetFlash25q>
	uint8_t pVoid[3];
	getJedecIdFlash25q(pVoid);
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f88c 	bl	80059a4 <getJedecIdFlash25q>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <setResetModeFlash25q>:

void setResetModeFlash25q() {
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	selectFlash25q();
 8005898:	f7ff ffdc 	bl	8005854 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_ENABLE_RESET);
 800589c:	2066      	movs	r0, #102	; 0x66
 800589e:	f7ff ffc5 	bl	800582c <sendSpiFlashByte>
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <doResetFlash25q>:

void doResetFlash25q() {
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
	selectFlash25q();
 80058aa:	f7ff ffd3 	bl	8005854 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_RESET);
 80058ae:	2099      	movs	r0, #153	; 0x99
 80058b0:	f7ff ffbc 	bl	800582c <sendSpiFlashByte>
	unselectFlash25q();
 80058b4:	f7ff ffd4 	bl	8005860 <unselectFlash25q>
}
 80058b8:	bf00      	nop
 80058ba:	bd80      	pop	{r7, pc}

080058bc <freeSpiFlash25q>:

void freeSpiFlash25q(){
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
	unselectFlash25q();
 80058c0:	f7ff ffce 	bl	8005860 <unselectFlash25q>
}
 80058c4:	bf00      	nop
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <getStatusRegFlash25q>:


uint8_t getStatusRegFlash25q(spi_status_reg_t register_num) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	71fb      	strb	r3, [r7, #7]
	selectFlash25q();
 80058d2:	f7ff ffbf 	bl	8005854 <selectFlash25q>
	uint8_t retStatus=0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
	if (register_num == SPIFLASH_REG1) {
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d107      	bne.n	80058f0 <getStatusRegFlash25q+0x28>
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_1);
 80058e0:	2005      	movs	r0, #5
 80058e2:	f7ff ffa3 	bl	800582c <sendSpiFlashByte>
		retStatus= getSpiByte();
 80058e6:	f7ff ffae 	bl	8005846 <getSpiByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e009      	b.n	8005904 <getStatusRegFlash25q+0x3c>
	} else if (register_num == SPIFLASH_REG2) {
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d106      	bne.n	8005904 <getStatusRegFlash25q+0x3c>
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_2);
 80058f6:	2035      	movs	r0, #53	; 0x35
 80058f8:	f7ff ff98 	bl	800582c <sendSpiFlashByte>
		retStatus= (uint8_t) getSpiByte();
 80058fc:	f7ff ffa3 	bl	8005846 <getSpiByte>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
	}
	return retStatus;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <getUniqueIdFlash25q>:

	freeSpiFlash25q();
	return temp;
}

void getUniqueIdFlash25q(uint8_t *pRet) {
 800590e:	b590      	push	{r4, r7, lr}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]

	selectFlash25q();
 8005916:	f7ff ff9d 	bl	8005854 <selectFlash25q>

	sendSpiFlashByte(FLASH25Q_COMMAND_UNIQUE_ID);
 800591a:	204b      	movs	r0, #75	; 0x4b
 800591c:	f7ff ff86 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8005920:	2000      	movs	r0, #0
 8005922:	f7ff ff83 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8005926:	2000      	movs	r0, #0
 8005928:	f7ff ff80 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 800592c:	2000      	movs	r0, #0
 800592e:	f7ff ff7d 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8005932:	2000      	movs	r0, #0
 8005934:	f7ff ff7a 	bl	800582c <sendSpiFlashByte>

	pRet[0] = (uint8_t) getSpiByte();
 8005938:	f7ff ff85 	bl	8005846 <getSpiByte>
 800593c:	4603      	mov	r3, r0
 800593e:	461a      	mov	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	701a      	strb	r2, [r3, #0]
	pRet[1] = (uint8_t) getSpiByte();
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	1c5c      	adds	r4, r3, #1
 8005948:	f7ff ff7d 	bl	8005846 <getSpiByte>
 800594c:	4603      	mov	r3, r0
 800594e:	7023      	strb	r3, [r4, #0]
	pRet[2] = (uint8_t) getSpiByte();
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	1c9c      	adds	r4, r3, #2
 8005954:	f7ff ff77 	bl	8005846 <getSpiByte>
 8005958:	4603      	mov	r3, r0
 800595a:	7023      	strb	r3, [r4, #0]
	pRet[3] = (uint8_t) getSpiByte();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1cdc      	adds	r4, r3, #3
 8005960:	f7ff ff71 	bl	8005846 <getSpiByte>
 8005964:	4603      	mov	r3, r0
 8005966:	7023      	strb	r3, [r4, #0]
	pRet[4] = (uint8_t) getSpiByte();
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	1d1c      	adds	r4, r3, #4
 800596c:	f7ff ff6b 	bl	8005846 <getSpiByte>
 8005970:	4603      	mov	r3, r0
 8005972:	7023      	strb	r3, [r4, #0]
	pRet[5] = (uint8_t) getSpiByte();
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	1d5c      	adds	r4, r3, #5
 8005978:	f7ff ff65 	bl	8005846 <getSpiByte>
 800597c:	4603      	mov	r3, r0
 800597e:	7023      	strb	r3, [r4, #0]
	pRet[6] = (uint8_t) getSpiByte();
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1d9c      	adds	r4, r3, #6
 8005984:	f7ff ff5f 	bl	8005846 <getSpiByte>
 8005988:	4603      	mov	r3, r0
 800598a:	7023      	strb	r3, [r4, #0]
	pRet[7] = (uint8_t) getSpiByte();
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ddc      	adds	r4, r3, #7
 8005990:	f7ff ff59 	bl	8005846 <getSpiByte>
 8005994:	4603      	mov	r3, r0
 8005996:	7023      	strb	r3, [r4, #0]

	freeSpiFlash25q();
 8005998:	f7ff ff90 	bl	80058bc <freeSpiFlash25q>
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <getJedecIdFlash25q>:

void getJedecIdFlash25q(uint8_t *pRet) {
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	selectFlash25q();
 80059ac:	f7ff ff52 	bl	8005854 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_JEDEC_ID);
 80059b0:	209f      	movs	r0, #159	; 0x9f
 80059b2:	f7ff ff3b 	bl	800582c <sendSpiFlashByte>
	pRet[0] = getSpiByte();
 80059b6:	f7ff ff46 	bl	8005846 <getSpiByte>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	701a      	strb	r2, [r3, #0]
	pRet[1] = getSpiByte();
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1c5c      	adds	r4, r3, #1
 80059c6:	f7ff ff3e 	bl	8005846 <getSpiByte>
 80059ca:	4603      	mov	r3, r0
 80059cc:	7023      	strb	r3, [r4, #0]
	pRet[2] = getSpiByte();
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1c9c      	adds	r4, r3, #2
 80059d2:	f7ff ff38 	bl	8005846 <getSpiByte>
 80059d6:	4603      	mov	r3, r0
 80059d8:	7023      	strb	r3, [r4, #0]
	freeSpiFlash25q();
 80059da:	f7ff ff6f 	bl	80058bc <freeSpiFlash25q>
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd90      	pop	{r4, r7, pc}

080059e6 <sendAddr24Flash25q>:

static void sendAddr24Flash25q(uint32_t aAddr){
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
	//todo	if(ID >= W25Q256)	sendSpiFlashByte((aAddr & 0xFF000000) >> 24);
	sendSpiFlashByte((aAddr/65536)%256);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0c1b      	lsrs	r3, r3, #16
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff19 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte((aAddr/256)%256);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff ff13 	bl	800582c <sendSpiFlashByte>
	sendSpiFlashByte(aAddr%256);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff ff0e 	bl	800582c <sendSpiFlashByte>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <readByteAddrFlash25q>:

uint8_t readByteAddrFlash25q(uint32_t aAddr) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	selectFlash25q();
 8005a20:	f7ff ff18 	bl	8005854 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_READ_DATA);
 8005a24:	2003      	movs	r0, #3
 8005a26:	f7ff ff01 	bl	800582c <sendSpiFlashByte>
	sendAddr24Flash25q(aAddr);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ffdb 	bl	80059e6 <sendAddr24Flash25q>
	uint8_t retByte=getSpiByte();
 8005a30:	f7ff ff09 	bl	8005846 <getSpiByte>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
	unselectFlash25q();
 8005a38:	f7ff ff12 	bl	8005860 <unselectFlash25q>
	return retByte;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <setEnableWriteFlash25q>:
	sendSpiFlashByte(FLASH25Q_COMMAND_WRITE_STATUS_REGS);
	sendSpiFlashByte(val_stat_reg_1);
	sendSpiFlashByte(val_stat_reg_2);
}

void setEnableWriteFlash25q() {
 8005a46:	b580      	push	{r7, lr}
 8005a48:	af00      	add	r7, sp, #0
	selectFlash25q();
 8005a4a:	f7ff ff03 	bl	8005854 <selectFlash25q>
		sendSpiFlashByte(FLASH25Q_COMMAND_WRITE_ENABLE);
 8005a4e:	2006      	movs	r0, #6
 8005a50:	f7ff feec 	bl	800582c <sendSpiFlashByte>
	unselectFlash25q();
 8005a54:	f7ff ff04 	bl	8005860 <unselectFlash25q>
}
 8005a58:	bf00      	nop
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <waitEndWriteFlash25q>:
	uint8_t val = getStatusRegFlash25q(SPIFLASH_REG1);
	return ( val & S0BIT );
}
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

static void waitEndWriteFlash25q(){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
	uint8_t StatusRegister1;
	selectFlash25q();;
 8005a62:	f7ff fef7 	bl	8005854 <selectFlash25q>
	do{
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_1);
 8005a66:	2005      	movs	r0, #5
 8005a68:	f7ff fee0 	bl	800582c <sendSpiFlashByte>
		StatusRegister1 = getSpiByte();
 8005a6c:	f7ff feeb 	bl	8005846 <getSpiByte>
 8005a70:	4603      	mov	r3, r0
 8005a72:	71fb      	strb	r3, [r7, #7]
		sleep(1);
 8005a74:	2001      	movs	r0, #1
 8005a76:	f7ff febf 	bl	80057f8 <sleep>
	}
	while((StatusRegister1 & BUSY_BIT_C0) == BUSY_BIT_C0);
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <waitEndWriteFlash25q+0xa>

	unselectFlash25q();
 8005a84:	f7ff feec 	bl	8005860 <unselectFlash25q>
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <startWritePageFlash25q>:
/*
 * @arg aNumb - кол-во записываемых данных, !не должен вылазить за страницу вн. кэша вн. флеша (256-aOffset)
 */

void startWritePageFlash25q(uint8_t *pBuffer, uint32_t aPageAddr, uint32_t aNumb)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
//
//	if((aOffset + aNumb) > PAGE_CACH_FLASH)
//		aNumb = PAGE_CACH_FLASH - aOffset;
//

	waitEndWriteFlash25q();
 8005a9c:	f7ff ffde 	bl	8005a5c <waitEndWriteFlash25q>

	setEnableWriteFlash25q();
 8005aa0:	f7ff ffd1 	bl	8005a46 <setEnableWriteFlash25q>

	selectFlash25q();;
 8005aa4:	f7ff fed6 	bl	8005854 <selectFlash25q>

	sendSpiFlashByte(FLASH25Q_COMMAND_PAGE_PROGRAMM);
 8005aa8:	2002      	movs	r0, #2
 8005aaa:	f7ff febf 	bl	800582c <sendSpiFlashByte>

//	aPageAddr = (aPageAddr * PAGE_CACH_FLASH) + aOffset;

	sendAddr24Flash25q(aPageAddr);
 8005aae:	68b8      	ldr	r0, [r7, #8]
 8005ab0:	f7ff ff99 	bl	80059e6 <sendAddr24Flash25q>

	sendSpiData( pBuffer, aNumb );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fea7 	bl	800580e <sendSpiData>

	unselectFlash25q();
 8005ac0:	f7ff fece 	bl	8005860 <unselectFlash25q>

	waitEndWriteFlash25q();
 8005ac4:	f7ff ffca 	bl	8005a5c <waitEndWriteFlash25q>

	sleep(1);
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f7ff fe95 	bl	80057f8 <sleep>
}
 8005ace:	bf00      	nop
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <eraseAllChipFlash25q>:

	sendSpiFlashByte(FLASH25Q_COMMAND_BLOCK_ERASE_64KB);
	sendAddr24Flash25q(aBlock);
}

void eraseAllChipFlash25q() {
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	af00      	add	r7, sp, #0

	unselectFlash25q();
 8005ada:	f7ff fec1 	bl	8005860 <unselectFlash25q>

	setEnableWriteFlash25q();
 8005ade:	f7ff ffb2 	bl	8005a46 <setEnableWriteFlash25q>

	selectFlash25q();
 8005ae2:	f7ff feb7 	bl	8005854 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_CHIP_ERASE);
 8005ae6:	20c7      	movs	r0, #199	; 0xc7
 8005ae8:	f7ff fea0 	bl	800582c <sendSpiFlashByte>
	unselectFlash25q();
 8005aec:	f7ff feb8 	bl	8005860 <unselectFlash25q>

	waitEndWriteFlash25q();
 8005af0:	f7ff ffb4 	bl	8005a5c <waitEndWriteFlash25q>

		sleep(10);
 8005af4:	200a      	movs	r0, #10
 8005af6:	f7ff fe7f 	bl	80057f8 <sleep>
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}

08005afe <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	5c8a      	ldrb	r2, [r1, r2]
 8005b12:	4413      	add	r3, r2
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b1c:	dd02      	ble.n	8005b24 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3b40      	subs	r3, #64	; 0x40
 8005b22:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	5cd3      	ldrb	r3, [r2, r3]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <hist_is_space_for_new+0x1a>
		return true;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01e      	b.n	8005b8e <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	db0c      	blt.n	8005b76 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	4413      	add	r3, r2
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	da0c      	bge.n	8005b8c <hist_is_space_for_new+0x56>
			return true;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e00b      	b.n	8005b8e <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	da01      	bge.n	8005b8c <hist_is_space_for_new+0x56>
			return true;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <hist_is_space_for_new+0x58>
	}
	return false;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8005baa:	dc61      	bgt.n	8005c70 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8005bac:	e002      	b.n	8005bb4 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ffa5 	bl	8005afe <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff ffbd 	bl	8005b36 <hist_is_space_for_new>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f5      	beq.n	8005bae <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	5cd3      	ldrb	r3, [r2, r3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d105      	bne.n	8005bda <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	b2d1      	uxtb	r1, r2
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bde:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	da0a      	bge.n	8005bfe <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	3301      	adds	r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ff00 	bl	80069fc <memcpy>
 8005bfc:	e018      	b.n	8005c30 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005c06:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0e:	3301      	adds	r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fef0 	bl	80069fc <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	18d1      	adds	r1, r2, r3
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 fee6 	bl	80069fc <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	b2d1      	uxtb	r1, r2
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4413      	add	r3, r2
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	2b3f      	cmp	r3, #63	; 0x3f
 8005c50:	dd05      	ble.n	8005c5e <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	2100      	movs	r1, #0
 8005c66:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	649a      	str	r2, [r3, #72]	; 0x48
 8005c6e:	e000      	b.n	8005c72 <hist_save_line+0xd8>
		return;
 8005c70:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8005c8e:	e010      	b.n	8005cb2 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	4413      	add	r3, r2
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9c:	4413      	add	r3, r2
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ca4:	dd02      	ble.n	8005cac <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	3b40      	subs	r3, #64	; 0x40
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	3301      	adds	r3, #1
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	4413      	add	r3, r2
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e8      	bne.n	8005c90 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d176      	bne.n	8005db2 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f2c0 80d6 	blt.w	8005e7c <hist_restore_line+0x204>
			int header = pThis->begin;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8005cda:	e010      	b.n	8005cfe <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	4413      	add	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	2b3f      	cmp	r3, #63	; 0x3f
 8005cf0:	dd02      	ble.n	8005cf8 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3b40      	subs	r3, #64	; 0x40
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	4413      	add	r3, r2
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <hist_restore_line+0xa2>
 8005d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d1e0      	bne.n	8005cdc <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	4413      	add	r3, r2
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80aa 	beq.w	8005e7c <hist_restore_line+0x204>
					pThis->cur++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	4413      	add	r3, r2
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	4413      	add	r3, r2
 8005d40:	2b3f      	cmp	r3, #63	; 0x3f
 8005d42:	dc11      	bgt.n	8005d68 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8005d44:	2265      	movs	r2, #101	; 0x65
 8005d46:	2100      	movs	r1, #0
 8005d48:	68b8      	ldr	r0, [r7, #8]
 8005d4a:	f000 fe7f 	bl	8006a4c <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	3301      	adds	r3, #1
 8005d54:	18d1      	adds	r1, r2, r3
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	4413      	add	r3, r2
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68b8      	ldr	r0, [r7, #8]
 8005d62:	f000 fe4b 	bl	80069fc <memcpy>
 8005d66:	e01f      	b.n	8005da8 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005d6e:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8005d70:	2265      	movs	r2, #101	; 0x65
 8005d72:	2100      	movs	r1, #0
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f000 fe69 	bl	8006a4c <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4619      	mov	r1, r3
 8005d86:	68b8      	ldr	r0, [r7, #8]
 8005d88:	f000 fe38 	bl	80069fc <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	18d0      	adds	r0, r2, r3
 8005d92:	68f9      	ldr	r1, [r7, #12]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	4413      	add	r3, r2
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 fe2a 	bl	80069fc <memcpy>
				}
				return pThis->ring_buf[header];
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	4413      	add	r3, r2
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	e066      	b.n	8005e80 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	dd5e      	ble.n	8005e78 <hist_restore_line+0x200>
				pThis->cur--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8005dce:	e010      	b.n	8005df2 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b3f      	cmp	r3, #63	; 0x3f
 8005de4:	dd02      	ble.n	8005dec <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3b40      	subs	r3, #64	; 0x40
 8005dea:	61fb      	str	r3, [r7, #28]
				j++;
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d006      	beq.n	8005e0c <hist_restore_line+0x194>
 8005dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad2      	subs	r2, r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d1e1      	bne.n	8005dd0 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e1c:	dc0c      	bgt.n	8005e38 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	3301      	adds	r3, #1
 8005e24:	18d1      	adds	r1, r2, r3
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68b8      	ldr	r0, [r7, #8]
 8005e32:	f000 fde3 	bl	80069fc <memcpy>
 8005e36:	e01a      	b.n	8005e6e <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005e3e:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	f000 fdd5 	bl	80069fc <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	18d0      	adds	r0, r2, r3
 8005e58:	68f9      	ldr	r1, [r7, #12]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f000 fdc7 	bl	80069fc <memcpy>
			}
			return pThis->ring_buf[header];
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	e003      	b.n	8005e80 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e001      	b.n	8005e80 <hist_restore_line+0x208>
		}
	}
	return -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3730      	adds	r7, #48	; 0x30
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
	int i = 0;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8005e9c:	e002      	b.n	8005ea4 <split+0x1c>
			ind++;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3354      	adds	r3, #84	; 0x54
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <split+0x32>
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	dbf1      	blt.n	8005e9e <split+0x16>
		}
		if (!(ind < limit)) return i;
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	db01      	blt.n	8005ec6 <split+0x3e>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e024      	b.n	8005f10 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	1c58      	adds	r0, r3, #1
 8005ed2:	6178      	str	r0, [r7, #20]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4403      	add	r3, r0
 8005eda:	440a      	add	r2, r1
 8005edc:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b1f      	cmp	r3, #31
 8005ee2:	dd05      	ble.n	8005ef0 <split+0x68>
			return -1;
 8005ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ee8:	e012      	b.n	8005f10 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3354      	adds	r3, #84	; 0x54
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <split+0x7e>
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	dbf1      	blt.n	8005eea <split+0x62>
		}
		if (!(ind < limit)) return i;
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	dbca      	blt.n	8005ea4 <split+0x1c>
 8005f0e:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	371c      	adds	r7, #28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4798      	blx	r3
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005f4a:	4803      	ldr	r0, [pc, #12]	; (8005f58 <terminal_backspace+0x1c>)
 8005f4c:	4798      	blx	r3
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	08008534 	.word	0x08008534

08005f5c <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005f6a:	4803      	ldr	r0, [pc, #12]	; (8005f78 <terminal_newline+0x1c>)
 8005f6c:	4798      	blx	r3
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	0800853c 	.word	0x0800853c

08005f7c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	f107 030c 	add.w	r3, r7, #12
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	605a      	str	r2, [r3, #4]
 8005f94:	609a      	str	r2, [r3, #8]
#ifdef _USE_LIBC_STDIO 
	if (offset > 0) {
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dd07      	ble.n	8005fac <terminal_move_cursor+0x30>
		snprintf (str, 16, "\033[%dC", offset);
 8005f9c:	f107 0008 	add.w	r0, r7, #8
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4a0d      	ldr	r2, [pc, #52]	; (8005fd8 <terminal_move_cursor+0x5c>)
 8005fa4:	2110      	movs	r1, #16
 8005fa6:	f000 fd59 	bl	8006a5c <sniprintf>
 8005faa:	e00a      	b.n	8005fc2 <terminal_move_cursor+0x46>
	} else if (offset < 0) {
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	da07      	bge.n	8005fc2 <terminal_move_cursor+0x46>
		snprintf (str, 16, "\033[%dD", -(offset));
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	425b      	negs	r3, r3
 8005fb6:	f107 0008 	add.w	r0, r7, #8
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <terminal_move_cursor+0x60>)
 8005fbc:	2110      	movs	r1, #16
 8005fbe:	f000 fd4d 	bl	8006a5c <sniprintf>
		endstr = u16bit_to_str (-(offset), str+2);
		strcpy (endstr, "D");
	} else
		return;
#endif	
	pThis->print (str);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005fc8:	f107 0208 	add.w	r2, r7, #8
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
}
 8005fd0:	bf00      	nop
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	08008540 	.word	0x08008540
 8005fdc:	08008548 	.word	0x08008548

08005fe0 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
	char str[16];
#ifdef _USE_LIBC_STDIO
	snprintf (str, 16, "\033[%dD\033[%dC", \
 8005fe8:	f107 0008 	add.w	r0, r7, #8
 8005fec:	230d      	movs	r3, #13
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2374      	movs	r3, #116	; 0x74
 8005ff2:	4a07      	ldr	r2, [pc, #28]	; (8006010 <terminal_reset_cursor+0x30>)
 8005ff4:	2110      	movs	r1, #16
 8005ff6:	f000 fd31 	bl	8006a5c <sniprintf>
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
	strcpy (endstr, "D\033["); endstr += 3;
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
	strcpy (endstr, "C");
#endif
	pThis->print (str);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006000:	f107 0208 	add.w	r2, r7, #8
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
}
 8006008:	bf00      	nop
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	08008550 	.word	0x08008550

08006014 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006026:	4816      	ldr	r0, [pc, #88]	; (8006080 <terminal_print_line+0x6c>)
 8006028:	4798      	blx	r3

	char nch [] = {0,0};
 800602a:	2300      	movs	r3, #0
 800602c:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e014      	b.n	800605e <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	3354      	adds	r3, #84	; 0x54
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8006040:	7c3b      	ldrb	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <terminal_print_line+0x36>
			nch[0] = ' ';
 8006046:	2320      	movs	r3, #32
 8006048:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006050:	f107 0210 	add.w	r2, r7, #16
 8006054:	4610      	mov	r0, r2
 8006056:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	3301      	adds	r3, #1
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	429a      	cmp	r2, r3
 8006068:	dbe4      	blt.n	8006034 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff ffb8 	bl	8005fe0 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ff82 	bl	8005f7c <terminal_move_cursor>
}
 8006078:	bf00      	nop
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0800855c 	.word	0x0800855c

08006084 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3354      	adds	r3, #84	; 0x54
 8006092:	2265      	movs	r2, #101	; 0x65
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fcd8 	bl	8006a4c <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3304      	adds	r3, #4
 80060a0:	2240      	movs	r2, #64	; 0x40
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fcd1 	bl	8006a4c <memset>
	pThis->ring_hist.begin = 0;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <microrl_init+0x78>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000120 	.word	0x20000120

08006100 <microrl_set_execute_callback>:
	pThis->get_completion = get_completion;
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <microrl_set_sigint_callback>:
//}

#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	1d18      	adds	r0, r3, #4
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3354      	adds	r3, #84	; 0x54
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4619      	mov	r1, r3
 8006152:	f7ff fd91 	bl	8005c78 <hist_restore_line>
 8006156:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	db1a      	blt.n	8006194 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	3354      	adds	r3, #84	; 0x54
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff2e 	bl	8005fe0 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800618a:	461a      	mov	r2, r3
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff ff40 	bl	8006014 <terminal_print_line>
	}
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b5b      	cmp	r3, #91	; 0x5b
 80061ac:	d104      	bne.n	80061b8 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	701a      	strb	r2, [r3, #0]
		return 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e07b      	b.n	80062b0 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d14f      	bne.n	8006260 <escape_process+0xc4>
		if (ch == 'A') {
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	2b41      	cmp	r3, #65	; 0x41
 80061c4:	d105      	bne.n	80061d2 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80061c6:	2100      	movs	r1, #0
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff ffb7 	bl	800613c <hist_search>
#endif
			return 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e06e      	b.n	80062b0 <escape_process+0x114>
		} else if (ch == 'B') {
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	2b42      	cmp	r3, #66	; 0x42
 80061d6:	d105      	bne.n	80061e4 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80061d8:	2101      	movs	r1, #1
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ffae 	bl	800613c <hist_search>
#endif
			return 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e065      	b.n	80062b0 <escape_process+0x114>
		} else if (ch == 'C') {
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	2b43      	cmp	r3, #67	; 0x43
 80061e8:	d114      	bne.n	8006214 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80061f6:	429a      	cmp	r2, r3
 80061f8:	da0a      	bge.n	8006210 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80061fa:	2101      	movs	r1, #1
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff febd 	bl	8005f7c <terminal_move_cursor>
				pThis->cursor++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8006210:	2301      	movs	r3, #1
 8006212:	e04d      	b.n	80062b0 <escape_process+0x114>
		} else if (ch == 'D') {
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	2b44      	cmp	r3, #68	; 0x44
 8006218:	d112      	bne.n	8006240 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006220:	2b00      	cmp	r3, #0
 8006222:	dd0b      	ble.n	800623c <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8006224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fea7 	bl	8005f7c <terminal_move_cursor>
				pThis->cursor--;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006234:	1e5a      	subs	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 800623c:	2301      	movs	r3, #1
 800623e:	e037      	b.n	80062b0 <escape_process+0x114>
		} else if (ch == '7') {
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	2b37      	cmp	r3, #55	; 0x37
 8006244:	d104      	bne.n	8006250 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	701a      	strb	r2, [r3, #0]
			return 0;
 800624c:	2300      	movs	r3, #0
 800624e:	e02f      	b.n	80062b0 <escape_process+0x114>
		} else if (ch == '8') {
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	2b38      	cmp	r3, #56	; 0x38
 8006254:	d12b      	bne.n	80062ae <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2203      	movs	r2, #3
 800625a:	701a      	strb	r2, [r3, #0]
			return 0;
 800625c:	2300      	movs	r3, #0
 800625e:	e027      	b.n	80062b0 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	2b7e      	cmp	r3, #126	; 0x7e
 8006264:	d123      	bne.n	80062ae <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d108      	bne.n	8006280 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff feb6 	bl	8005fe0 <terminal_reset_cursor>
			pThis->cursor = 0;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800627c:	2301      	movs	r3, #1
 800627e:	e017      	b.n	80062b0 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d112      	bne.n	80062ae <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7ff fe6f 	bl	8005f7c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80062ae:	2301      	movs	r3, #1
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	2b64      	cmp	r3, #100	; 0x64
 80062d0:	dc60      	bgt.n	8006394 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062de:	4619      	mov	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	440b      	add	r3, r1
 80062e4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3354      	adds	r3, #84	; 0x54
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 80062f0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062fe:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8006300:	461a      	mov	r2, r3
 8006302:	f000 fb89 	bl	8006a18 <memmove>
		for (i = 0; i < len; i++) {
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	e025      	b.n	8006358 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	440b      	add	r3, r1
 800631c:	7811      	ldrb	r1, [r2, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	460a      	mov	r2, r1
 8006324:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4413      	add	r3, r2
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800633a:	2b20      	cmp	r3, #32
 800633c:	d109      	bne.n	8006352 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	3301      	adds	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	dbd5      	blt.n	800630c <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	441a      	add	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <microrl_insert_text+0xde>
	}
	return false;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd31      	ble.n	8006414 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fdc3 	bl	8005f3c <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063c2:	3b01      	subs	r3, #1
 80063c4:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3354      	adds	r3, #84	; 0x54
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 80063d0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80063e2:	461a      	mov	r2, r3
 80063e4:	f000 fb18 	bl	8006a18 <memmove>
		pThis->cursor--;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063ee:	1e5a      	subs	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	4413      	add	r3, r2
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800640c:	1e5a      	subs	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 800641c:	b580      	push	{r7, lr}
 800641e:	b0a4      	sub	sp, #144	; 0x90
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fd99 	bl	8005f5c <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006430:	2b00      	cmp	r3, #0
 8006432:	dd0a      	ble.n	800644a <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1d18      	adds	r0, r3, #4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006444:	461a      	mov	r2, r3
 8006446:	f7ff fba8 	bl	8005b9a <hist_save_line>
//	else
		pThis->print ("\n\r");
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006450:	4823      	ldr	r0, [pc, #140]	; (80064e0 <new_line_handler+0xc4>)
 8006452:	4798      	blx	r3
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800645a:	f107 020c 	add.w	r2, r7, #12
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff fd11 	bl	8005e88 <split>
 8006466:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (status == -1){
 800646a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006472:	d109      	bne.n	8006488 <new_line_handler+0x6c>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800647a:	481a      	ldr	r0, [pc, #104]	; (80064e4 <new_line_handler+0xc8>)
 800647c:	4798      	blx	r3
		pThis->print (ENDL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006484:	4818      	ldr	r0, [pc, #96]	; (80064e8 <new_line_handler+0xcc>)
 8006486:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8006488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800648c:	2b00      	cmp	r3, #0
 800648e:	dd0d      	ble.n	80064ac <new_line_handler+0x90>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <new_line_handler+0x90>
		pThis->execute (status, tkn_arr);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064a0:	f107 020c 	add.w	r2, r7, #12
 80064a4:	4611      	mov	r1, r2
 80064a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80064aa:	4798      	blx	r3
	print_prompt (pThis);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fd35 	bl	8005f1c <print_prompt>
	pThis->cmdlen = 0;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3354      	adds	r3, #84	; 0x54
 80064c6:	2265      	movs	r2, #101	; 0x65
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fabe 	bl	8006a4c <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80064d6:	bf00      	nop
 80064d8:	3790      	adds	r7, #144	; 0x90
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08008560 	.word	0x08008560
 80064e4:	08008564 	.word	0x08008564
 80064e8:	0800853c 	.word	0x0800853c

080064ec <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fe49 	bl	800619c <escape_process>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 810e 	beq.w	800672e <microrl_insert_char+0x242>
			pThis->escape = 0;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8006518:	e109      	b.n	800672e <microrl_insert_char+0x242>
		switch (ch) {
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b1b      	cmp	r3, #27
 800651e:	dc3f      	bgt.n	80065a0 <microrl_insert_char+0xb4>
 8006520:	2b00      	cmp	r3, #0
 8006522:	f340 80d9 	ble.w	80066d8 <microrl_insert_char+0x1ec>
 8006526:	3b01      	subs	r3, #1
 8006528:	2b1a      	cmp	r3, #26
 800652a:	f200 80d5 	bhi.w	80066d8 <microrl_insert_char+0x1ec>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <microrl_insert_char+0x48>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	08006615 	.word	0x08006615
 8006538:	0800664d 	.word	0x0800664d
 800653c:	080066c5 	.word	0x080066c5
 8006540:	080066d9 	.word	0x080066d9
 8006544:	080065f1 	.word	0x080065f1
 8006548:	08006625 	.word	0x08006625
 800654c:	080066d9 	.word	0x080066d9
 8006550:	08006685 	.word	0x08006685
 8006554:	080066d9 	.word	0x080066d9
 8006558:	08006719 	.word	0x08006719
 800655c:	080065d9 	.word	0x080065d9
 8006560:	080066d9 	.word	0x080066d9
 8006564:	080065a7 	.word	0x080065a7
 8006568:	0800667b 	.word	0x0800667b
 800656c:	080066d9 	.word	0x080066d9
 8006570:	08006671 	.word	0x08006671
 8006574:	080066d9 	.word	0x080066d9
 8006578:	080066a1 	.word	0x080066a1
 800657c:	080066d9 	.word	0x080066d9
 8006580:	080066d9 	.word	0x080066d9
 8006584:	080065bd 	.word	0x080065bd
 8006588:	080066d9 	.word	0x080066d9
 800658c:	080066d9 	.word	0x080066d9
 8006590:	080066d9 	.word	0x080066d9
 8006594:	080066d9 	.word	0x080066d9
 8006598:	080066d9 	.word	0x080066d9
 800659c:	080065af 	.word	0x080065af
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d06f      	beq.n	8006684 <microrl_insert_char+0x198>
 80065a4:	e098      	b.n	80066d8 <microrl_insert_char+0x1ec>
				new_line_handler(pThis);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ff38 	bl	800641c <new_line_handler>
			break;
 80065ac:	e0bf      	b.n	800672e <microrl_insert_char+0x242>
				pThis->escape = 1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	705a      	strb	r2, [r3, #1]
			break;
 80065b4:	e0bb      	b.n	800672e <microrl_insert_char+0x242>
					microrl_backspace (pThis);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff fef1 	bl	800639e <microrl_backspace>
					while (pThis->cursor > 0) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dcf7      	bgt.n	80065b6 <microrl_insert_char+0xca>
				terminal_print_line (pThis, 0, pThis->cursor);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065cc:	461a      	mov	r2, r3
 80065ce:	2100      	movs	r1, #0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fd1f 	bl	8006014 <terminal_print_line>
			break;
 80065d6:	e0aa      	b.n	800672e <microrl_insert_char+0x242>
				pThis->print ("\033[K");
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80065de:	4856      	ldr	r0, [pc, #344]	; (8006738 <microrl_insert_char+0x24c>)
 80065e0:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 80065ee:	e09e      	b.n	800672e <microrl_insert_char+0x242>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fcbb 	bl	8005f7c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8006612:	e08c      	b.n	800672e <microrl_insert_char+0x242>
				terminal_reset_cursor (pThis);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fce3 	bl	8005fe0 <terminal_reset_cursor>
				pThis->cursor = 0;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 8006622:	e084      	b.n	800672e <microrl_insert_char+0x242>
			if (pThis->cursor < pThis->cmdlen) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006630:	429a      	cmp	r2, r3
 8006632:	da73      	bge.n	800671c <microrl_insert_char+0x230>
				terminal_move_cursor (pThis, 1);
 8006634:	2101      	movs	r1, #1
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff fca0 	bl	8005f7c <terminal_move_cursor>
				pThis->cursor++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 800664a:	e067      	b.n	800671c <microrl_insert_char+0x230>
			if (pThis->cursor) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d064      	beq.n	8006720 <microrl_insert_char+0x234>
				terminal_move_cursor (pThis, -1);
 8006656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fc8e 	bl	8005f7c <terminal_move_cursor>
				pThis->cursor--;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006666:	1e5a      	subs	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 800666e:	e057      	b.n	8006720 <microrl_insert_char+0x234>
			hist_search (pThis, _HIST_UP);
 8006670:	2100      	movs	r1, #0
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fd62 	bl	800613c <hist_search>
			break;
 8006678:	e059      	b.n	800672e <microrl_insert_char+0x242>
			hist_search (pThis, _HIST_DOWN);
 800667a:	2101      	movs	r1, #1
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fd5d 	bl	800613c <hist_search>
			break;
 8006682:	e054      	b.n	800672e <microrl_insert_char+0x242>
				microrl_backspace (pThis);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fe8a 	bl	800639e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006696:	461a      	mov	r2, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fcbb 	bl	8006014 <terminal_print_line>
			break;
 800669e:	e046      	b.n	800672e <microrl_insert_char+0x242>
				terminal_newline (pThis);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff fc5b 	bl	8005f5c <terminal_newline>
				print_prompt (pThis);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fc38 	bl	8005f1c <print_prompt>
				terminal_reset_cursor (pThis);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff fc97 	bl	8005fe0 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80066b8:	461a      	mov	r2, r3
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7ff fca9 	bl	8006014 <terminal_print_line>
			break;
 80066c2:	e034      	b.n	800672e <microrl_insert_char+0x242>
			if (pThis->sigint != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02a      	beq.n	8006724 <microrl_insert_char+0x238>
				pThis->sigint();
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80066d4:	4798      	blx	r3
			break;
 80066d6:	e025      	b.n	8006724 <microrl_insert_char+0x238>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d104      	bne.n	80066e8 <microrl_insert_char+0x1fc>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01f      	beq.n	8006728 <microrl_insert_char+0x23c>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b1f      	cmp	r3, #31
 80066ec:	dd1c      	ble.n	8006728 <microrl_insert_char+0x23c>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 80066ee:	463b      	mov	r3, r7
 80066f0:	2201      	movs	r2, #1
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff fddf 	bl	80062b8 <microrl_insert_text>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d015      	beq.n	800672c <microrl_insert_char+0x240>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006706:	1e59      	subs	r1, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800670e:	461a      	mov	r2, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fc7f 	bl	8006014 <terminal_print_line>
			break;
 8006716:	e009      	b.n	800672c <microrl_insert_char+0x240>
			break;
 8006718:	bf00      	nop
 800671a:	e008      	b.n	800672e <microrl_insert_char+0x242>
			break;
 800671c:	bf00      	nop
 800671e:	e006      	b.n	800672e <microrl_insert_char+0x242>
			break;
 8006720:	bf00      	nop
 8006722:	e004      	b.n	800672e <microrl_insert_char+0x242>
			break;
 8006724:	bf00      	nop
 8006726:	e002      	b.n	800672e <microrl_insert_char+0x242>
	}
 8006728:	bf00      	nop
 800672a:	e000      	b.n	800672e <microrl_insert_char+0x242>
			break;
 800672c:	bf00      	nop
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	0800855c 	.word	0x0800855c

0800673c <initCLI>:



//*****************************************************************************
//dummy function, no need on linux-PC
void initCLI(void){
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
#ifdef HUART_CLI
	HAL_UART_Receive_DMA(&HUART_CLI, bRx, RX_SIZE);
 8006740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006744:	490d      	ldr	r1, [pc, #52]	; (800677c <initCLI+0x40>)
 8006746:	480e      	ldr	r0, [pc, #56]	; (8006780 <initCLI+0x44>)
 8006748:	f7fd fb9e 	bl	8003e88 <HAL_UART_Receive_DMA>
#endif
	// call init with ptr to microrl instance and print callback
	microrl_init (prl, printCli);
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <initCLI+0x48>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	490d      	ldr	r1, [pc, #52]	; (8006788 <initCLI+0x4c>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fc96 	bl	8006084 <microrl_init>
	// set callback for execute
	microrl_set_execute_callback (prl, execute_list_commands);
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <initCLI+0x48>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	490b      	ldr	r1, [pc, #44]	; (800678c <initCLI+0x50>)
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fcce 	bl	8006100 <microrl_set_execute_callback>
#ifdef _USE_COMPLETE
	// set callback for completion
	microrl_set_complete_callback (prl, complet);
#endif
	// set callback for Ctrl+C
	microrl_set_sigint_callback (prl, sigint);
 8006764:	4b07      	ldr	r3, [pc, #28]	; (8006784 <initCLI+0x48>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <initCLI+0x54>)
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fcd7 	bl	800611e <microrl_set_sigint_callback>
//	setListComs(prl, p_list_cmds);
#ifndef __SW_CLI_HTREAD
	extern TIM_HandleTypeDef htim7;
	HAL_TIM_Base_Start_IT(&htim7);
#endif
	cli_enable=1;
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <initCLI+0x58>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
};
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20000358 	.word	0x20000358
 8006780:	20000274 	.word	0x20000274
 8006784:	20000124 	.word	0x20000124
 8006788:	08006805 	.word	0x08006805
 800678c:	08006895 	.word	0x08006895
 8006790:	08006985 	.word	0x08006985
 8006794:	2000242c 	.word	0x2000242c

08006798 <CLIthread>:

//*****************************************************************************
// non blocked CLI command line interface thread, periodically call 1 each system pass
void CLIthread(){
 8006798:	b598      	push	{r3, r4, r7, lr}
 800679a:	af00      	add	r7, sp, #0
	if  (cli_enable) {
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <CLIthread+0x2c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <CLIthread+0x28>
		if (rxUsbLen()!=0){
			getRxCDC();
		}
		#endif
		#ifdef HUART_CLI
		if (rxCharLen()!=0) {
 80067a4:	f000 f812 	bl	80067cc <rxCharLen>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <CLIthread+0x28>
			microrl_insert_char (prl, get_char());
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <CLIthread+0x30>)
 80067b0:	681c      	ldr	r4, [r3, #0]
 80067b2:	f000 f83d 	bl	8006830 <get_char>
 80067b6:	4603      	mov	r3, r0
 80067b8:	4619      	mov	r1, r3
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff fe96 	bl	80064ec <microrl_insert_char>
		#endif
	#ifdef USE_USB_FS_HAL
	deferredCliTask();
	#endif
	}
}
 80067c0:	bf00      	nop
 80067c2:	bd98      	pop	{r3, r4, r7, pc}
 80067c4:	2000242c 	.word	0x2000242c
 80067c8:	20000124 	.word	0x20000124

080067cc <rxCharLen>:
	usbPush();
}
#endif

#ifdef HUART_CLI
uint16_t rxCharLen(){ //проверяет наличие байтов, не 0 - можно читать, побайтно
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
	uint16_t p_rx = RX_SIZE - HUART_CLI.hdmarx->Instance->CNDTR;
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <rxCharLen+0x30>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80067e0:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSizeReady=(p_rx - p_old);
 80067e2:	4b07      	ldr	r3, [pc, #28]	; (8006800 <rxCharLen+0x34>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	80bb      	strh	r3, [r7, #4]
	return dataSizeReady;
 80067ee:	88bb      	ldrh	r3, [r7, #4]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000274 	.word	0x20000274
 8006800:	20002430 	.word	0x20002430

08006804 <printCli>:
#endif

//*****************************************************************************
// print callback for microrl library
void printCli(const char * str)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	size_t len=strlen(str);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7f9 fce9 	bl	80001e4 <strlen>
 8006812:	60f8      	str	r0, [r7, #12]

#ifdef HUART_CLI
#warning	//todo tx  HUART_CLI.hdmatx->Instance->CNDTR;
//    while ( (HAL_UART_GetState(&HUART_CLI)==HAL_UART_STATE_BUSY_TX_RX));
//    HAL_UART_Transmit_DMA(&HUART_CLI,(uint8_t*)str,strlen(str));
    HAL_UART_Transmit(&HUART_CLI,(uint8_t*)str,len,100);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	b29a      	uxth	r2, r3
 8006818:	2364      	movs	r3, #100	; 0x64
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4803      	ldr	r0, [pc, #12]	; (800682c <printCli+0x28>)
 800681e:	f7fd fa9f 	bl	8003d60 <HAL_UART_Transmit>
#else
#warning CLI без обратного вывода
#endif
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000274 	.word	0x20000274

08006830 <get_char>:

#ifdef HUART_CLI
//*****************************************************************************
// get char user pressed, no waiting Enter input
char get_char(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
	char ret;
	while(rxCharLen()==0);
 8006836:	bf00      	nop
 8006838:	f7ff ffc8 	bl	80067cc <rxCharLen>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0fa      	beq.n	8006838 <get_char+0x8>
	ret=(char)bRx[p_old];
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <get_char+0x40>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a0b      	ldr	r2, [pc, #44]	; (8006874 <get_char+0x44>)
 8006848:	5cd3      	ldrb	r3, [r2, r3]
 800684a:	71fb      	strb	r3, [r7, #7]
	p_old++;
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <get_char+0x40>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a07      	ldr	r2, [pc, #28]	; (8006870 <get_char+0x40>)
 8006854:	6013      	str	r3, [r2, #0]
	if (p_old == RX_SIZE){
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <get_char+0x40>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685e:	d102      	bne.n	8006866 <get_char+0x36>
		p_old = 0;
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <get_char+0x40>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
	}
	return ret;
 8006866:	79fb      	ldrb	r3, [r7, #7]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20002430 	.word	0x20002430
 8006874:	20000358 	.word	0x20000358

08006878 <flushKeyboard>:
#endif

void flushKeyboard(){
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
	while (rxCharLen()!=0){
 800687c:	e001      	b.n	8006882 <flushKeyboard+0xa>
		get_char();
 800687e:	f7ff ffd7 	bl	8006830 <get_char>
	while (rxCharLen()!=0){
 8006882:	f7ff ffa3 	bl	80067cc <rxCharLen>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f8      	bne.n	800687e <flushKeyboard+0x6>
	}
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <execute_list_commands>:

//*****************************************************************************
// execute callback for microrl library
// do what you want here, but don't write to argv!!! read only!!
int execute_list_commands(int argc, const char * const * argv)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	int i = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	61fb      	str	r3, [r7, #28]
	extern exec_cmds_t list_cmds[];
	void (*fexec)(int argc, const char * const * argv);
	int flagexec=0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
	// just iterate through argv word and compare it with your commands
	while (i < argc) {
 80068a6:	e057      	b.n	8006958 <execute_list_commands+0xc4>
		int ii= 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 80068ac:	e03d      	b.n	800692a <execute_list_commands+0x96>
			if (strcmp(argv[i],list_cmds[ii].name)==0){
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	492f      	ldr	r1, [pc, #188]	; (8006978 <execute_list_commands+0xe4>)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	440b      	add	r3, r1
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f7f9 fc83 	bl	80001d0 <strcmp>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d129      	bne.n	8006924 <execute_list_commands+0x90>
				fexec=list_cmds[ii].f_exec;
 80068d0:	4a29      	ldr	r2, [pc, #164]	; (8006978 <execute_list_commands+0xe4>)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	4413      	add	r3, r2
 80068d8:	3304      	adds	r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
				int ac=argc-1-i;	//кол-во аргументов передаваемых командам
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	1e5a      	subs	r2, r3, #1
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	613b      	str	r3, [r7, #16]
				if (( ac>0 )&&( argv[i+1][0]=='&' )) {	//для случая когда аргумент за командой &
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dd0a      	ble.n	8006904 <execute_list_commands+0x70>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	3301      	adds	r3, #1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	4413      	add	r3, r2
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b26      	cmp	r3, #38	; 0x26
 80068fe:	d101      	bne.n	8006904 <execute_list_commands+0x70>
					ac=0;
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
				}
				fexec(ac,&argv[i+1]);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4611      	mov	r1, r2
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	4798      	blx	r3
				printCli ("\n\r");
 8006916:	4819      	ldr	r0, [pc, #100]	; (800697c <execute_list_commands+0xe8>)
 8006918:	f7ff ff74 	bl	8006804 <printCli>
				flagexec++;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	3301      	adds	r3, #1
 8006920:	61bb      	str	r3, [r7, #24]
				break;
 8006922:	e00a      	b.n	800693a <execute_list_commands+0xa6>
			}
			ii++;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3301      	adds	r3, #1
 8006928:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <execute_list_commands+0xe4>)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	4413      	add	r3, r2
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1b9      	bne.n	80068ae <execute_list_commands+0x1a>
		}
		while (  (argv[i++][0]!='&') && (i<argc) );
 800693a:	bf00      	nop
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	4413      	add	r3, r2
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b26      	cmp	r3, #38	; 0x26
 800694e:	d003      	beq.n	8006958 <execute_list_commands+0xc4>
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	dbf1      	blt.n	800693c <execute_list_commands+0xa8>
	while (i < argc) {
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	dba3      	blt.n	80068a8 <execute_list_commands+0x14>
	}
	if (flagexec==0){
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <execute_list_commands+0xd8>
		printCli ("Valid command absent!\n\r");
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <execute_list_commands+0xec>)
 8006968:	f7ff ff4c 	bl	8006804 <printCli>
	}
	return 0;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	2000000c 	.word	0x2000000c
 800697c:	0800857c 	.word	0x0800857c
 8006980:	08008580 	.word	0x08008580

08006984 <sigint>:
}
#endif

//*****************************************************************************
void sigint (void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
	printCli ("^C catched!\n\r");
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <sigint+0x10>)
 800698a:	f7ff ff3b 	bl	8006804 <printCli>
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	08008598 	.word	0x08008598

08006998 <atoi>:
 8006998:	220a      	movs	r2, #10
 800699a:	2100      	movs	r1, #0
 800699c:	f000 b934 	b.w	8006c08 <strtol>

080069a0 <atol>:
 80069a0:	220a      	movs	r2, #10
 80069a2:	2100      	movs	r1, #0
 80069a4:	f000 b930 	b.w	8006c08 <strtol>

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000128 	.word	0x20000128

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 fd4e 	bl	8007468 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	0800872c 	.word	0x0800872c
 80069f0:	0800872c 	.word	0x0800872c
 80069f4:	0800872c 	.word	0x0800872c
 80069f8:	08008730 	.word	0x08008730

080069fc <memcpy>:
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	4770      	bx	lr
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a12:	4291      	cmp	r1, r2
 8006a14:	d1f9      	bne.n	8006a0a <memcpy+0xe>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <memmove>:
 8006a18:	4288      	cmp	r0, r1
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	eb01 0402 	add.w	r4, r1, r2
 8006a20:	d902      	bls.n	8006a28 <memmove+0x10>
 8006a22:	4284      	cmp	r4, r0
 8006a24:	4623      	mov	r3, r4
 8006a26:	d807      	bhi.n	8006a38 <memmove+0x20>
 8006a28:	1e43      	subs	r3, r0, #1
 8006a2a:	42a1      	cmp	r1, r4
 8006a2c:	d008      	beq.n	8006a40 <memmove+0x28>
 8006a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a36:	e7f8      	b.n	8006a2a <memmove+0x12>
 8006a38:	4402      	add	r2, r0
 8006a3a:	4601      	mov	r1, r0
 8006a3c:	428a      	cmp	r2, r1
 8006a3e:	d100      	bne.n	8006a42 <memmove+0x2a>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a4a:	e7f7      	b.n	8006a3c <memmove+0x24>

08006a4c <memset>:
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <sniprintf>:
 8006a5c:	b40c      	push	{r2, r3}
 8006a5e:	b530      	push	{r4, r5, lr}
 8006a60:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <sniprintf+0x64>)
 8006a62:	1e0c      	subs	r4, r1, #0
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	b09d      	sub	sp, #116	; 0x74
 8006a68:	da08      	bge.n	8006a7c <sniprintf+0x20>
 8006a6a:	238b      	movs	r3, #139	; 0x8b
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	b01d      	add	sp, #116	; 0x74
 8006a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a78:	b002      	add	sp, #8
 8006a7a:	4770      	bx	lr
 8006a7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a84:	bf14      	ite	ne
 8006a86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006a8a:	4623      	moveq	r3, r4
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a94:	9002      	str	r0, [sp, #8]
 8006a96:	9006      	str	r0, [sp, #24]
 8006a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a9e:	ab21      	add	r3, sp, #132	; 0x84
 8006aa0:	a902      	add	r1, sp, #8
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	f000 f915 	bl	8006cd4 <_svfiprintf_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	bfbc      	itt	lt
 8006aae:	238b      	movlt	r3, #139	; 0x8b
 8006ab0:	602b      	strlt	r3, [r5, #0]
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d0dd      	beq.n	8006a72 <sniprintf+0x16>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e7d9      	b.n	8006a72 <sniprintf+0x16>
 8006abe:	bf00      	nop
 8006ac0:	20000128 	.word	0x20000128

08006ac4 <siprintf>:
 8006ac4:	b40e      	push	{r1, r2, r3}
 8006ac6:	b500      	push	{lr}
 8006ac8:	b09c      	sub	sp, #112	; 0x70
 8006aca:	ab1d      	add	r3, sp, #116	; 0x74
 8006acc:	9002      	str	r0, [sp, #8]
 8006ace:	9006      	str	r0, [sp, #24]
 8006ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ad4:	4809      	ldr	r0, [pc, #36]	; (8006afc <siprintf+0x38>)
 8006ad6:	9107      	str	r1, [sp, #28]
 8006ad8:	9104      	str	r1, [sp, #16]
 8006ada:	4909      	ldr	r1, [pc, #36]	; (8006b00 <siprintf+0x3c>)
 8006adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae0:	9105      	str	r1, [sp, #20]
 8006ae2:	6800      	ldr	r0, [r0, #0]
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	a902      	add	r1, sp, #8
 8006ae8:	f000 f8f4 	bl	8006cd4 <_svfiprintf_r>
 8006aec:	9b02      	ldr	r3, [sp, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	b01c      	add	sp, #112	; 0x70
 8006af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af8:	b003      	add	sp, #12
 8006afa:	4770      	bx	lr
 8006afc:	20000128 	.word	0x20000128
 8006b00:	ffff0208 	.word	0xffff0208

08006b04 <_strtol_l.constprop.0>:
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0a:	d001      	beq.n	8006b10 <_strtol_l.constprop.0+0xc>
 8006b0c:	2b24      	cmp	r3, #36	; 0x24
 8006b0e:	d906      	bls.n	8006b1e <_strtol_l.constprop.0+0x1a>
 8006b10:	f7ff ff4a 	bl	80069a8 <__errno>
 8006b14:	2316      	movs	r3, #22
 8006b16:	6003      	str	r3, [r0, #0]
 8006b18:	2000      	movs	r0, #0
 8006b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c04 <_strtol_l.constprop.0+0x100>
 8006b22:	460d      	mov	r5, r1
 8006b24:	462e      	mov	r6, r5
 8006b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006b2e:	f017 0708 	ands.w	r7, r7, #8
 8006b32:	d1f7      	bne.n	8006b24 <_strtol_l.constprop.0+0x20>
 8006b34:	2c2d      	cmp	r4, #45	; 0x2d
 8006b36:	d132      	bne.n	8006b9e <_strtol_l.constprop.0+0x9a>
 8006b38:	782c      	ldrb	r4, [r5, #0]
 8006b3a:	2701      	movs	r7, #1
 8006b3c:	1cb5      	adds	r5, r6, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d05b      	beq.n	8006bfa <_strtol_l.constprop.0+0xf6>
 8006b42:	2b10      	cmp	r3, #16
 8006b44:	d109      	bne.n	8006b5a <_strtol_l.constprop.0+0x56>
 8006b46:	2c30      	cmp	r4, #48	; 0x30
 8006b48:	d107      	bne.n	8006b5a <_strtol_l.constprop.0+0x56>
 8006b4a:	782c      	ldrb	r4, [r5, #0]
 8006b4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b50:	2c58      	cmp	r4, #88	; 0x58
 8006b52:	d14d      	bne.n	8006bf0 <_strtol_l.constprop.0+0xec>
 8006b54:	786c      	ldrb	r4, [r5, #1]
 8006b56:	2310      	movs	r3, #16
 8006b58:	3502      	adds	r5, #2
 8006b5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006b62:	f04f 0c00 	mov.w	ip, #0
 8006b66:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b6a:	4666      	mov	r6, ip
 8006b6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006b74:	f1be 0f09 	cmp.w	lr, #9
 8006b78:	d816      	bhi.n	8006ba8 <_strtol_l.constprop.0+0xa4>
 8006b7a:	4674      	mov	r4, lr
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	dd24      	ble.n	8006bca <_strtol_l.constprop.0+0xc6>
 8006b80:	f1bc 0f00 	cmp.w	ip, #0
 8006b84:	db1e      	blt.n	8006bc4 <_strtol_l.constprop.0+0xc0>
 8006b86:	45b1      	cmp	r9, r6
 8006b88:	d31c      	bcc.n	8006bc4 <_strtol_l.constprop.0+0xc0>
 8006b8a:	d101      	bne.n	8006b90 <_strtol_l.constprop.0+0x8c>
 8006b8c:	45a2      	cmp	sl, r4
 8006b8e:	db19      	blt.n	8006bc4 <_strtol_l.constprop.0+0xc0>
 8006b90:	fb06 4603 	mla	r6, r6, r3, r4
 8006b94:	f04f 0c01 	mov.w	ip, #1
 8006b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b9c:	e7e8      	b.n	8006b70 <_strtol_l.constprop.0+0x6c>
 8006b9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006ba0:	bf04      	itt	eq
 8006ba2:	782c      	ldrbeq	r4, [r5, #0]
 8006ba4:	1cb5      	addeq	r5, r6, #2
 8006ba6:	e7ca      	b.n	8006b3e <_strtol_l.constprop.0+0x3a>
 8006ba8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006bac:	f1be 0f19 	cmp.w	lr, #25
 8006bb0:	d801      	bhi.n	8006bb6 <_strtol_l.constprop.0+0xb2>
 8006bb2:	3c37      	subs	r4, #55	; 0x37
 8006bb4:	e7e2      	b.n	8006b7c <_strtol_l.constprop.0+0x78>
 8006bb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006bba:	f1be 0f19 	cmp.w	lr, #25
 8006bbe:	d804      	bhi.n	8006bca <_strtol_l.constprop.0+0xc6>
 8006bc0:	3c57      	subs	r4, #87	; 0x57
 8006bc2:	e7db      	b.n	8006b7c <_strtol_l.constprop.0+0x78>
 8006bc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006bc8:	e7e6      	b.n	8006b98 <_strtol_l.constprop.0+0x94>
 8006bca:	f1bc 0f00 	cmp.w	ip, #0
 8006bce:	da05      	bge.n	8006bdc <_strtol_l.constprop.0+0xd8>
 8006bd0:	2322      	movs	r3, #34	; 0x22
 8006bd2:	6003      	str	r3, [r0, #0]
 8006bd4:	4646      	mov	r6, r8
 8006bd6:	b942      	cbnz	r2, 8006bea <_strtol_l.constprop.0+0xe6>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	e79e      	b.n	8006b1a <_strtol_l.constprop.0+0x16>
 8006bdc:	b107      	cbz	r7, 8006be0 <_strtol_l.constprop.0+0xdc>
 8006bde:	4276      	negs	r6, r6
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	d0f9      	beq.n	8006bd8 <_strtol_l.constprop.0+0xd4>
 8006be4:	f1bc 0f00 	cmp.w	ip, #0
 8006be8:	d000      	beq.n	8006bec <_strtol_l.constprop.0+0xe8>
 8006bea:	1e69      	subs	r1, r5, #1
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	e7f3      	b.n	8006bd8 <_strtol_l.constprop.0+0xd4>
 8006bf0:	2430      	movs	r4, #48	; 0x30
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1b1      	bne.n	8006b5a <_strtol_l.constprop.0+0x56>
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	e7af      	b.n	8006b5a <_strtol_l.constprop.0+0x56>
 8006bfa:	2c30      	cmp	r4, #48	; 0x30
 8006bfc:	d0a5      	beq.n	8006b4a <_strtol_l.constprop.0+0x46>
 8006bfe:	230a      	movs	r3, #10
 8006c00:	e7ab      	b.n	8006b5a <_strtol_l.constprop.0+0x56>
 8006c02:	bf00      	nop
 8006c04:	080085f1 	.word	0x080085f1

08006c08 <strtol>:
 8006c08:	4613      	mov	r3, r2
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	4802      	ldr	r0, [pc, #8]	; (8006c18 <strtol+0x10>)
 8006c10:	6800      	ldr	r0, [r0, #0]
 8006c12:	f7ff bf77 	b.w	8006b04 <_strtol_l.constprop.0>
 8006c16:	bf00      	nop
 8006c18:	20000128 	.word	0x20000128

08006c1c <__ssputs_r>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	688e      	ldr	r6, [r1, #8]
 8006c22:	429e      	cmp	r6, r3
 8006c24:	4682      	mov	sl, r0
 8006c26:	460c      	mov	r4, r1
 8006c28:	4690      	mov	r8, r2
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	d838      	bhi.n	8006ca0 <__ssputs_r+0x84>
 8006c2e:	898a      	ldrh	r2, [r1, #12]
 8006c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c34:	d032      	beq.n	8006c9c <__ssputs_r+0x80>
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	6909      	ldr	r1, [r1, #16]
 8006c3a:	eba5 0901 	sub.w	r9, r5, r1
 8006c3e:	6965      	ldr	r5, [r4, #20]
 8006c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c48:	3301      	adds	r3, #1
 8006c4a:	444b      	add	r3, r9
 8006c4c:	106d      	asrs	r5, r5, #1
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	bf38      	it	cc
 8006c52:	461d      	movcc	r5, r3
 8006c54:	0553      	lsls	r3, r2, #21
 8006c56:	d531      	bpl.n	8006cbc <__ssputs_r+0xa0>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f000 fb3b 	bl	80072d4 <_malloc_r>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	b950      	cbnz	r0, 8006c78 <__ssputs_r+0x5c>
 8006c62:	230c      	movs	r3, #12
 8006c64:	f8ca 3000 	str.w	r3, [sl]
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	464a      	mov	r2, r9
 8006c7c:	f7ff febe 	bl	80069fc <memcpy>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	6126      	str	r6, [r4, #16]
 8006c8e:	6165      	str	r5, [r4, #20]
 8006c90:	444e      	add	r6, r9
 8006c92:	eba5 0509 	sub.w	r5, r5, r9
 8006c96:	6026      	str	r6, [r4, #0]
 8006c98:	60a5      	str	r5, [r4, #8]
 8006c9a:	463e      	mov	r6, r7
 8006c9c:	42be      	cmp	r6, r7
 8006c9e:	d900      	bls.n	8006ca2 <__ssputs_r+0x86>
 8006ca0:	463e      	mov	r6, r7
 8006ca2:	6820      	ldr	r0, [r4, #0]
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	f7ff feb6 	bl	8006a18 <memmove>
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	1b9b      	subs	r3, r3, r6
 8006cb0:	60a3      	str	r3, [r4, #8]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	4433      	add	r3, r6
 8006cb6:	6023      	str	r3, [r4, #0]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e7db      	b.n	8006c74 <__ssputs_r+0x58>
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	f000 fb7d 	bl	80073bc <_realloc_r>
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1e1      	bne.n	8006c8c <__ssputs_r+0x70>
 8006cc8:	6921      	ldr	r1, [r4, #16]
 8006cca:	4650      	mov	r0, sl
 8006ccc:	f000 fa96 	bl	80071fc <_free_r>
 8006cd0:	e7c7      	b.n	8006c62 <__ssputs_r+0x46>
	...

08006cd4 <_svfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	4698      	mov	r8, r3
 8006cda:	898b      	ldrh	r3, [r1, #12]
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	b09d      	sub	sp, #116	; 0x74
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	d50e      	bpl.n	8006d06 <_svfiprintf_r+0x32>
 8006ce8:	690b      	ldr	r3, [r1, #16]
 8006cea:	b963      	cbnz	r3, 8006d06 <_svfiprintf_r+0x32>
 8006cec:	2140      	movs	r1, #64	; 0x40
 8006cee:	f000 faf1 	bl	80072d4 <_malloc_r>
 8006cf2:	6028      	str	r0, [r5, #0]
 8006cf4:	6128      	str	r0, [r5, #16]
 8006cf6:	b920      	cbnz	r0, 8006d02 <_svfiprintf_r+0x2e>
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d00:	e0d1      	b.n	8006ea6 <_svfiprintf_r+0x1d2>
 8006d02:	2340      	movs	r3, #64	; 0x40
 8006d04:	616b      	str	r3, [r5, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d14:	2330      	movs	r3, #48	; 0x30
 8006d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ec0 <_svfiprintf_r+0x1ec>
 8006d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d1e:	f04f 0901 	mov.w	r9, #1
 8006d22:	4623      	mov	r3, r4
 8006d24:	469a      	mov	sl, r3
 8006d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d2a:	b10a      	cbz	r2, 8006d30 <_svfiprintf_r+0x5c>
 8006d2c:	2a25      	cmp	r2, #37	; 0x25
 8006d2e:	d1f9      	bne.n	8006d24 <_svfiprintf_r+0x50>
 8006d30:	ebba 0b04 	subs.w	fp, sl, r4
 8006d34:	d00b      	beq.n	8006d4e <_svfiprintf_r+0x7a>
 8006d36:	465b      	mov	r3, fp
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff ff6d 	bl	8006c1c <__ssputs_r>
 8006d42:	3001      	adds	r0, #1
 8006d44:	f000 80aa 	beq.w	8006e9c <_svfiprintf_r+0x1c8>
 8006d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d4a:	445a      	add	r2, fp
 8006d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a2 	beq.w	8006e9c <_svfiprintf_r+0x1c8>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d62:	f10a 0a01 	add.w	sl, sl, #1
 8006d66:	9304      	str	r3, [sp, #16]
 8006d68:	9307      	str	r3, [sp, #28]
 8006d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d70:	4654      	mov	r4, sl
 8006d72:	2205      	movs	r2, #5
 8006d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d78:	4851      	ldr	r0, [pc, #324]	; (8006ec0 <_svfiprintf_r+0x1ec>)
 8006d7a:	f7f9 fa41 	bl	8000200 <memchr>
 8006d7e:	9a04      	ldr	r2, [sp, #16]
 8006d80:	b9d8      	cbnz	r0, 8006dba <_svfiprintf_r+0xe6>
 8006d82:	06d0      	lsls	r0, r2, #27
 8006d84:	bf44      	itt	mi
 8006d86:	2320      	movmi	r3, #32
 8006d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8c:	0711      	lsls	r1, r2, #28
 8006d8e:	bf44      	itt	mi
 8006d90:	232b      	movmi	r3, #43	; 0x2b
 8006d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d015      	beq.n	8006dca <_svfiprintf_r+0xf6>
 8006d9e:	9a07      	ldr	r2, [sp, #28]
 8006da0:	4654      	mov	r4, sl
 8006da2:	2000      	movs	r0, #0
 8006da4:	f04f 0c0a 	mov.w	ip, #10
 8006da8:	4621      	mov	r1, r4
 8006daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dae:	3b30      	subs	r3, #48	; 0x30
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	d94e      	bls.n	8006e52 <_svfiprintf_r+0x17e>
 8006db4:	b1b0      	cbz	r0, 8006de4 <_svfiprintf_r+0x110>
 8006db6:	9207      	str	r2, [sp, #28]
 8006db8:	e014      	b.n	8006de4 <_svfiprintf_r+0x110>
 8006dba:	eba0 0308 	sub.w	r3, r0, r8
 8006dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	46a2      	mov	sl, r4
 8006dc8:	e7d2      	b.n	8006d70 <_svfiprintf_r+0x9c>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	9103      	str	r1, [sp, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bfbb      	ittet	lt
 8006dd6:	425b      	neglt	r3, r3
 8006dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ddc:	9307      	strge	r3, [sp, #28]
 8006dde:	9307      	strlt	r3, [sp, #28]
 8006de0:	bfb8      	it	lt
 8006de2:	9204      	strlt	r2, [sp, #16]
 8006de4:	7823      	ldrb	r3, [r4, #0]
 8006de6:	2b2e      	cmp	r3, #46	; 0x2e
 8006de8:	d10c      	bne.n	8006e04 <_svfiprintf_r+0x130>
 8006dea:	7863      	ldrb	r3, [r4, #1]
 8006dec:	2b2a      	cmp	r3, #42	; 0x2a
 8006dee:	d135      	bne.n	8006e5c <_svfiprintf_r+0x188>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	1d1a      	adds	r2, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9203      	str	r2, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e00:	3402      	adds	r4, #2
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ed0 <_svfiprintf_r+0x1fc>
 8006e08:	7821      	ldrb	r1, [r4, #0]
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f7f9 f9f7 	bl	8000200 <memchr>
 8006e12:	b140      	cbz	r0, 8006e26 <_svfiprintf_r+0x152>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	eba0 000a 	sub.w	r0, r0, sl
 8006e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	4303      	orrs	r3, r0
 8006e22:	3401      	adds	r4, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	4826      	ldr	r0, [pc, #152]	; (8006ec4 <_svfiprintf_r+0x1f0>)
 8006e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e30:	2206      	movs	r2, #6
 8006e32:	f7f9 f9e5 	bl	8000200 <memchr>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d038      	beq.n	8006eac <_svfiprintf_r+0x1d8>
 8006e3a:	4b23      	ldr	r3, [pc, #140]	; (8006ec8 <_svfiprintf_r+0x1f4>)
 8006e3c:	bb1b      	cbnz	r3, 8006e86 <_svfiprintf_r+0x1b2>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	3307      	adds	r3, #7
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	3308      	adds	r3, #8
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4c:	4433      	add	r3, r6
 8006e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e50:	e767      	b.n	8006d22 <_svfiprintf_r+0x4e>
 8006e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e56:	460c      	mov	r4, r1
 8006e58:	2001      	movs	r0, #1
 8006e5a:	e7a5      	b.n	8006da8 <_svfiprintf_r+0xd4>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	3401      	adds	r4, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0c0a 	mov.w	ip, #10
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6e:	3a30      	subs	r2, #48	; 0x30
 8006e70:	2a09      	cmp	r2, #9
 8006e72:	d903      	bls.n	8006e7c <_svfiprintf_r+0x1a8>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0c5      	beq.n	8006e04 <_svfiprintf_r+0x130>
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	e7c3      	b.n	8006e04 <_svfiprintf_r+0x130>
 8006e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e80:	4604      	mov	r4, r0
 8006e82:	2301      	movs	r3, #1
 8006e84:	e7f0      	b.n	8006e68 <_svfiprintf_r+0x194>
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <_svfiprintf_r+0x1f8>)
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	4638      	mov	r0, r7
 8006e92:	f3af 8000 	nop.w
 8006e96:	1c42      	adds	r2, r0, #1
 8006e98:	4606      	mov	r6, r0
 8006e9a:	d1d6      	bne.n	8006e4a <_svfiprintf_r+0x176>
 8006e9c:	89ab      	ldrh	r3, [r5, #12]
 8006e9e:	065b      	lsls	r3, r3, #25
 8006ea0:	f53f af2c 	bmi.w	8006cfc <_svfiprintf_r+0x28>
 8006ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea6:	b01d      	add	sp, #116	; 0x74
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	ab03      	add	r3, sp, #12
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <_svfiprintf_r+0x1f8>)
 8006eb4:	a904      	add	r1, sp, #16
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	f000 f87a 	bl	8006fb0 <_printf_i>
 8006ebc:	e7eb      	b.n	8006e96 <_svfiprintf_r+0x1c2>
 8006ebe:	bf00      	nop
 8006ec0:	080086f1 	.word	0x080086f1
 8006ec4:	080086fb 	.word	0x080086fb
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	08006c1d 	.word	0x08006c1d
 8006ed0:	080086f7 	.word	0x080086f7

08006ed4 <_printf_common>:
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	4616      	mov	r6, r2
 8006eda:	4699      	mov	r9, r3
 8006edc:	688a      	ldr	r2, [r1, #8]
 8006ede:	690b      	ldr	r3, [r1, #16]
 8006ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	bfb8      	it	lt
 8006ee8:	4613      	movlt	r3, r2
 8006eea:	6033      	str	r3, [r6, #0]
 8006eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	b10a      	cbz	r2, 8006efa <_printf_common+0x26>
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	6033      	str	r3, [r6, #0]
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	0699      	lsls	r1, r3, #26
 8006efe:	bf42      	ittt	mi
 8006f00:	6833      	ldrmi	r3, [r6, #0]
 8006f02:	3302      	addmi	r3, #2
 8006f04:	6033      	strmi	r3, [r6, #0]
 8006f06:	6825      	ldr	r5, [r4, #0]
 8006f08:	f015 0506 	ands.w	r5, r5, #6
 8006f0c:	d106      	bne.n	8006f1c <_printf_common+0x48>
 8006f0e:	f104 0a19 	add.w	sl, r4, #25
 8006f12:	68e3      	ldr	r3, [r4, #12]
 8006f14:	6832      	ldr	r2, [r6, #0]
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	42ab      	cmp	r3, r5
 8006f1a:	dc26      	bgt.n	8006f6a <_printf_common+0x96>
 8006f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f20:	1e13      	subs	r3, r2, #0
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	bf18      	it	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	0692      	lsls	r2, r2, #26
 8006f2a:	d42b      	bmi.n	8006f84 <_printf_common+0xb0>
 8006f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f30:	4649      	mov	r1, r9
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c0      	blx	r8
 8006f36:	3001      	adds	r0, #1
 8006f38:	d01e      	beq.n	8006f78 <_printf_common+0xa4>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	68e5      	ldr	r5, [r4, #12]
 8006f3e:	6832      	ldr	r2, [r6, #0]
 8006f40:	f003 0306 	and.w	r3, r3, #6
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	bf08      	it	eq
 8006f48:	1aad      	subeq	r5, r5, r2
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	6922      	ldr	r2, [r4, #16]
 8006f4e:	bf0c      	ite	eq
 8006f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f54:	2500      	movne	r5, #0
 8006f56:	4293      	cmp	r3, r2
 8006f58:	bfc4      	itt	gt
 8006f5a:	1a9b      	subgt	r3, r3, r2
 8006f5c:	18ed      	addgt	r5, r5, r3
 8006f5e:	2600      	movs	r6, #0
 8006f60:	341a      	adds	r4, #26
 8006f62:	42b5      	cmp	r5, r6
 8006f64:	d11a      	bne.n	8006f9c <_printf_common+0xc8>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e008      	b.n	8006f7c <_printf_common+0xa8>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	4649      	mov	r1, r9
 8006f70:	4638      	mov	r0, r7
 8006f72:	47c0      	blx	r8
 8006f74:	3001      	adds	r0, #1
 8006f76:	d103      	bne.n	8006f80 <_printf_common+0xac>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f80:	3501      	adds	r5, #1
 8006f82:	e7c6      	b.n	8006f12 <_printf_common+0x3e>
 8006f84:	18e1      	adds	r1, r4, r3
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	2030      	movs	r0, #48	; 0x30
 8006f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f8e:	4422      	add	r2, r4
 8006f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f98:	3302      	adds	r3, #2
 8006f9a:	e7c7      	b.n	8006f2c <_printf_common+0x58>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	47c0      	blx	r8
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d0e6      	beq.n	8006f78 <_printf_common+0xa4>
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7d9      	b.n	8006f62 <_printf_common+0x8e>
	...

08006fb0 <_printf_i>:
 8006fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	7e0f      	ldrb	r7, [r1, #24]
 8006fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fb8:	2f78      	cmp	r7, #120	; 0x78
 8006fba:	4691      	mov	r9, r2
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fc6:	d807      	bhi.n	8006fd8 <_printf_i+0x28>
 8006fc8:	2f62      	cmp	r7, #98	; 0x62
 8006fca:	d80a      	bhi.n	8006fe2 <_printf_i+0x32>
 8006fcc:	2f00      	cmp	r7, #0
 8006fce:	f000 80d8 	beq.w	8007182 <_printf_i+0x1d2>
 8006fd2:	2f58      	cmp	r7, #88	; 0x58
 8006fd4:	f000 80a3 	beq.w	800711e <_printf_i+0x16e>
 8006fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe0:	e03a      	b.n	8007058 <_printf_i+0xa8>
 8006fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fe6:	2b15      	cmp	r3, #21
 8006fe8:	d8f6      	bhi.n	8006fd8 <_printf_i+0x28>
 8006fea:	a101      	add	r1, pc, #4	; (adr r1, 8006ff0 <_printf_i+0x40>)
 8006fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff0:	08007049 	.word	0x08007049
 8006ff4:	0800705d 	.word	0x0800705d
 8006ff8:	08006fd9 	.word	0x08006fd9
 8006ffc:	08006fd9 	.word	0x08006fd9
 8007000:	08006fd9 	.word	0x08006fd9
 8007004:	08006fd9 	.word	0x08006fd9
 8007008:	0800705d 	.word	0x0800705d
 800700c:	08006fd9 	.word	0x08006fd9
 8007010:	08006fd9 	.word	0x08006fd9
 8007014:	08006fd9 	.word	0x08006fd9
 8007018:	08006fd9 	.word	0x08006fd9
 800701c:	08007169 	.word	0x08007169
 8007020:	0800708d 	.word	0x0800708d
 8007024:	0800714b 	.word	0x0800714b
 8007028:	08006fd9 	.word	0x08006fd9
 800702c:	08006fd9 	.word	0x08006fd9
 8007030:	0800718b 	.word	0x0800718b
 8007034:	08006fd9 	.word	0x08006fd9
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08006fd9 	.word	0x08006fd9
 8007040:	08006fd9 	.word	0x08006fd9
 8007044:	08007153 	.word	0x08007153
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	602a      	str	r2, [r5, #0]
 8007050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007058:	2301      	movs	r3, #1
 800705a:	e0a3      	b.n	80071a4 <_printf_i+0x1f4>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	6829      	ldr	r1, [r5, #0]
 8007060:	0606      	lsls	r6, r0, #24
 8007062:	f101 0304 	add.w	r3, r1, #4
 8007066:	d50a      	bpl.n	800707e <_printf_i+0xce>
 8007068:	680e      	ldr	r6, [r1, #0]
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	2e00      	cmp	r6, #0
 800706e:	da03      	bge.n	8007078 <_printf_i+0xc8>
 8007070:	232d      	movs	r3, #45	; 0x2d
 8007072:	4276      	negs	r6, r6
 8007074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007078:	485e      	ldr	r0, [pc, #376]	; (80071f4 <_printf_i+0x244>)
 800707a:	230a      	movs	r3, #10
 800707c:	e019      	b.n	80070b2 <_printf_i+0x102>
 800707e:	680e      	ldr	r6, [r1, #0]
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007086:	bf18      	it	ne
 8007088:	b236      	sxthne	r6, r6
 800708a:	e7ef      	b.n	800706c <_printf_i+0xbc>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6029      	str	r1, [r5, #0]
 8007094:	0601      	lsls	r1, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xec>
 8007098:	681e      	ldr	r6, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xf2>
 800709c:	0646      	lsls	r6, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe8>
 80070a0:	881e      	ldrh	r6, [r3, #0]
 80070a2:	4854      	ldr	r0, [pc, #336]	; (80071f4 <_printf_i+0x244>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6865      	ldr	r5, [r4, #4]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90e      	cbnz	r6, 80070c8 <_printf_i+0x118>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d04d      	beq.n	8007164 <_printf_i+0x1b4>
 80070c8:	4615      	mov	r5, r2
 80070ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ce:	fb03 6711 	mls	r7, r3, r1, r6
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d8:	4637      	mov	r7, r6
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460e      	mov	r6, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x11a>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x14c>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07de      	lsls	r6, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x14c>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee2 	bl	8006ed4 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14c      	bne.n	80071ae <_printf_i+0x1fe>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	4835      	ldr	r0, [pc, #212]	; (80071f4 <_printf_i+0x244>)
 8007120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007124:	6829      	ldr	r1, [r5, #0]
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	f851 6b04 	ldr.w	r6, [r1], #4
 800712c:	6029      	str	r1, [r5, #0]
 800712e:	061d      	lsls	r5, r3, #24
 8007130:	d514      	bpl.n	800715c <_printf_i+0x1ac>
 8007132:	07df      	lsls	r7, r3, #31
 8007134:	bf44      	itt	mi
 8007136:	f043 0320 	orrmi.w	r3, r3, #32
 800713a:	6023      	strmi	r3, [r4, #0]
 800713c:	b91e      	cbnz	r6, 8007146 <_printf_i+0x196>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	f023 0320 	bic.w	r3, r3, #32
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	2310      	movs	r3, #16
 8007148:	e7b0      	b.n	80070ac <_printf_i+0xfc>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	2378      	movs	r3, #120	; 0x78
 8007154:	4828      	ldr	r0, [pc, #160]	; (80071f8 <_printf_i+0x248>)
 8007156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800715a:	e7e3      	b.n	8007124 <_printf_i+0x174>
 800715c:	0659      	lsls	r1, r3, #25
 800715e:	bf48      	it	mi
 8007160:	b2b6      	uxthmi	r6, r6
 8007162:	e7e6      	b.n	8007132 <_printf_i+0x182>
 8007164:	4615      	mov	r5, r2
 8007166:	e7bb      	b.n	80070e0 <_printf_i+0x130>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	6826      	ldr	r6, [r4, #0]
 800716c:	6961      	ldr	r1, [r4, #20]
 800716e:	1d18      	adds	r0, r3, #4
 8007170:	6028      	str	r0, [r5, #0]
 8007172:	0635      	lsls	r5, r6, #24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	d501      	bpl.n	800717c <_printf_i+0x1cc>
 8007178:	6019      	str	r1, [r3, #0]
 800717a:	e002      	b.n	8007182 <_printf_i+0x1d2>
 800717c:	0670      	lsls	r0, r6, #25
 800717e:	d5fb      	bpl.n	8007178 <_printf_i+0x1c8>
 8007180:	8019      	strh	r1, [r3, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	4615      	mov	r5, r2
 8007188:	e7ba      	b.n	8007100 <_printf_i+0x150>
 800718a:	682b      	ldr	r3, [r5, #0]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	602a      	str	r2, [r5, #0]
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	4628      	mov	r0, r5
 8007198:	f7f9 f832 	bl	8000200 <memchr>
 800719c:	b108      	cbz	r0, 80071a2 <_printf_i+0x1f2>
 800719e:	1b40      	subs	r0, r0, r5
 80071a0:	6060      	str	r0, [r4, #4]
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	2300      	movs	r3, #0
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ac:	e7a8      	b.n	8007100 <_printf_i+0x150>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4649      	mov	r1, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	47d0      	blx	sl
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0ab      	beq.n	8007114 <_printf_i+0x164>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	079b      	lsls	r3, r3, #30
 80071c0:	d413      	bmi.n	80071ea <_printf_i+0x23a>
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	4298      	cmp	r0, r3
 80071c8:	bfb8      	it	lt
 80071ca:	4618      	movlt	r0, r3
 80071cc:	e7a4      	b.n	8007118 <_printf_i+0x168>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4632      	mov	r2, r6
 80071d2:	4649      	mov	r1, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	47d0      	blx	sl
 80071d8:	3001      	adds	r0, #1
 80071da:	d09b      	beq.n	8007114 <_printf_i+0x164>
 80071dc:	3501      	adds	r5, #1
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	9903      	ldr	r1, [sp, #12]
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	dcf2      	bgt.n	80071ce <_printf_i+0x21e>
 80071e8:	e7eb      	b.n	80071c2 <_printf_i+0x212>
 80071ea:	2500      	movs	r5, #0
 80071ec:	f104 0619 	add.w	r6, r4, #25
 80071f0:	e7f5      	b.n	80071de <_printf_i+0x22e>
 80071f2:	bf00      	nop
 80071f4:	08008702 	.word	0x08008702
 80071f8:	08008713 	.word	0x08008713

080071fc <_free_r>:
 80071fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071fe:	2900      	cmp	r1, #0
 8007200:	d044      	beq.n	800728c <_free_r+0x90>
 8007202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007206:	9001      	str	r0, [sp, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f1a1 0404 	sub.w	r4, r1, #4
 800720e:	bfb8      	it	lt
 8007210:	18e4      	addlt	r4, r4, r3
 8007212:	f000 f913 	bl	800743c <__malloc_lock>
 8007216:	4a1e      	ldr	r2, [pc, #120]	; (8007290 <_free_r+0x94>)
 8007218:	9801      	ldr	r0, [sp, #4]
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x30>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007228:	f000 b90e 	b.w	8007448 <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x46>
 8007230:	6825      	ldr	r5, [r4, #0]
 8007232:	1961      	adds	r1, r4, r5
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1949      	addeq	r1, r1, r5
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x22>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x50>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x46>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1855      	adds	r5, r2, r1
 8007250:	42a5      	cmp	r5, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x70>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	4421      	add	r1, r4
 8007258:	1854      	adds	r4, r2, r1
 800725a:	42a3      	cmp	r3, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x26>
 8007260:	681c      	ldr	r4, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	4421      	add	r1, r4
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	e7da      	b.n	8007222 <_free_r+0x26>
 800726c:	d902      	bls.n	8007274 <_free_r+0x78>
 800726e:	230c      	movs	r3, #12
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x26>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7ca      	b.n	8007222 <_free_r+0x26>
 800728c:	b003      	add	sp, #12
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	20002434 	.word	0x20002434

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0e      	ldr	r6, [pc, #56]	; (80072d0 <sbrk_aligned+0x3c>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f000 f8bc 	bl	800741c <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f8b7 	bl	800741c <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <sbrk_aligned+0x34>
 80072b2:	1cc4      	adds	r4, r0, #3
 80072b4:	f024 0403 	bic.w	r4, r4, #3
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d007      	beq.n	80072cc <sbrk_aligned+0x38>
 80072bc:	1a21      	subs	r1, r4, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f8ac 	bl	800741c <_sbrk_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d101      	bne.n	80072cc <sbrk_aligned+0x38>
 80072c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	20002438 	.word	0x20002438

080072d4 <_malloc_r>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	1ccd      	adds	r5, r1, #3
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	db01      	blt.n	80072f0 <_malloc_r+0x1c>
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d905      	bls.n	80072fc <_malloc_r+0x28>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2600      	movs	r6, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	4e2e      	ldr	r6, [pc, #184]	; (80073b8 <_malloc_r+0xe4>)
 80072fe:	f000 f89d 	bl	800743c <__malloc_lock>
 8007302:	6833      	ldr	r3, [r6, #0]
 8007304:	461c      	mov	r4, r3
 8007306:	bb34      	cbnz	r4, 8007356 <_malloc_r+0x82>
 8007308:	4629      	mov	r1, r5
 800730a:	4638      	mov	r0, r7
 800730c:	f7ff ffc2 	bl	8007294 <sbrk_aligned>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	4604      	mov	r4, r0
 8007314:	d14d      	bne.n	80073b2 <_malloc_r+0xde>
 8007316:	6834      	ldr	r4, [r6, #0]
 8007318:	4626      	mov	r6, r4
 800731a:	2e00      	cmp	r6, #0
 800731c:	d140      	bne.n	80073a0 <_malloc_r+0xcc>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	4631      	mov	r1, r6
 8007322:	4638      	mov	r0, r7
 8007324:	eb04 0803 	add.w	r8, r4, r3
 8007328:	f000 f878 	bl	800741c <_sbrk_r>
 800732c:	4580      	cmp	r8, r0
 800732e:	d13a      	bne.n	80073a6 <_malloc_r+0xd2>
 8007330:	6821      	ldr	r1, [r4, #0]
 8007332:	3503      	adds	r5, #3
 8007334:	1a6d      	subs	r5, r5, r1
 8007336:	f025 0503 	bic.w	r5, r5, #3
 800733a:	3508      	adds	r5, #8
 800733c:	2d0c      	cmp	r5, #12
 800733e:	bf38      	it	cc
 8007340:	250c      	movcc	r5, #12
 8007342:	4629      	mov	r1, r5
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ffa5 	bl	8007294 <sbrk_aligned>
 800734a:	3001      	adds	r0, #1
 800734c:	d02b      	beq.n	80073a6 <_malloc_r+0xd2>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	442b      	add	r3, r5
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	e00e      	b.n	8007374 <_malloc_r+0xa0>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	1b52      	subs	r2, r2, r5
 800735a:	d41e      	bmi.n	800739a <_malloc_r+0xc6>
 800735c:	2a0b      	cmp	r2, #11
 800735e:	d916      	bls.n	800738e <_malloc_r+0xba>
 8007360:	1961      	adds	r1, r4, r5
 8007362:	42a3      	cmp	r3, r4
 8007364:	6025      	str	r5, [r4, #0]
 8007366:	bf18      	it	ne
 8007368:	6059      	strne	r1, [r3, #4]
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	bf08      	it	eq
 800736e:	6031      	streq	r1, [r6, #0]
 8007370:	5162      	str	r2, [r4, r5]
 8007372:	604b      	str	r3, [r1, #4]
 8007374:	4638      	mov	r0, r7
 8007376:	f104 060b 	add.w	r6, r4, #11
 800737a:	f000 f865 	bl	8007448 <__malloc_unlock>
 800737e:	f026 0607 	bic.w	r6, r6, #7
 8007382:	1d23      	adds	r3, r4, #4
 8007384:	1af2      	subs	r2, r6, r3
 8007386:	d0b6      	beq.n	80072f6 <_malloc_r+0x22>
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	50a3      	str	r3, [r4, r2]
 800738c:	e7b3      	b.n	80072f6 <_malloc_r+0x22>
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	bf0c      	ite	eq
 8007394:	6032      	streq	r2, [r6, #0]
 8007396:	605a      	strne	r2, [r3, #4]
 8007398:	e7ec      	b.n	8007374 <_malloc_r+0xa0>
 800739a:	4623      	mov	r3, r4
 800739c:	6864      	ldr	r4, [r4, #4]
 800739e:	e7b2      	b.n	8007306 <_malloc_r+0x32>
 80073a0:	4634      	mov	r4, r6
 80073a2:	6876      	ldr	r6, [r6, #4]
 80073a4:	e7b9      	b.n	800731a <_malloc_r+0x46>
 80073a6:	230c      	movs	r3, #12
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	4638      	mov	r0, r7
 80073ac:	f000 f84c 	bl	8007448 <__malloc_unlock>
 80073b0:	e7a1      	b.n	80072f6 <_malloc_r+0x22>
 80073b2:	6025      	str	r5, [r4, #0]
 80073b4:	e7de      	b.n	8007374 <_malloc_r+0xa0>
 80073b6:	bf00      	nop
 80073b8:	20002434 	.word	0x20002434

080073bc <_realloc_r>:
 80073bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c0:	4680      	mov	r8, r0
 80073c2:	4614      	mov	r4, r2
 80073c4:	460e      	mov	r6, r1
 80073c6:	b921      	cbnz	r1, 80073d2 <_realloc_r+0x16>
 80073c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	4611      	mov	r1, r2
 80073ce:	f7ff bf81 	b.w	80072d4 <_malloc_r>
 80073d2:	b92a      	cbnz	r2, 80073e0 <_realloc_r+0x24>
 80073d4:	f7ff ff12 	bl	80071fc <_free_r>
 80073d8:	4625      	mov	r5, r4
 80073da:	4628      	mov	r0, r5
 80073dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e0:	f000 f838 	bl	8007454 <_malloc_usable_size_r>
 80073e4:	4284      	cmp	r4, r0
 80073e6:	4607      	mov	r7, r0
 80073e8:	d802      	bhi.n	80073f0 <_realloc_r+0x34>
 80073ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ee:	d812      	bhi.n	8007416 <_realloc_r+0x5a>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff ff6e 	bl	80072d4 <_malloc_r>
 80073f8:	4605      	mov	r5, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d0ed      	beq.n	80073da <_realloc_r+0x1e>
 80073fe:	42bc      	cmp	r4, r7
 8007400:	4622      	mov	r2, r4
 8007402:	4631      	mov	r1, r6
 8007404:	bf28      	it	cs
 8007406:	463a      	movcs	r2, r7
 8007408:	f7ff faf8 	bl	80069fc <memcpy>
 800740c:	4631      	mov	r1, r6
 800740e:	4640      	mov	r0, r8
 8007410:	f7ff fef4 	bl	80071fc <_free_r>
 8007414:	e7e1      	b.n	80073da <_realloc_r+0x1e>
 8007416:	4635      	mov	r5, r6
 8007418:	e7df      	b.n	80073da <_realloc_r+0x1e>
	...

0800741c <_sbrk_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_sbrk_r+0x1c>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7f9 fb52 	bl	8000ad0 <_sbrk>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_sbrk_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_sbrk_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	2000243c 	.word	0x2000243c

0800743c <__malloc_lock>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__malloc_lock+0x8>)
 800743e:	f000 b811 	b.w	8007464 <__retarget_lock_acquire_recursive>
 8007442:	bf00      	nop
 8007444:	20002440 	.word	0x20002440

08007448 <__malloc_unlock>:
 8007448:	4801      	ldr	r0, [pc, #4]	; (8007450 <__malloc_unlock+0x8>)
 800744a:	f000 b80c 	b.w	8007466 <__retarget_lock_release_recursive>
 800744e:	bf00      	nop
 8007450:	20002440 	.word	0x20002440

08007454 <_malloc_usable_size_r>:
 8007454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007458:	1f18      	subs	r0, r3, #4
 800745a:	2b00      	cmp	r3, #0
 800745c:	bfbc      	itt	lt
 800745e:	580b      	ldrlt	r3, [r1, r0]
 8007460:	18c0      	addlt	r0, r0, r3
 8007462:	4770      	bx	lr

08007464 <__retarget_lock_acquire_recursive>:
 8007464:	4770      	bx	lr

08007466 <__retarget_lock_release_recursive>:
 8007466:	4770      	bx	lr

08007468 <_init>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr

08007474 <_fini>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr
