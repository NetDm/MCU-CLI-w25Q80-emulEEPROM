
CLI25Q80.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000185c  080089c0  080089c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a21c  0800a21c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a224  0800a224  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a224  0800a224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b48  200001d4  0800a400  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20003d1c  0800a400  00023d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012184  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003634  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000369f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a424  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171ba  00000000  00000000  00061cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0650  00000000  00000000  00078e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001694c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a54  00000000  00000000  00169518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a8 	.word	0x080089a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080089a8 	.word	0x080089a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_DMA_Init+0x38>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <MX_DMA_Init+0x38>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6493      	str	r3, [r2, #72]	; 0x48
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_DMA_Init+0x38>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 fe0f 	bl	80011ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 fe28 	bl	8001222 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b46      	ldr	r3, [pc, #280]	; (8000710 <MX_GPIO_Init+0x130>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a45      	ldr	r2, [pc, #276]	; (8000710 <MX_GPIO_Init+0x130>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b43      	ldr	r3, [pc, #268]	; (8000710 <MX_GPIO_Init+0x130>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <MX_GPIO_Init+0x130>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a3f      	ldr	r2, [pc, #252]	; (8000710 <MX_GPIO_Init+0x130>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <MX_GPIO_Init+0x130>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <MX_GPIO_Init+0x130>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a39      	ldr	r2, [pc, #228]	; (8000710 <MX_GPIO_Init+0x130>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b37      	ldr	r3, [pc, #220]	; (8000710 <MX_GPIO_Init+0x130>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <MX_GPIO_Init+0x130>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a33      	ldr	r2, [pc, #204]	; (8000710 <MX_GPIO_Init+0x130>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <MX_GPIO_Init+0x130>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <MX_GPIO_Init+0x130>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <MX_GPIO_Init+0x130>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_GPIO_Init+0x130>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_FLASH_CS_Pin|SPI_FLASH_CS2_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f248 0110 	movw	r1, #32784	; 0x8010
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f001 f9a8 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_GPIO_Port, BLINK_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2120      	movs	r1, #32
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f001 f9a2 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_FLASH_WP_UP_GPIO_Port, SPI_FLASH_WP_UP_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2104      	movs	r1, #4
 800068c:	4821      	ldr	r0, [pc, #132]	; (8000714 <MX_GPIO_Init+0x134>)
 800068e:	f001 f99d 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000698:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	481b      	ldr	r0, [pc, #108]	; (8000718 <MX_GPIO_Init+0x138>)
 80006aa:	f000 ffcd 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_FLASH_CS_Pin|SPI_FLASH_CS2_Pin;
 80006ae:	f248 0310 	movw	r3, #32784	; 0x8010
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006bc:	2301      	movs	r3, #1
 80006be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f000 ffbd 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 80006ce:	2320      	movs	r3, #32
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f000 ffae 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_FLASH_WP_UP_Pin;
 80006ec:	2304      	movs	r3, #4
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_FLASH_WP_UP_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0x134>)
 8000704:	f000 ffa0 	bl	8001648 <HAL_GPIO_Init>

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	48000c00 	.word	0x48000c00
 8000718:	48000800 	.word	0x48000800

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fbe8 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f817 	bl	8000756 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff ff5a 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800072c:	f7ff ff3a 	bl	80005a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000730:	f000 fab6 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000734:	f000 f8a4 	bl	8000880 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000738:	f000 f864 	bl	8000804 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800073c:	f000 fa80 	bl	8000c40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  userApp();
 8000740:	f005 fb3c 	bl	8005dbc <userApp>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 f957 	bl	80019fc <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 800074e:	2096      	movs	r0, #150	; 0x96
 8000750:	f000 fc4c 	bl	8000fec <HAL_Delay>
	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000754:	e7f6      	b.n	8000744 <main+0x28>

08000756 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b096      	sub	sp, #88	; 0x58
 800075a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2244      	movs	r2, #68	; 0x44
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f006 feb7 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000778:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077c:	f001 f966 	bl	8001a4c <HAL_PWREx_ControlVoltageScaling>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000786:	f000 f837 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f99d 	bl	8001af8 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007c4:	f000 f818 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fd65 	bl	80022b0 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ec:	f000 f804 	bl	80007f8 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3758      	adds	r7, #88	; 0x58
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_SPI1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_SPI1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_SPI1_Init+0x74>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_SPI1_Init+0x74>)
 800081e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_SPI1_Init+0x74>)
 8000826:	2202      	movs	r2, #2
 8000828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_SPI1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_SPI1_Init+0x74>)
 8000832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_SPI1_Init+0x74>)
 800083a:	2238      	movs	r2, #56	; 0x38
 800083c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_SPI1_Init+0x74>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_SPI1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_SPI1_Init+0x74>)
 8000864:	f002 fc04 	bl	8003070 <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f7ff ffc3 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001f0 	.word	0x200001f0
 800087c:	40013000 	.word	0x40013000

08000880 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_SPI3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_SPI3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_SPI3_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI3_Init+0x74>)
 800089a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008e0:	f002 fbc6 	bl	8003070 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f7ff ff85 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000254 	.word	0x20000254
 80008f8:	40003c00 	.word	0x40003c00

080008fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3d      	ldr	r2, [pc, #244]	; (8000a10 <HAL_SPI_MspInit+0x114>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d145      	bne.n	80009aa <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a3c      	ldr	r2, [pc, #240]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f000 fe60 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000988:	2308      	movs	r3, #8
 800098a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000994:	2301      	movs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	481d      	ldr	r0, [pc, #116]	; (8000a18 <HAL_SPI_MspInit+0x11c>)
 80009a4:	f000 fe50 	bl	8001648 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009a8:	e02d      	b.n	8000a06 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <HAL_SPI_MspInit+0x120>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d128      	bne.n	8000a06 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	6593      	str	r3, [r2, #88]	; 0x58
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_SPI_MspInit+0x118>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f6:	2306      	movs	r3, #6
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <HAL_SPI_MspInit+0x124>)
 8000a02:	f000 fe21 	bl	8001648 <HAL_GPIO_Init>
}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40013000 	.word	0x40013000
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	40003c00 	.word	0x40003c00
 8000a20:	48000800 	.word	0x48000800

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 fa78 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ac6:	f000 fcdf 	bl	8001488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200003c4 	.word	0x200003c4

08000ad4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e00a      	b.n	8000afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae6:	f3af 8000 	nop.w
 8000aea:	4601      	mov	r1, r0
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	b2ca      	uxtb	r2, r1
 8000af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf0      	blt.n	8000ae6 <_read+0x12>
	}

return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e009      	b.n	8000b34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fce1 	bl	80064f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf1      	blt.n	8000b20 <_write+0x12>
	}
	return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_close>:

int _close(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_isatty>:

int _isatty(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f006 fc28 	bl	8007434 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20018000 	.word	0x20018000
 8000c10:	00002000 	.word	0x00002000
 8000c14:	200002b8 	.word	0x200002b8
 8000c18:	20003d20 	.word	0x20003d20

08000c1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c46:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_USART1_UART_Init+0x58>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1152000;
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <MX_USART1_UART_Init+0x5c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c64:	220c      	movs	r2, #12
 8000c66:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_USART1_UART_Init+0x54>)
 8000c82:	f003 f905 	bl	8003e90 <HAL_UART_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000c8c:	f7ff fdb4 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200002bc 	.word	0x200002bc
 8000c98:	40013800 	.word	0x40013800
 8000c9c:	00119400 	.word	0x00119400

08000ca0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_USART2_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_USART2_UART_Init+0x58>)
 8000ce4:	f003 f8d4 	bl	8003e90 <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cee:	f7ff fd83 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000340 	.word	0x20000340
 8000cfc:	40004400 	.word	0x40004400

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0ae      	sub	sp, #184	; 0xb8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2288      	movs	r2, #136	; 0x88
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 fbd9 	bl	80074d8 <memset>
  if(uartHandle->Instance==USART1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a58      	ldr	r2, [pc, #352]	; (8000e8c <HAL_UART_MspInit+0x18c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d13d      	bne.n	8000dac <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d34:	2300      	movs	r3, #0
 8000d36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fcdb 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d48:	f7ff fd56 	bl	80007f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4c:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d50:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d56:	6613      	str	r3, [r2, #96]	; 0x60
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d96:	2307      	movs	r3, #7
 8000d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f000 fc4f 	bl	8001648 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000daa:	e06a      	b.n	8000e82 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <HAL_UART_MspInit+0x194>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d165      	bne.n	8000e82 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fc98 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000dce:	f7ff fd13 	bl	80007f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dde:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_UART_MspInit+0x190>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e02:	230c      	movs	r3, #12
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fc0d 	bl	8001648 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_UART_MspInit+0x19c>)
 8000e32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e68:	f000 f9f6 	bl	8001258 <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8000e72:	f7ff fcc1 	bl	80007f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e7a:	671a      	str	r2, [r3, #112]	; 0x70
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_UART_MspInit+0x198>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e82:	bf00      	nop
 8000e84:	37b8      	adds	r7, #184	; 0xb8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40004400 	.word	0x40004400
 8000e98:	200003c4 	.word	0x200003c4
 8000e9c:	4002006c 	.word	0x4002006c

08000ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea4:	f7ff feba 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopForever+0xe>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopForever+0x16>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f006 fab7 	bl	8007440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ed2:	f7ff fc23 	bl	800071c <main>

08000ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000ee4:	0800a22c 	.word	0x0800a22c
  ldr r2, =_sbss
 8000ee8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000eec:	20003d1c 	.word	0x20003d1c

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_Init+0x3c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <HAL_Init+0x3c>)
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f962 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f80f 	bl	8000f34 <HAL_InitTick>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	e001      	b.n	8000f26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f22:	f7ff fd7f 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_InitTick+0x6c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d023      	beq.n	8000f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_InitTick+0x70>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_InitTick+0x6c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f96d 	bl	800123e <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d809      	bhi.n	8000f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	f000 f937 	bl	80011ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_InitTick+0x74>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e004      	b.n	8000f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e001      	b.n	8000f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	2000040c 	.word	0x2000040c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000040c 	.word	0x2000040c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	; (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e098      	b.n	800139c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <HAL_DMA_Init+0x150>)
 8001272:	429a      	cmp	r2, r3
 8001274:	d80f      	bhi.n	8001296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_DMA_Init+0x154>)
 800127e:	4413      	add	r3, r2
 8001280:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_DMA_Init+0x158>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	009a      	lsls	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_DMA_Init+0x15c>)
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
 8001294:	e00e      	b.n	80012b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <HAL_DMA_Init+0x160>)
 800129e:	4413      	add	r3, r2
 80012a0:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <HAL_DMA_Init+0x158>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	009a      	lsls	r2, r3, #2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a42      	ldr	r2, [pc, #264]	; (80013bc <HAL_DMA_Init+0x164>)
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800130e:	d039      	beq.n	8001384 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_DMA_Init+0x15c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d11a      	bne.n	8001350 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <HAL_DMA_Init+0x168>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 031c 	and.w	r3, r3, #28
 8001326:	210f      	movs	r1, #15
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	4924      	ldr	r1, [pc, #144]	; (80013c0 <HAL_DMA_Init+0x168>)
 8001330:	4013      	ands	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_DMA_Init+0x168>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 031c 	and.w	r3, r3, #28
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	491d      	ldr	r1, [pc, #116]	; (80013c0 <HAL_DMA_Init+0x168>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
 800134e:	e019      	b.n	8001384 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_DMA_Init+0x16c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001358:	f003 031c 	and.w	r3, r3, #28
 800135c:	210f      	movs	r1, #15
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	4917      	ldr	r1, [pc, #92]	; (80013c4 <HAL_DMA_Init+0x16c>)
 8001366:	4013      	ands	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_DMA_Init+0x16c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 031c 	and.w	r3, r3, #28
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	4911      	ldr	r1, [pc, #68]	; (80013c4 <HAL_DMA_Init+0x16c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40020407 	.word	0x40020407
 80013ac:	bffdfff8 	.word	0xbffdfff8
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	40020000 	.word	0x40020000
 80013b8:	bffdfbf8 	.word	0xbffdfbf8
 80013bc:	40020400 	.word	0x40020400
 80013c0:	400200a8 	.word	0x400200a8
 80013c4:	400204a8 	.word	0x400204a8

080013c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_DMA_Start_IT+0x20>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e04b      	b.n	8001480 <HAL_DMA_Start_IT+0xb8>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d13a      	bne.n	8001472 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0201 	bic.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f8e0 	bl	80015e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 020e 	orr.w	r2, r2, #14
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e00f      	b.n	8001460 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0204 	bic.w	r2, r2, #4
 800144e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 020a 	orr.w	r2, r2, #10
 800145e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e005      	b.n	800147e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	f003 031c 	and.w	r3, r3, #28
 80014a8:	2204      	movs	r2, #4
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d026      	beq.n	8001502 <HAL_DMA_IRQHandler+0x7a>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d021      	beq.n	8001502 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0204 	bic.w	r2, r2, #4
 80014da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f003 021c 	and.w	r2, r3, #28
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	2104      	movs	r1, #4
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d071      	beq.n	80015dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001500:	e06c      	b.n	80015dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 031c 	and.w	r3, r3, #28
 800150a:	2202      	movs	r2, #2
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d02e      	beq.n	8001574 <HAL_DMA_IRQHandler+0xec>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d029      	beq.n	8001574 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10b      	bne.n	8001546 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020a 	bic.w	r2, r2, #10
 800153c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021c 	and.w	r2, r3, #28
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2102      	movs	r1, #2
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d038      	beq.n	80015dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001572:	e033      	b.n	80015dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 031c 	and.w	r3, r3, #28
 800157c:	2208      	movs	r2, #8
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d02a      	beq.n	80015de <HAL_DMA_IRQHandler+0x156>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d025      	beq.n	80015de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 020e 	bic.w	r2, r2, #14
 80015a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 021c 	and.w	r2, r3, #28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
}
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	f003 021c 	and.w	r2, r3, #28
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d108      	bne.n	800162a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001628:	e007      	b.n	800163a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	60da      	str	r2, [r3, #12]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	e17f      	b.n	8001958 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8171 	beq.w	8001952 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d005      	beq.n	8001688 <HAL_GPIO_Init+0x40>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d130      	bne.n	80016ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016be:	2201      	movs	r2, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 0201 	and.w	r2, r3, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d118      	bne.n	8001728 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	6939      	ldr	r1, [r7, #16]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80ac 	beq.w	8001952 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_GPIO_Init+0x330>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_GPIO_Init+0x330>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_GPIO_Init+0x330>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001812:	4a5a      	ldr	r2, [pc, #360]	; (800197c <HAL_GPIO_Init+0x334>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183c:	d025      	beq.n	800188a <HAL_GPIO_Init+0x242>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_GPIO_Init+0x338>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01f      	beq.n	8001886 <HAL_GPIO_Init+0x23e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <HAL_GPIO_Init+0x33c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <HAL_GPIO_Init+0x23a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4d      	ldr	r2, [pc, #308]	; (8001988 <HAL_GPIO_Init+0x340>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d013      	beq.n	800187e <HAL_GPIO_Init+0x236>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4c      	ldr	r2, [pc, #304]	; (800198c <HAL_GPIO_Init+0x344>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_GPIO_Init+0x232>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	; (8001990 <HAL_GPIO_Init+0x348>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d007      	beq.n	8001876 <HAL_GPIO_Init+0x22e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_GPIO_Init+0x34c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d101      	bne.n	8001872 <HAL_GPIO_Init+0x22a>
 800186e:	2306      	movs	r3, #6
 8001870:	e00c      	b.n	800188c <HAL_GPIO_Init+0x244>
 8001872:	2307      	movs	r3, #7
 8001874:	e00a      	b.n	800188c <HAL_GPIO_Init+0x244>
 8001876:	2305      	movs	r3, #5
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x244>
 800187a:	2304      	movs	r3, #4
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x244>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x244>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x244>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x244>
 800188a:	2300      	movs	r3, #0
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800189c:	4937      	ldr	r1, [pc, #220]	; (800197c <HAL_GPIO_Init+0x334>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_GPIO_Init+0x350>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ce:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_GPIO_Init+0x350>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_GPIO_Init+0x350>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f8:	4a27      	ldr	r2, [pc, #156]	; (8001998 <HAL_GPIO_Init+0x350>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_GPIO_Init+0x350>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_GPIO_Init+0x350>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_GPIO_Init+0x350>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_GPIO_Init+0x350>)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f47f ae78 	bne.w	8001658 <HAL_GPIO_Init+0x10>
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	48001000 	.word	0x48001000
 8001990:	48001400 	.word	0x48001400
 8001994:	48001800 	.word	0x48001800
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	887b      	ldrh	r3, [r7, #2]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43d9      	mvns	r1, r3
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40007000 	.word	0x40007000

08001a4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5a:	d130      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a68:	d038      	beq.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2232      	movs	r2, #50	; 0x32
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a90:	e002      	b.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa4:	d102      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f2      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab8:	d110      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e00f      	b.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	d007      	beq.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad4:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40007000 	.word	0x40007000
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e3ca      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b14:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80e4 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4a>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	f040 808b 	bne.w	8001c50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f040 8087 	bne.w	8001c50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x62>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e3a2      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	4b82      	ldr	r3, [pc, #520]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_RCC_OscConfig+0x7c>
 8001b6a:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_OscConfig+0x88>
 8001b74:	4b7c      	ldr	r3, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d223      	bcs.n	8001bcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd55 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e383      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b98:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b70      	ldr	r3, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	496d      	ldr	r1, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	4968      	ldr	r1, [pc, #416]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
 8001bca:	e025      	b.n	8001c18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4960      	ldr	r1, [pc, #384]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bea:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	495b      	ldr	r1, [pc, #364]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fd15 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e343      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c18:	f000 fc4a 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	091b      	lsrs	r3, r3, #4
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	4950      	ldr	r1, [pc, #320]	; (8001d6c <HAL_RCC_OscConfig+0x274>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_RCC_OscConfig+0x278>)
 8001c36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c38:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f979 	bl	8000f34 <HAL_InitTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d052      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	e327      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d032      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a42      	ldr	r2, [pc, #264]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f9b6 	bl	8000fd4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f9b2 	bl	8000fd4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e310      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a36      	ldr	r2, [pc, #216]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4931      	ldr	r1, [pc, #196]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	492c      	ldr	r1, [pc, #176]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e01a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f983 	bl	8000fd4 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f97f 	bl	8000fd4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e2dd      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x1da>
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d074      	beq.n	8001dea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x21a>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d10e      	bne.n	8001d2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d064      	beq.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d160      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e2ba      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x24a>
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e026      	b.n	8001d90 <HAL_RCC_OscConfig+0x298>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4a:	d115      	bne.n	8001d78 <HAL_RCC_OscConfig+0x280>
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a02      	ldr	r2, [pc, #8]	; (8001d68 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x298>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	0800a038 	.word	0x0800a038
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004
 8001d78:	4ba0      	ldr	r3, [pc, #640]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a9f      	ldr	r2, [pc, #636]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b9d      	ldr	r3, [pc, #628]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a9c      	ldr	r2, [pc, #624]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f91c 	bl	8000fd4 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f918 	bl	8000fd4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e276      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2a8>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f908 	bl	8000fd4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f904 	bl	8000fd4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e262      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2d0>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d060      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_OscConfig+0x310>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d116      	bne.n	8001e36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x328>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e23f      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	4973      	ldr	r1, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e34:	e040      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d023      	beq.n	8001e86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3e:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f8c3 	bl	8000fd4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7ff f8bf 	bl	8000fd4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e21d      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e64:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	495f      	ldr	r1, [pc, #380]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5c      	ldr	r2, [pc, #368]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff f89f 	bl	8000fd4 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff f89b 	bl	8000fd4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1f9      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f87a 	bl	8000fd4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f876 	bl	8000fd4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1d4      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ef      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x3ec>
 8001f04:	e01b      	b.n	8001f3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0c:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7ff f85d 	bl	8000fd4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7ff f859 	bl	8000fd4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1b7      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80a6 	beq.w	8002098 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	4b21      	ldr	r3, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x508>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d118      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCC_OscConfig+0x508>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x508>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f90:	f7ff f820 	bl	8000fd4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7ff f81c 	bl	8000fd4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e17a      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_OscConfig+0x508>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4d8>
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fce:	e029      	b.n	8002024 <HAL_RCC_OscConfig+0x52c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d115      	bne.n	8002004 <HAL_RCC_OscConfig+0x50c>
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x52c>
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	4b9c      	ldr	r3, [pc, #624]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	4a9b      	ldr	r2, [pc, #620]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002014:	4b98      	ldr	r3, [pc, #608]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	4a97      	ldr	r2, [pc, #604]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe ffd2 	bl	8000fd4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002032:	e00a      	b.n	800204a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7fe ffce 	bl	8000fd4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e12a      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800204a:	4b8b      	ldr	r3, [pc, #556]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ed      	beq.n	8002034 <HAL_RCC_OscConfig+0x53c>
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7fe ffbb 	bl	8000fd4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe ffb7 	bl	8000fd4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e113      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002078:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ed      	bne.n	8002062 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a79      	ldr	r2, [pc, #484]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80fe 	beq.w	800229e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	f040 80d0 	bne.w	800224c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	429a      	cmp	r2, r3
 80020be:	d130      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	3b01      	subs	r3, #1
 80020cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d127      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11f      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020ec:	2a07      	cmp	r2, #7
 80020ee:	bf14      	ite	ne
 80020f0:	2201      	movne	r2, #1
 80020f2:	2200      	moveq	r2, #0
 80020f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d113      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d109      	bne.n	8002122 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d06e      	beq.n	8002200 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d069      	beq.n	80021fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002134:	4b50      	ldr	r3, [pc, #320]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0ad      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7fe ff40 	bl	8000fd4 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe ff3c 	bl	8000fd4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e09a      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	4b40      	ldr	r3, [pc, #256]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_RCC_OscConfig+0x784>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002186:	3a01      	subs	r2, #1
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002190:	0212      	lsls	r2, r2, #8
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002198:	0852      	lsrs	r2, r2, #1
 800219a:	3a01      	subs	r2, #1
 800219c:	0552      	lsls	r2, r2, #21
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a4:	0852      	lsrs	r2, r2, #1
 80021a6:	3a01      	subs	r2, #1
 80021a8:	0652      	lsls	r2, r2, #25
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b0:	0912      	lsrs	r2, r2, #4
 80021b2:	0452      	lsls	r2, r2, #17
 80021b4:	430a      	orrs	r2, r1
 80021b6:	4930      	ldr	r1, [pc, #192]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021bc:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d4:	f7fe fefe 	bl	8000fd4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7fe fefa 	bl	8000fd4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e058      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021fa:	e050      	b.n	800229e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e04f      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d148      	bne.n	800229e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a16      	ldr	r2, [pc, #88]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002224:	f7fe fed6 	bl	8000fd4 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fed2 	bl	8000fd4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e030      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x734>
 800224a:	e028      	b.n	800229e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d023      	beq.n	800229a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_RCC_OscConfig+0x780>)
 8002258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe feb9 	bl	8000fd4 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002264:	e00c      	b.n	8002280 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe feb5 	bl	8000fd4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d905      	bls.n	8002280 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
 8002278:	40021000 	.word	0x40021000
 800227c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_OscConfig+0x7b0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ec      	bne.n	8002266 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_OscConfig+0x7b0>)
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4905      	ldr	r1, [pc, #20]	; (80022a8 <HAL_RCC_OscConfig+0x7b0>)
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_OscConfig+0x7b4>)
 8002294:	4013      	ands	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
 8002298:	e001      	b.n	800229e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	feeefffc 	.word	0xfeeefffc

080022b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0e7      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b72      	ldr	r3, [pc, #456]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4970      	ldr	r1, [pc, #448]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b6e      	ldr	r3, [pc, #440]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0cf      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800230c:	429a      	cmp	r2, r3
 800230e:	d908      	bls.n	8002322 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4960      	ldr	r1, [pc, #384]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04c      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d121      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0a6      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e09a      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002366:	4b4e      	ldr	r3, [pc, #312]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e08e      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e086      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4943      	ldr	r1, [pc, #268]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe fe1c 	bl	8000fd4 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fe18 	bl	8000fd4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e06e      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d010      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d208      	bcs.n	80023f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	492b      	ldr	r1, [pc, #172]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d210      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	4923      	ldr	r1, [pc, #140]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_ClockConfig+0x1ec>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e036      	b.n	8002494 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	4918      	ldr	r1, [pc, #96]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4910      	ldr	r1, [pc, #64]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002464:	f000 f824 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	490b      	ldr	r1, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1fc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fd53 	bl	8000f34 <HAL_InitTick>
 800248e:	4603      	mov	r3, r0
 8002490:	72fb      	strb	r3, [r7, #11]

  return status;
 8002492:	7afb      	ldrb	r3, [r7, #11]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	0800a038 	.word	0x0800a038
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x34>
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11e      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e004      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d101      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d134      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0xa6>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d003      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xac>
 8002554:	e005      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002558:	617b      	str	r3, [r7, #20]
      break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800255e:	617b      	str	r3, [r7, #20]
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	617b      	str	r3, [r7, #20]
      break;
 8002566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	3301      	adds	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0e5b      	lsrs	r3, r3, #25
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	3301      	adds	r3, #1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025a8:	69bb      	ldr	r3, [r7, #24]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	0800a050 	.word	0x0800a050
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	0800a048 	.word	0x0800a048

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002610:	f7ff ffda 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0adb      	lsrs	r3, r3, #11
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	0800a048 	.word	0x0800a048

08002638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9ee 	bl	8001a30 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
 8002656:	e014      	b.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff f9de 	bl	8001a30 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002688:	d10b      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d919      	bls.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2ba0      	cmp	r3, #160	; 0xa0
 8002694:	d902      	bls.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e013      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e010      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e00a      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d102      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e004      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d101      	bne.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d041      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800271c:	d02a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800271e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002722:	d824      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800272a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800272e:	d81e      	bhi.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002738:	d010      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800273a:	e018      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800273c:	4b86      	ldr	r3, [pc, #536]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a85      	ldr	r2, [pc, #532]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002748:	e015      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fabb 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800275a:	e00c      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3320      	adds	r3, #32
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fba6 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 8002768:	4603      	mov	r3, r0
 800276a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276c:	e003      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	74fb      	strb	r3, [r7, #19]
      break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277c:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800278a:	4973      	ldr	r1, [pc, #460]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002792:	e001      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d041      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027ac:	d02a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027b2:	d824      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027be:	d81e      	bhi.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d010      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ca:	e018      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027cc:	4b62      	ldr	r3, [pc, #392]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a61      	ldr	r2, [pc, #388]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d8:	e015      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa73 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ea:	e00c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3320      	adds	r3, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 fb5e 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027fc:	e003      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	74fb      	strb	r3, [r7, #19]
      break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800280c:	4b52      	ldr	r3, [pc, #328]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281a:	494f      	ldr	r1, [pc, #316]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002822:	e001      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a0 	beq.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	4a40      	ldr	r2, [pc, #256]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	; 0x58
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002878:	f7fe fbac 	bl	8000fd4 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287e:	e009      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002880:	f7fe fba8 	bl	8000fd4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	74fb      	strb	r3, [r7, #19]
        break;
 8002892:	e005      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ef      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d15c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d019      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	4a20      	ldr	r2, [pc, #128]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fb67 	bl	8000fd4 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	e00b      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe fb63 	bl	8000fd4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d902      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	74fb      	strb	r3, [r7, #19]
            break;
 8002920:	e006      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0ec      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002946:	4904      	ldr	r1, [pc, #16]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800294e:	e009      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	74bb      	strb	r3, [r7, #18]
 8002954:	e006      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002964:	7c7b      	ldrb	r3, [r7, #17]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	4a9d      	ldr	r2, [pc, #628]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002982:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f023 0203 	bic.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	4994      	ldr	r1, [pc, #592]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a4:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 020c 	bic.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	498c      	ldr	r1, [pc, #560]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029c6:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4983      	ldr	r1, [pc, #524]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e8:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	497b      	ldr	r1, [pc, #492]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a0a:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a18:	4972      	ldr	r1, [pc, #456]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	496a      	ldr	r1, [pc, #424]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4e:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	4961      	ldr	r1, [pc, #388]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a70:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	4959      	ldr	r1, [pc, #356]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	4950      	ldr	r1, [pc, #320]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	4948      	ldr	r1, [pc, #288]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad6:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	493f      	ldr	r1, [pc, #252]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d028      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	4937      	ldr	r1, [pc, #220]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
 8002b24:	e011      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f8c8 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	491f      	ldr	r1, [pc, #124]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b80:	60d3      	str	r3, [r2, #12]
 8002b82:	e011      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f899 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02b      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4908      	ldr	r1, [pc, #32]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd2:	d109      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
 8002be0:	e014      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f867 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d02f      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c18:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c26:	4928      	ldr	r1, [pc, #160]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f844 	bl	8002ccc <RCCEx_PLLSAI1_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	74bb      	strb	r3, [r7, #18]
 8002c52:	e011      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3320      	adds	r3, #32
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f925 	bl	8002eb4 <RCCEx_PLLSAI2_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c92:	490d      	ldr	r1, [pc, #52]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb6:	4904      	ldr	r1, [pc, #16]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cbe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000

08002ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ce6:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0203 	and.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10d      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d047      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e044      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d018      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x86>
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d825      	bhi.n	8002d70 <RCCEx_PLLSAI1_Config+0xa4>
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d002      	beq.n	8002d2e <RCCEx_PLLSAI1_Config+0x62>
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d009      	beq.n	8002d40 <RCCEx_PLLSAI1_Config+0x74>
 8002d2c:	e020      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2e:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11d      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e01a      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d40:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d116      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d50:	e013      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6e:	e006      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e004      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e002      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e000      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6819      	ldr	r1, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	4944      	ldr	r1, [pc, #272]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d17d      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe f90e 	bl	8000fd4 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dba:	e009      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dbc:	f7fe f90a 	bl	8000fd4 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8002dce:	e005      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd0:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ef      	bne.n	8002dbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d160      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	0211      	lsls	r1, r2, #8
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	0912      	lsrs	r2, r2, #4
 8002e00:	0452      	lsls	r2, r2, #17
 8002e02:	430a      	orrs	r2, r1
 8002e04:	492a      	ldr	r1, [pc, #168]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e027      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d112      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	0211      	lsls	r1, r2, #8
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6912      	ldr	r2, [r2, #16]
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0552      	lsls	r2, r2, #21
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	610b      	str	r3, [r1, #16]
 8002e36:	e011      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6892      	ldr	r2, [r2, #8]
 8002e48:	0211      	lsls	r1, r2, #8
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6952      	ldr	r2, [r2, #20]
 8002e4e:	0852      	lsrs	r2, r2, #1
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0652      	lsls	r2, r2, #25
 8002e54:	430a      	orrs	r2, r1
 8002e56:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f8b4 	bl	8000fd4 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e70:	f7fe f8b0 	bl	8000fd4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
          break;
 8002e82:	e005      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ef      	beq.n	8002e70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec2:	4b6a      	ldr	r3, [pc, #424]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d10d      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ee6:	4b61      	ldr	r3, [pc, #388]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d047      	beq.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	e044      	b.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d018      	beq.n	8002f3a <RCCEx_PLLSAI2_Config+0x86>
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d825      	bhi.n	8002f58 <RCCEx_PLLSAI2_Config+0xa4>
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d002      	beq.n	8002f16 <RCCEx_PLLSAI2_Config+0x62>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d009      	beq.n	8002f28 <RCCEx_PLLSAI2_Config+0x74>
 8002f14:	e020      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11d      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f26:	e01a      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e013      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f56:	e006      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e004      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	430b      	orrs	r3, r1
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d167      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a35      	ldr	r2, [pc, #212]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fe f81a 	bl	8000fd4 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fa2:	e009      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa4:	f7fe f816 	bl	8000fd4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb6:	e005      	b.n	8002fc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb8:	4b2c      	ldr	r3, [pc, #176]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ef      	bne.n	8002fa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14a      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	0211      	lsls	r1, r2, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	0912      	lsrs	r2, r2, #4
 8002fe8:	0452      	lsls	r2, r2, #17
 8002fea:	430a      	orrs	r2, r1
 8002fec:	491f      	ldr	r1, [pc, #124]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	614b      	str	r3, [r1, #20]
 8002ff2:	e011      	b.n	8003018 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ffc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6892      	ldr	r2, [r2, #8]
 8003004:	0211      	lsls	r1, r2, #8
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6912      	ldr	r2, [r2, #16]
 800300a:	0852      	lsrs	r2, r2, #1
 800300c:	3a01      	subs	r2, #1
 800300e:	0652      	lsls	r2, r2, #25
 8003010:	430a      	orrs	r2, r1
 8003012:	4916      	ldr	r1, [pc, #88]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fd ffd6 	bl	8000fd4 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800302a:	e009      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800302c:	f7fd ffd2 	bl	8000fd4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d902      	bls.n	8003040 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	73fb      	strb	r3, [r7, #15]
          break;
 800303e:	e005      	b.n	800304c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4904      	ldr	r1, [pc, #16]	; (800306c <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e095      	b.n	80031ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d009      	beq.n	80030a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
 800309a:	e005      	b.n	80030a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fc1a 	bl	80008fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e8:	d902      	bls.n	80030f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	e002      	b.n	80030f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030fe:	d007      	beq.n	8003110 <HAL_SPI_Init+0xa0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	ea42 0103 	orr.w	r1, r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0204 	and.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800318c:	ea42 0103 	orr.w	r1, r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_SPI_Transmit+0x22>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e158      	b.n	800348a <HAL_SPI_Transmit+0x2d4>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e0:	f7fd fef8 	bl	8000fd4 <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fa:	e13d      	b.n	8003478 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Transmit+0x52>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320c:	e134      	b.n	8003478 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003258:	d10f      	bne.n	800327a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003278:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d007      	beq.n	8003298 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032a0:	d94b      	bls.n	800333a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Transmit+0xfa>
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d13e      	bne.n	800332e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032d4:	e02b      	b.n	800332e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d112      	bne.n	800330a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003308:	e011      	b.n	800332e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800330a:	f7fd fe63 	bl	8000fd4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d803      	bhi.n	8003322 <HAL_SPI_Transmit+0x16c>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003320:	d102      	bne.n	8003328 <HAL_SPI_Transmit+0x172>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800332c:	e0a4      	b.n	8003478 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ce      	bne.n	80032d6 <HAL_SPI_Transmit+0x120>
 8003338:	e07c      	b.n	8003434 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Transmit+0x192>
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d170      	bne.n	800342a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d912      	bls.n	8003378 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	881a      	ldrh	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	1c9a      	adds	r2, r3, #2
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b02      	subs	r3, #2
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003376:	e058      	b.n	800342a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800339e:	e044      	b.n	800342a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d12b      	bne.n	8003406 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d912      	bls.n	80033de <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b02      	subs	r3, #2
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033dc:	e025      	b.n	800342a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003404:	e011      	b.n	800342a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003406:	f7fd fde5 	bl	8000fd4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d803      	bhi.n	800341e <HAL_SPI_Transmit+0x268>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Transmit+0x26e>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003428:	e026      	b.n	8003478 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1b5      	bne.n	80033a0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fce3 	bl	8003e04 <SPI_EndRxTxTransaction>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e000      	b.n	8003478 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003488:	7ffb      	ldrb	r3, [r7, #31]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af02      	add	r7, sp, #8
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d112      	bne.n	80034d6 <HAL_SPI_Receive+0x44>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10e      	bne.n	80034d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2204      	movs	r2, #4
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034c0:	88fa      	ldrh	r2, [r7, #6]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f910 	bl	80036f2 <HAL_SPI_TransmitReceive>
 80034d2:	4603      	mov	r3, r0
 80034d4:	e109      	b.n	80036ea <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_SPI_Receive+0x52>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e102      	b.n	80036ea <HAL_SPI_Receive+0x258>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ec:	f7fd fd72 	bl	8000fd4 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003502:	e0e9      	b.n	80036d8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_SPI_Receive+0x7e>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003514:	e0e0      	b.n	80036d8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2204      	movs	r2, #4
 800351a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003560:	d908      	bls.n	8003574 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e007      	b.n	8003584 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d10f      	bne.n	80035ae <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d007      	beq.n	80035cc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035d4:	d867      	bhi.n	80036a6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035d6:	e030      	b.n	800363a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d117      	bne.n	8003616 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f103 020c 	add.w	r2, r3, #12
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	7812      	ldrb	r2, [r2, #0]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003614:	e011      	b.n	800363a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003616:	f7fd fcdd 	bl	8000fd4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d803      	bhi.n	800362e <HAL_SPI_Receive+0x19c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362c:	d102      	bne.n	8003634 <HAL_SPI_Receive+0x1a2>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003638:	e04e      	b.n	80036d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1c8      	bne.n	80035d8 <HAL_SPI_Receive+0x146>
 8003646:	e034      	b.n	80036b2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d115      	bne.n	8003682 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	b292      	uxth	r2, r2
 8003662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003680:	e011      	b.n	80036a6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003682:	f7fd fca7 	bl	8000fd4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d803      	bhi.n	800369a <HAL_SPI_Receive+0x208>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003698:	d102      	bne.n	80036a0 <HAL_SPI_Receive+0x20e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036a4:	e018      	b.n	80036d8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1ca      	bne.n	8003648 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fb4c 	bl	8003d54 <SPI_EndRxTransaction>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
 80036d4:	e000      	b.n	80036d8 <HAL_SPI_Receive+0x246>
  }

error :
 80036d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08a      	sub	sp, #40	; 0x28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x26>
 8003714:	2302      	movs	r3, #2
 8003716:	e1fb      	b.n	8003b10 <HAL_SPI_TransmitReceive+0x41e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003720:	f7fd fc58 	bl	8000fd4 <HAL_GetTick>
 8003724:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800372c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800373c:	7efb      	ldrb	r3, [r7, #27]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d00e      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x6e>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003748:	d106      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x66>
 8003752:	7efb      	ldrb	r3, [r7, #27]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d003      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800375e:	e1cd      	b.n	8003afc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x80>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_SPI_TransmitReceive+0x80>
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003778:	e1c0      	b.n	8003afc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2205      	movs	r2, #5
 800378a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	887a      	ldrh	r2, [r7, #2]
 80037a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	887a      	ldrh	r2, [r7, #2]
 80037ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d0:	d802      	bhi.n	80037d8 <HAL_SPI_TransmitReceive+0xe6>
 80037d2:	8a3b      	ldrh	r3, [r7, #16]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d908      	bls.n	80037ea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	e007      	b.n	80037fa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037f8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d007      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003820:	d97c      	bls.n	800391c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x13e>
 800382a:	8a7b      	ldrh	r3, [r7, #18]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d169      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003854:	e056      	b.n	8003904 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d11b      	bne.n	800389c <HAL_SPI_TransmitReceive+0x1aa>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_SPI_TransmitReceive+0x1aa>
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	2b01      	cmp	r3, #1
 8003872:	d113      	bne.n	800389c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d11c      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x1f2>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	b292      	uxth	r2, r2
 80038c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e0:	2301      	movs	r3, #1
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038e4:	f7fd fb76 	bl	8000fd4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d807      	bhi.n	8003904 <HAL_SPI_TransmitReceive+0x212>
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038fa:	d003      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003902:	e0fb      	b.n	8003afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1a3      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x164>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d19d      	bne.n	8003856 <HAL_SPI_TransmitReceive+0x164>
 800391a:	e0df      	b.n	8003adc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_SPI_TransmitReceive+0x23a>
 8003924:	8a7b      	ldrh	r3, [r7, #18]
 8003926:	2b01      	cmp	r3, #1
 8003928:	f040 80cb 	bne.w	8003ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d912      	bls.n	800395c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	1c9a      	adds	r2, r3, #2
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b02      	subs	r3, #2
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395a:	e0b2      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003982:	e09e      	b.n	8003ac2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d134      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x30a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02f      	beq.n	80039fc <HAL_SPI_TransmitReceive+0x30a>
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d12c      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d912      	bls.n	80039d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b02      	subs	r3, #2
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039d0:	e012      	b.n	80039f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d148      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x3aa>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d042      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d923      	bls.n	8003a6a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	b292      	uxth	r2, r2
 8003a2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b02      	subs	r3, #2
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d81f      	bhi.n	8003a98 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	e016      	b.n	8003a98 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f103 020c 	add.w	r2, r3, #12
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a9c:	f7fd fa9a 	bl	8000fd4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d803      	bhi.n	8003ab4 <HAL_SPI_TransmitReceive+0x3c2>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x3c8>
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003ac0:	e01c      	b.n	8003afc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f47f af5b 	bne.w	8003984 <HAL_SPI_TransmitReceive+0x292>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f47f af54 	bne.w	8003984 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f98f 	bl	8003e04 <SPI_EndRxTxTransaction>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
 8003af8:	e000      	b.n	8003afc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003afa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b28:	f7fd fa54 	bl	8000fd4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b38:	f7fd fa4c 	bl	8000fd4 <HAL_GetTick>
 8003b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	015b      	lsls	r3, r3, #5
 8003b44:	0d1b      	lsrs	r3, r3, #20
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	fb02 f303 	mul.w	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b4e:	e054      	b.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b56:	d050      	beq.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b58:	f7fd fa3c 	bl	8000fd4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d902      	bls.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d13d      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b86:	d111      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b90:	d004      	beq.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9a:	d107      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d10f      	bne.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e017      	b.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d19b      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000000 	.word	0x20000000

08003c28 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	; 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c3a:	f7fd f9cb 	bl	8000fd4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c4a:	f7fd f9c3 	bl	8000fd4 <HAL_GetTick>
 8003c4e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c58:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00da      	lsls	r2, r3, #3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	0d1b      	lsrs	r3, r3, #20
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c70:	e060      	b.n	8003d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c78:	d107      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c90:	d050      	beq.n	8003d34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c92:	f7fd f99f 	bl	8000fd4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d902      	bls.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d13d      	bne.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc0:	d111      	bne.n	8003ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d004      	beq.n	8003cd6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d107      	bne.n	8003ce6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d10f      	bne.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e010      	b.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d196      	bne.n	8003c72 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3728      	adds	r7, #40	; 0x28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d68:	d111      	bne.n	8003d8e <SPI_EndRxTransaction+0x3a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d004      	beq.n	8003d7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d107      	bne.n	8003d8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff febd 	bl	8003b18 <SPI_WaitFlagStateUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e023      	b.n	8003dfc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbc:	d11d      	bne.n	8003dfa <SPI_EndRxTransaction+0xa6>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc6:	d004      	beq.n	8003dd2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d113      	bne.n	8003dfa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff ff22 	bl	8003c28 <SPI_WaitFifoStateUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e000      	b.n	8003dfc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff03 	bl	8003c28 <SPI_WaitFifoStateUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e027      	b.n	8003e88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff fe68 	bl	8003b18 <SPI_WaitFlagStateUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e014      	b.n	8003e88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fedc 	bl	8003c28 <SPI_WaitFifoStateUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e000      	b.n	8003e88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e040      	b.n	8003f24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fc ff24 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f940 	bl	8004154 <UART_SetConfig>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e022      	b.n	8003f24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fbec 	bl	80046c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fc73 	bl	8004808 <UART_CheckIdleState>
 8003f22:	4603      	mov	r3, r0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	f040 8082 	bne.w	800404a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_UART_Transmit+0x26>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07a      	b.n	800404c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_UART_Transmit+0x38>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e073      	b.n	800404c <HAL_UART_Transmit+0x120>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2221      	movs	r2, #33	; 0x21
 8003f78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7a:	f7fd f82b 	bl	8000fd4 <HAL_GetTick>
 8003f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	d108      	bne.n	8003fac <HAL_UART_Transmit+0x80>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e003      	b.n	8003fb4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fbc:	e02d      	b.n	800401a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2180      	movs	r1, #128	; 0x80
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fc66 	bl	800489a <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e039      	b.n	800404c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fea:	b292      	uxth	r2, r2
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e008      	b.n	8004008 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b292      	uxth	r2, r2
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3301      	adds	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1cb      	bne.n	8003fbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	2140      	movs	r1, #64	; 0x40
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fc32 	bl	800489a <UART_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e005      	b.n	800404c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800404a:	2302      	movs	r3, #2
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004066:	2b20      	cmp	r3, #32
 8004068:	d142      	bne.n	80040f0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_UART_Receive_DMA+0x22>
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e03b      	b.n	80040f2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UART_Receive_DMA+0x34>
 8004084:	2302      	movs	r3, #2
 8004086:	e034      	b.n	80040f2 <HAL_UART_Receive_DMA+0x9e>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a18      	ldr	r2, [pc, #96]	; (80040fc <HAL_UART_Receive_DMA+0xa8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01f      	beq.n	80040e0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	613b      	str	r3, [r7, #16]
   return(result);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	623b      	str	r3, [r7, #32]
 80040ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69f9      	ldr	r1, [r7, #28]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fc9c 	bl	8004a24 <UART_Start_Receive_DMA>
 80040ec:	4603      	mov	r3, r0
 80040ee:	e000      	b.n	80040f2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3728      	adds	r7, #40	; 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40008000 	.word	0x40008000

08004100 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b08a      	sub	sp, #40	; 0x28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4313      	orrs	r3, r2
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4ba4      	ldr	r3, [pc, #656]	; (8004414 <UART_SetConfig+0x2c0>)
 8004184:	4013      	ands	r3, r2
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800418c:	430b      	orrs	r3, r1
 800418e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a99      	ldr	r2, [pc, #612]	; (8004418 <UART_SetConfig+0x2c4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	4313      	orrs	r3, r2
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a90      	ldr	r2, [pc, #576]	; (800441c <UART_SetConfig+0x2c8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d126      	bne.n	800422c <UART_SetConfig+0xd8>
 80041de:	4b90      	ldr	r3, [pc, #576]	; (8004420 <UART_SetConfig+0x2cc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d81b      	bhi.n	8004224 <UART_SetConfig+0xd0>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <UART_SetConfig+0xa0>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004215 	.word	0x08004215
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800421d 	.word	0x0800421d
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e116      	b.n	800443a <UART_SetConfig+0x2e6>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e112      	b.n	800443a <UART_SetConfig+0x2e6>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e10e      	b.n	800443a <UART_SetConfig+0x2e6>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e10a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e106      	b.n	800443a <UART_SetConfig+0x2e6>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7c      	ldr	r2, [pc, #496]	; (8004424 <UART_SetConfig+0x2d0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d138      	bne.n	80042a8 <UART_SetConfig+0x154>
 8004236:	4b7a      	ldr	r3, [pc, #488]	; (8004420 <UART_SetConfig+0x2cc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d82d      	bhi.n	80042a0 <UART_SetConfig+0x14c>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0xf8>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	08004281 	.word	0x08004281
 8004250:	080042a1 	.word	0x080042a1
 8004254:	080042a1 	.word	0x080042a1
 8004258:	080042a1 	.word	0x080042a1
 800425c:	08004291 	.word	0x08004291
 8004260:	080042a1 	.word	0x080042a1
 8004264:	080042a1 	.word	0x080042a1
 8004268:	080042a1 	.word	0x080042a1
 800426c:	08004289 	.word	0x08004289
 8004270:	080042a1 	.word	0x080042a1
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042a1 	.word	0x080042a1
 800427c:	08004299 	.word	0x08004299
 8004280:	2300      	movs	r3, #0
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e0d8      	b.n	800443a <UART_SetConfig+0x2e6>
 8004288:	2302      	movs	r3, #2
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e0d4      	b.n	800443a <UART_SetConfig+0x2e6>
 8004290:	2304      	movs	r3, #4
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e0d0      	b.n	800443a <UART_SetConfig+0x2e6>
 8004298:	2308      	movs	r3, #8
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e0cc      	b.n	800443a <UART_SetConfig+0x2e6>
 80042a0:	2310      	movs	r3, #16
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e0c8      	b.n	800443a <UART_SetConfig+0x2e6>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <UART_SetConfig+0x2d4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d125      	bne.n	80042fe <UART_SetConfig+0x1aa>
 80042b2:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <UART_SetConfig+0x2cc>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d016      	beq.n	80042ee <UART_SetConfig+0x19a>
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d818      	bhi.n	80042f6 <UART_SetConfig+0x1a2>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d00a      	beq.n	80042de <UART_SetConfig+0x18a>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d814      	bhi.n	80042f6 <UART_SetConfig+0x1a2>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <UART_SetConfig+0x182>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d008      	beq.n	80042e6 <UART_SetConfig+0x192>
 80042d4:	e00f      	b.n	80042f6 <UART_SetConfig+0x1a2>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042dc:	e0ad      	b.n	800443a <UART_SetConfig+0x2e6>
 80042de:	2302      	movs	r3, #2
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e4:	e0a9      	b.n	800443a <UART_SetConfig+0x2e6>
 80042e6:	2304      	movs	r3, #4
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ec:	e0a5      	b.n	800443a <UART_SetConfig+0x2e6>
 80042ee:	2308      	movs	r3, #8
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f4:	e0a1      	b.n	800443a <UART_SetConfig+0x2e6>
 80042f6:	2310      	movs	r3, #16
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fc:	e09d      	b.n	800443a <UART_SetConfig+0x2e6>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4a      	ldr	r2, [pc, #296]	; (800442c <UART_SetConfig+0x2d8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d125      	bne.n	8004354 <UART_SetConfig+0x200>
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <UART_SetConfig+0x2cc>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004312:	2bc0      	cmp	r3, #192	; 0xc0
 8004314:	d016      	beq.n	8004344 <UART_SetConfig+0x1f0>
 8004316:	2bc0      	cmp	r3, #192	; 0xc0
 8004318:	d818      	bhi.n	800434c <UART_SetConfig+0x1f8>
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d00a      	beq.n	8004334 <UART_SetConfig+0x1e0>
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d814      	bhi.n	800434c <UART_SetConfig+0x1f8>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <UART_SetConfig+0x1d8>
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d008      	beq.n	800433c <UART_SetConfig+0x1e8>
 800432a:	e00f      	b.n	800434c <UART_SetConfig+0x1f8>
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e082      	b.n	800443a <UART_SetConfig+0x2e6>
 8004334:	2302      	movs	r3, #2
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e07e      	b.n	800443a <UART_SetConfig+0x2e6>
 800433c:	2304      	movs	r3, #4
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e07a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004344:	2308      	movs	r3, #8
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e076      	b.n	800443a <UART_SetConfig+0x2e6>
 800434c:	2310      	movs	r3, #16
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e072      	b.n	800443a <UART_SetConfig+0x2e6>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a35      	ldr	r2, [pc, #212]	; (8004430 <UART_SetConfig+0x2dc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d12a      	bne.n	80043b4 <UART_SetConfig+0x260>
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <UART_SetConfig+0x2cc>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d01a      	beq.n	80043a4 <UART_SetConfig+0x250>
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d81b      	bhi.n	80043ac <UART_SetConfig+0x258>
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d00c      	beq.n	8004394 <UART_SetConfig+0x240>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d815      	bhi.n	80043ac <UART_SetConfig+0x258>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <UART_SetConfig+0x238>
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d008      	beq.n	800439c <UART_SetConfig+0x248>
 800438a:	e00f      	b.n	80043ac <UART_SetConfig+0x258>
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e052      	b.n	800443a <UART_SetConfig+0x2e6>
 8004394:	2302      	movs	r3, #2
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e04e      	b.n	800443a <UART_SetConfig+0x2e6>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e04a      	b.n	800443a <UART_SetConfig+0x2e6>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e046      	b.n	800443a <UART_SetConfig+0x2e6>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e042      	b.n	800443a <UART_SetConfig+0x2e6>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	; (8004418 <UART_SetConfig+0x2c4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d13a      	bne.n	8004434 <UART_SetConfig+0x2e0>
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <UART_SetConfig+0x2cc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043cc:	d01a      	beq.n	8004404 <UART_SetConfig+0x2b0>
 80043ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043d2:	d81b      	bhi.n	800440c <UART_SetConfig+0x2b8>
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d00c      	beq.n	80043f4 <UART_SetConfig+0x2a0>
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043de:	d815      	bhi.n	800440c <UART_SetConfig+0x2b8>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <UART_SetConfig+0x298>
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	d008      	beq.n	80043fc <UART_SetConfig+0x2a8>
 80043ea:	e00f      	b.n	800440c <UART_SetConfig+0x2b8>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e022      	b.n	800443a <UART_SetConfig+0x2e6>
 80043f4:	2302      	movs	r3, #2
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e01e      	b.n	800443a <UART_SetConfig+0x2e6>
 80043fc:	2304      	movs	r3, #4
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e01a      	b.n	800443a <UART_SetConfig+0x2e6>
 8004404:	2308      	movs	r3, #8
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e016      	b.n	800443a <UART_SetConfig+0x2e6>
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e012      	b.n	800443a <UART_SetConfig+0x2e6>
 8004414:	efff69f3 	.word	0xefff69f3
 8004418:	40008000 	.word	0x40008000
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	40004800 	.word	0x40004800
 800442c:	40004c00 	.word	0x40004c00
 8004430:	40005000 	.word	0x40005000
 8004434:	2310      	movs	r3, #16
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a9f      	ldr	r2, [pc, #636]	; (80046bc <UART_SetConfig+0x568>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d17a      	bne.n	800453a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004448:	2b08      	cmp	r3, #8
 800444a:	d824      	bhi.n	8004496 <UART_SetConfig+0x342>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x300>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004497 	.word	0x08004497
 800445c:	08004481 	.word	0x08004481
 8004460:	08004497 	.word	0x08004497
 8004464:	08004487 	.word	0x08004487
 8004468:	08004497 	.word	0x08004497
 800446c:	08004497 	.word	0x08004497
 8004470:	08004497 	.word	0x08004497
 8004474:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe f8b2 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <UART_SetConfig+0x56c>)
 8004482:	61fb      	str	r3, [r7, #28]
        break;
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fe f813 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800448a:	61f8      	str	r0, [r7, #28]
        break;
 800448c:	e009      	b.n	80044a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e005      	b.n	80044a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80fb 	beq.w	80046a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d305      	bcc.n	80044c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d903      	bls.n	80044ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044cc:	e0e8      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2200      	movs	r2, #0
 80044d2:	461c      	mov	r4, r3
 80044d4:	4615      	mov	r5, r2
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	022b      	lsls	r3, r5, #8
 80044e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044e4:	0222      	lsls	r2, r4, #8
 80044e6:	68f9      	ldr	r1, [r7, #12]
 80044e8:	6849      	ldr	r1, [r1, #4]
 80044ea:	0849      	lsrs	r1, r1, #1
 80044ec:	2000      	movs	r0, #0
 80044ee:	4688      	mov	r8, r1
 80044f0:	4681      	mov	r9, r0
 80044f2:	eb12 0a08 	adds.w	sl, r2, r8
 80044f6:	eb43 0b09 	adc.w	fp, r3, r9
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	f7fb fec8 	bl	80002a0 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4613      	mov	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451e:	d308      	bcc.n	8004532 <UART_SetConfig+0x3de>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004526:	d204      	bcs.n	8004532 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	60da      	str	r2, [r3, #12]
 8004530:	e0b6      	b.n	80046a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004538:	e0b2      	b.n	80046a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	d15e      	bne.n	8004602 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004548:	2b08      	cmp	r3, #8
 800454a:	d828      	bhi.n	800459e <UART_SetConfig+0x44a>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x400>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004579 	.word	0x08004579
 8004558:	08004581 	.word	0x08004581
 800455c:	08004589 	.word	0x08004589
 8004560:	0800459f 	.word	0x0800459f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
 8004574:	08004597 	.word	0x08004597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe f832 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e014      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7fe f844 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004584:	61f8      	str	r0, [r7, #28]
        break;
 8004586:	e010      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <UART_SetConfig+0x56c>)
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e00d      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458e:	f7fd ff8f 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8004592:	61f8      	str	r0, [r7, #28]
        break;
 8004594:	e009      	b.n	80045aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d077      	beq.n	80046a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005a      	lsls	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	441a      	add	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b0f      	cmp	r3, #15
 80045ca:	d916      	bls.n	80045fa <UART_SetConfig+0x4a6>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d2:	d212      	bcs.n	80045fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	8afb      	ldrh	r3, [r7, #22]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	8afa      	ldrh	r2, [r7, #22]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	e052      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004600:	e04e      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004606:	2b08      	cmp	r3, #8
 8004608:	d827      	bhi.n	800465a <UART_SetConfig+0x506>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <UART_SetConfig+0x4bc>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	0800465b 	.word	0x0800465b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800465b 	.word	0x0800465b
 8004628:	0800465b 	.word	0x0800465b
 800462c:	0800465b 	.word	0x0800465b
 8004630:	08004653 	.word	0x08004653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fd ffd4 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fd ffe6 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8004640:	61f8      	str	r0, [r7, #28]
        break;
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <UART_SetConfig+0x56c>)
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e00d      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464a:	f7fd ff31 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800464e:	61f8      	str	r0, [r7, #28]
        break;
 8004650:	e009      	b.n	8004666 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e005      	b.n	8004666 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004664:	bf00      	nop
    }

    if (pclk != 0U)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d019      	beq.n	80046a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085a      	lsrs	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b0f      	cmp	r3, #15
 8004684:	d909      	bls.n	800469a <UART_SetConfig+0x546>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468c:	d205      	bcs.n	800469a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	e002      	b.n	80046a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3728      	adds	r7, #40	; 0x28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ba:	bf00      	nop
 80046bc:	40008000 	.word	0x40008000
 80046c0:	00f42400 	.word	0x00f42400

080046c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c2:	d10a      	bne.n	80047da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004818:	f7fc fbdc 	bl	8000fd4 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b08      	cmp	r3, #8
 800482a:	d10e      	bne.n	800484a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800482c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f82d 	bl	800489a <UART_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e023      	b.n	8004892 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d10e      	bne.n	8004876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f817 	bl	800489a <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e00d      	b.n	8004892 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b09c      	sub	sp, #112	; 0x70
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048aa:	e0a5      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b2:	f000 80a1 	beq.w	80049f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fc fb8d 	bl	8000fd4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <UART_WaitOnFlagUntilTimeout+0x32>
 80048c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d13e      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e0:	667b      	str	r3, [r7, #100]	; 0x64
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e6      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	663b      	str	r3, [r7, #96]	; 0x60
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800491e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e067      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d04f      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004966:	d147      	bne.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004970:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3308      	adds	r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	613b      	str	r3, [r7, #16]
   return(result);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3308      	adds	r3, #8
 80049c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049c4:	623a      	str	r2, [r7, #32]
 80049c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	e841 2300 	strex	r3, r2, [r1]
 80049d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e5      	bne.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e010      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f43f af4a 	beq.w	80048ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3770      	adds	r7, #112	; 0x70
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b096      	sub	sp, #88	; 0x58
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2222      	movs	r2, #34	; 0x22
 8004a4c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02b      	beq.n	8004aae <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	4a42      	ldr	r2, [pc, #264]	; (8004b64 <UART_Start_Receive_DMA+0x140>)
 8004a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a41      	ldr	r2, [pc, #260]	; (8004b68 <UART_Start_Receive_DMA+0x144>)
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <UART_Start_Receive_DMA+0x148>)
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	2200      	movs	r2, #0
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	4619      	mov	r1, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	461a      	mov	r2, r3
 8004a88:	88fb      	ldrh	r3, [r7, #6]
 8004a8a:	f7fc fc9d 	bl	80013c8 <HAL_DMA_Start_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2210      	movs	r2, #16
 8004a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e055      	b.n	8004b5a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d018      	beq.n	8004af0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ade:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e6      	bne.n	8004abe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3308      	adds	r3, #8
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b10:	637a      	str	r2, [r7, #52]	; 0x34
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	613b      	str	r3, [r7, #16]
   return(result);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b44:	623a      	str	r2, [r7, #32]
 8004b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	69f9      	ldr	r1, [r7, #28]
 8004b4a:	6a3a      	ldr	r2, [r7, #32]
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3758      	adds	r7, #88	; 0x58
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	08004c83 	.word	0x08004c83
 8004b68:	08004da7 	.word	0x08004da7
 8004b6c:	08004ddf 	.word	0x08004ddf

08004b70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	; 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6979      	ldr	r1, [r7, #20]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e6      	bne.n	8004b78 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004bb0:	bf00      	nop
 8004bb2:	3724      	adds	r7, #36	; 0x24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b095      	sub	sp, #84	; 0x54
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3308      	adds	r3, #8
 8004c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d118      	bne.n	8004c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	647b      	str	r3, [r7, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c76:	bf00      	nop
 8004c78:	3754      	adds	r7, #84	; 0x54
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b09c      	sub	sp, #112	; 0x70
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d170      	bne.n	8004d80 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	667b      	str	r3, [r7, #100]	; 0x64
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cf8:	647a      	str	r2, [r7, #68]	; 0x44
 8004cfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3308      	adds	r3, #8
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	663b      	str	r3, [r7, #96]	; 0x60
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d118      	bne.n	8004d80 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0310 	bic.w	r3, r3, #16
 8004d62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d92:	f7ff f9d3 	bl	800413c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d96:	e002      	b.n	8004d9e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004d98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d9a:	f7ff f9b1 	bl	8004100 <HAL_UART_RxCpltCallback>
}
 8004d9e:	bf00      	nop
 8004da0:	3770      	adds	r7, #112	; 0x70
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d109      	bne.n	8004dd0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff f9b7 	bl	800413c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dce:	e002      	b.n	8004dd6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff f99f 	bl	8004114 <HAL_UART_RxHalfCpltCallback>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d109      	bne.n	8004e1a <UART_DMAError+0x3c>
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b21      	cmp	r3, #33	; 0x21
 8004e0a:	d106      	bne.n	8004e1a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004e14:	6978      	ldr	r0, [r7, #20]
 8004e16:	f7ff feab 	bl	8004b70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d109      	bne.n	8004e3c <UART_DMAError+0x5e>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b22      	cmp	r3, #34	; 0x22
 8004e2c:	d106      	bne.n	8004e3c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f7ff fec0 	bl	8004bbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e42:	f043 0210 	orr.w	r2, r3, #16
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	f7ff f96b 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <pfStreamForErase>:
/*
 * @brief указатель-функция заглушка, если передать setCallbackInputStream указатель на нее
 * 			то вместо записи данных из потока, ячейки внешней флеш остануться затертыми
 *	@ret возращает TRUE, что-бы небыло простоя ожидания данных в автомате NVM
 */
bool_t pfStreamForErase(uint8_t* retByte){
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	*retByte = CLEAR_NVM_SPI_BYTE_VOLUE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	22ff      	movs	r2, #255	; 0xff
 8004e66:	701a      	strb	r2, [r3, #0]
	return TRUE;
 8004e68:	2301      	movs	r3, #1
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <initMatchNVM25Q80>:

static void initMatchNVM25Q80(){
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
	pfGetCharStream = NULL;//сбросить все и вся, если сбой! или комплит ресив
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <initMatchNVM25Q80+0x14>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	20001424 	.word	0x20001424

08004e90 <flushBuffSector.0>:
				eraseSector4kFlash25q(FlashProc.iSectorAddr);
			}
			stateNvm = WAIT_NVM_DATA;
		}break;
		//овобождает буф сектора, инкрементирует п.10,п.11,п.12
		void flushBuffSector(){ //используется в различных частях, дублировать нельзя, из-за возможности допустить ошибку ( сост. авт. WAIT_NVM_DATA & NVM_STREAM_RECIVE_COMPLITE)
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	f8c7 c004 	str.w	ip, [r7, #4]
			dbug("flushBuffSector");
 8004e9a:	4810      	ldr	r0, [pc, #64]	; (8004edc <flushBuffSector.0+0x4c>)
 8004e9c:	f002 fb24 	bl	80074e8 <iprintf>
				writeSectorFlash25q( FlashProc.iSectorAddr
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <flushBuffSector.0+0x50>)
 8004ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004eac:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <flushBuffSector.0+0x50>)
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fa34 	bl	800631c <writeSectorFlash25q>
									, FlashProc.CopyInstanceSector
									, MIN_SECTOR_FLASH_ERASE );
				FlashProc.iAddr = 0 ;
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <flushBuffSector.0+0x50>)
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6053      	str	r3, [r2, #4]
				FlashProc.iSectorAddr += MIN_SECTOR_FLASH_ERASE;
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <flushBuffSector.0+0x50>)
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <flushBuffSector.0+0x50>)
 8004ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ed2:	6013      	str	r3, [r2, #0]
			}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	08008a50 	.word	0x08008a50
 8004ee0:	2000041c 	.word	0x2000041c

08004ee4 <threadNVM25Q80>:
bool_t threadNVM25Q80(){
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	f107 0310 	add.w	r3, r7, #16
 8004eee:	607b      	str	r3, [r7, #4]
	if ( stateNvm != mStateNvm ){
 8004ef0:	4bb1      	ldr	r3, [pc, #708]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	4bb1      	ldr	r3, [pc, #708]	; (80051bc <threadNVM25Q80+0x2d8>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d031      	beq.n	8004f60 <threadNVM25Q80+0x7c>
		if (szStateNvm[NVM_END_INDEX]!=0){
 8004efc:	4bb0      	ldr	r3, [pc, #704]	; (80051c0 <threadNVM25Q80+0x2dc>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <threadNVM25Q80+0x4c>
			dbugerr("szStateNvm[] != NVM_END_INDEX ");
 8004f04:	48af      	ldr	r0, [pc, #700]	; (80051c4 <threadNVM25Q80+0x2e0>)
 8004f06:	f002 faef 	bl	80074e8 <iprintf>
 8004f0a:	2259      	movs	r2, #89	; 0x59
 8004f0c:	49ae      	ldr	r1, [pc, #696]	; (80051c8 <threadNVM25Q80+0x2e4>)
 8004f0e:	48af      	ldr	r0, [pc, #700]	; (80051cc <threadNVM25Q80+0x2e8>)
 8004f10:	f002 faea 	bl	80074e8 <iprintf>
 8004f14:	48ae      	ldr	r0, [pc, #696]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8004f16:	f002 fae7 	bl	80074e8 <iprintf>
 8004f1a:	f7fc f85b 	bl	8000fd4 <HAL_GetTick>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4619      	mov	r1, r3
 8004f22:	48ac      	ldr	r0, [pc, #688]	; (80051d4 <threadNVM25Q80+0x2f0>)
 8004f24:	f002 fae0 	bl	80074e8 <iprintf>
 8004f28:	48ab      	ldr	r0, [pc, #684]	; (80051d8 <threadNVM25Q80+0x2f4>)
 8004f2a:	f002 fadd 	bl	80074e8 <iprintf>
 8004f2e:	e7fe      	b.n	8004f2e <threadNVM25Q80+0x4a>
		mStateNvm = stateNvm;
 8004f30:	4ba1      	ldr	r3, [pc, #644]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	4ba1      	ldr	r3, [pc, #644]	; (80051bc <threadNVM25Q80+0x2d8>)
 8004f36:	701a      	strb	r2, [r3, #0]
		dbugnl4("Automat new state: [%s]",szStateNvm[mStateNvm]);
 8004f38:	48a5      	ldr	r0, [pc, #660]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8004f3a:	f002 fad5 	bl	80074e8 <iprintf>
 8004f3e:	f7fc f849 	bl	8000fd4 <HAL_GetTick>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4619      	mov	r1, r3
 8004f46:	48a3      	ldr	r0, [pc, #652]	; (80051d4 <threadNVM25Q80+0x2f0>)
 8004f48:	f002 face 	bl	80074e8 <iprintf>
 8004f4c:	4b9b      	ldr	r3, [pc, #620]	; (80051bc <threadNVM25Q80+0x2d8>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	4b9b      	ldr	r3, [pc, #620]	; (80051c0 <threadNVM25Q80+0x2dc>)
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	48a0      	ldr	r0, [pc, #640]	; (80051dc <threadNVM25Q80+0x2f8>)
 8004f5c:	f002 fac4 	bl	80074e8 <iprintf>
	switch (stateNvm){
 8004f60:	4b95      	ldr	r3, [pc, #596]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	f200 816b 	bhi.w	8005240 <threadNVM25Q80+0x35c>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <threadNVM25Q80+0x8c>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08005249 	.word	0x08005249
 8004f78:	08004fb3 	.word	0x08004fb3
 8004f7c:	08005241 	.word	0x08005241
 8004f80:	0800501d 	.word	0x0800501d
 8004f84:	0800518d 	.word	0x0800518d
 8004f88:	08005215 	.word	0x08005215
			initMatchNVM25Q80();
 8004f8c:	f7ff ff74 	bl	8004e78 <initMatchNVM25Q80>
			dbugnl("init NVM");
 8004f90:	488f      	ldr	r0, [pc, #572]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8004f92:	f002 faa9 	bl	80074e8 <iprintf>
 8004f96:	f7fc f81d 	bl	8000fd4 <HAL_GetTick>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	488d      	ldr	r0, [pc, #564]	; (80051d4 <threadNVM25Q80+0x2f0>)
 8004fa0:	f002 faa2 	bl	80074e8 <iprintf>
 8004fa4:	488e      	ldr	r0, [pc, #568]	; (80051e0 <threadNVM25Q80+0x2fc>)
 8004fa6:	f002 fa9f 	bl	80074e8 <iprintf>
			stateNvm = WAIT_INIT_NVM_AREA;
 8004faa:	4b83      	ldr	r3, [pc, #524]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
		}break;
 8004fb0:	e14b      	b.n	800524a <threadNVM25Q80+0x366>
			dbug("п.5 подготовка сектора");
 8004fb2:	488c      	ldr	r0, [pc, #560]	; (80051e4 <threadNVM25Q80+0x300>)
 8004fb4:	f002 fa98 	bl	80074e8 <iprintf>
			if (  ( FlashProc.iAddr !=0 )
 8004fb8:	4b8b      	ldr	r3, [pc, #556]	; (80051e8 <threadNVM25Q80+0x304>)
 8004fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <threadNVM25Q80+0xea>
				||  ( iNvm.numbsWrite < MIN_SECTOR_FLASH_ERASE )  ){
 8004fc4:	4b89      	ldr	r3, [pc, #548]	; (80051ec <threadNVM25Q80+0x308>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d222      	bcs.n	8005014 <threadNVM25Q80+0x130>
				dbugnl("вычитываем сектор addr = %d",FlashProc.iSectorAddr);
 8004fce:	4880      	ldr	r0, [pc, #512]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8004fd0:	f002 fa8a 	bl	80074e8 <iprintf>
 8004fd4:	f7fb fffe 	bl	8000fd4 <HAL_GetTick>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4619      	mov	r1, r3
 8004fdc:	487d      	ldr	r0, [pc, #500]	; (80051d4 <threadNVM25Q80+0x2f0>)
 8004fde:	f002 fa83 	bl	80074e8 <iprintf>
 8004fe2:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <threadNVM25Q80+0x304>)
 8004fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4880      	ldr	r0, [pc, #512]	; (80051f0 <threadNVM25Q80+0x30c>)
 8004fee:	f002 fa7b 	bl	80074e8 <iprintf>
				readBlockDataFlash25q(FlashProc.iSectorAddr
 8004ff2:	4b7d      	ldr	r3, [pc, #500]	; (80051e8 <threadNVM25Q80+0x304>)
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ffe:	497a      	ldr	r1, [pc, #488]	; (80051e8 <threadNVM25Q80+0x304>)
 8005000:	4618      	mov	r0, r3
 8005002:	f001 f8a1 	bl	8006148 <readBlockDataFlash25q>
				eraseSector4kFlash25q(FlashProc.iSectorAddr);
 8005006:	4b78      	ldr	r3, [pc, #480]	; (80051e8 <threadNVM25Q80+0x304>)
 8005008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f001 f9e4 	bl	80063dc <eraseSector4kFlash25q>
			stateNvm = WAIT_NVM_DATA;
 8005014:	4b68      	ldr	r3, [pc, #416]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8005016:	2204      	movs	r2, #4
 8005018:	701a      	strb	r2, [r3, #0]
		}break;
 800501a:	e116      	b.n	800524a <threadNVM25Q80+0x366>
		//
		case WAIT_NVM_DATA:{
			if ( pfGetCharStream != NULL ){
 800501c:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <threadNVM25Q80+0x310>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 809c 	beq.w	800515e <threadNVM25Q80+0x27a>
				while (  (*pfGetCharStream)(&byteToNvm)  ){
 8005026:	e091      	b.n	800514c <threadNVM25Q80+0x268>
//					byteReadyForExtern = TRUE;
					//здесь буду решать чего с этим byteToNvm из потока делать..

					FlashProc.CopyInstanceSector[FlashProc.iAddr]=byteToNvm;
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <threadNVM25Q80+0x304>)
 800502a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4a71      	ldr	r2, [pc, #452]	; (80051f8 <threadNVM25Q80+0x314>)
 8005032:	7811      	ldrb	r1, [r2, #0]
 8005034:	4a6c      	ldr	r2, [pc, #432]	; (80051e8 <threadNVM25Q80+0x304>)
 8005036:	54d1      	strb	r1, [r2, r3]
					FlashProc.iAddr++;
 8005038:	4b6b      	ldr	r3, [pc, #428]	; (80051e8 <threadNVM25Q80+0x304>)
 800503a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	3301      	adds	r3, #1
 8005042:	4a69      	ldr	r2, [pc, #420]	; (80051e8 <threadNVM25Q80+0x304>)
 8005044:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005048:	6053      	str	r3, [r2, #4]

					dbugnl4("getchar: %02x , addr = %lu , i=%u"
 800504a:	4861      	ldr	r0, [pc, #388]	; (80051d0 <threadNVM25Q80+0x2ec>)
 800504c:	f002 fa4c 	bl	80074e8 <iprintf>
 8005050:	f7fb ffc0 	bl	8000fd4 <HAL_GetTick>
 8005054:	4603      	mov	r3, r0
 8005056:	4619      	mov	r1, r3
 8005058:	485e      	ldr	r0, [pc, #376]	; (80051d4 <threadNVM25Q80+0x2f0>)
 800505a:	f002 fa45 	bl	80074e8 <iprintf>
 800505e:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <threadNVM25Q80+0x314>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4619      	mov	r1, r3
 8005064:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <threadNVM25Q80+0x304>)
 8005066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b5f      	ldr	r3, [pc, #380]	; (80051ec <threadNVM25Q80+0x308>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4862      	ldr	r0, [pc, #392]	; (80051fc <threadNVM25Q80+0x318>)
 8005072:	f002 fa39 	bl	80074e8 <iprintf>
							,byteToNvm,FlashProc.iAddr, iNvm.numbsWrite);

					if ( iNvm.numbsWrite != 0 ){
 8005076:	4b5d      	ldr	r3, [pc, #372]	; (80051ec <threadNVM25Q80+0x308>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <threadNVM25Q80+0x1a4>
						iNvm.numbsWrite--;
 800507e:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <threadNVM25Q80+0x308>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	4a59      	ldr	r2, [pc, #356]	; (80051ec <threadNVM25Q80+0x308>)
 8005086:	6053      	str	r3, [r2, #4]
					}
					if ( iNvm.numbsWrite >= ALL_SPI_FLASH_SIZE ){
 8005088:	4b58      	ldr	r3, [pc, #352]	; (80051ec <threadNVM25Q80+0x308>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005090:	d318      	bcc.n	80050c4 <threadNVM25Q80+0x1e0>
						iNvm.numbsWrite=0;
 8005092:	4b56      	ldr	r3, [pc, #344]	; (80051ec <threadNVM25Q80+0x308>)
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]
						dbugerr("упс, iNvm.numbsWrite >= ALL_SPI_FLASH_SIZE");
 8005098:	484a      	ldr	r0, [pc, #296]	; (80051c4 <threadNVM25Q80+0x2e0>)
 800509a:	f002 fa25 	bl	80074e8 <iprintf>
 800509e:	2291      	movs	r2, #145	; 0x91
 80050a0:	4949      	ldr	r1, [pc, #292]	; (80051c8 <threadNVM25Q80+0x2e4>)
 80050a2:	484a      	ldr	r0, [pc, #296]	; (80051cc <threadNVM25Q80+0x2e8>)
 80050a4:	f002 fa20 	bl	80074e8 <iprintf>
 80050a8:	4849      	ldr	r0, [pc, #292]	; (80051d0 <threadNVM25Q80+0x2ec>)
 80050aa:	f002 fa1d 	bl	80074e8 <iprintf>
 80050ae:	f7fb ff91 	bl	8000fd4 <HAL_GetTick>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4619      	mov	r1, r3
 80050b6:	4847      	ldr	r0, [pc, #284]	; (80051d4 <threadNVM25Q80+0x2f0>)
 80050b8:	f002 fa16 	bl	80074e8 <iprintf>
 80050bc:	4850      	ldr	r0, [pc, #320]	; (8005200 <threadNVM25Q80+0x31c>)
 80050be:	f002 fa13 	bl	80074e8 <iprintf>
 80050c2:	e7fe      	b.n	80050c2 <threadNVM25Q80+0x1de>
						return FALSE;
					}
					if ( iNvm.numbsWrite == 0 ){
 80050c4:	4b49      	ldr	r3, [pc, #292]	; (80051ec <threadNVM25Q80+0x308>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d113      	bne.n	80050f4 <threadNVM25Q80+0x210>
						dbugnl("iNvm.numbsWrite === 0");
 80050cc:	4840      	ldr	r0, [pc, #256]	; (80051d0 <threadNVM25Q80+0x2ec>)
 80050ce:	f002 fa0b 	bl	80074e8 <iprintf>
 80050d2:	f7fb ff7f 	bl	8000fd4 <HAL_GetTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4619      	mov	r1, r3
 80050da:	483e      	ldr	r0, [pc, #248]	; (80051d4 <threadNVM25Q80+0x2f0>)
 80050dc:	f002 fa04 	bl	80074e8 <iprintf>
 80050e0:	4848      	ldr	r0, [pc, #288]	; (8005204 <threadNVM25Q80+0x320>)
 80050e2:	f002 fa01 	bl	80074e8 <iprintf>
						pfGetCharStream = NULL;
 80050e6:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <threadNVM25Q80+0x310>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
						stateNvm = NVM_STREAM_RECIVE_COMPLITE;
 80050ec:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <threadNVM25Q80+0x2d4>)
 80050ee:	2205      	movs	r2, #5
 80050f0:	701a      	strb	r2, [r3, #0]
						break;
 80050f2:	e04a      	b.n	800518a <threadNVM25Q80+0x2a6>
					}
					//
					if ( FlashProc.iAddr > MIN_SECTOR_FLASH_ERASE ){
 80050f4:	4b3c      	ldr	r3, [pc, #240]	; (80051e8 <threadNVM25Q80+0x304>)
 80050f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005100:	d915      	bls.n	800512e <threadNVM25Q80+0x24a>
						dbugerr("что-то не то с индексом iAddr");
 8005102:	4830      	ldr	r0, [pc, #192]	; (80051c4 <threadNVM25Q80+0x2e0>)
 8005104:	f002 f9f0 	bl	80074e8 <iprintf>
 8005108:	229c      	movs	r2, #156	; 0x9c
 800510a:	492f      	ldr	r1, [pc, #188]	; (80051c8 <threadNVM25Q80+0x2e4>)
 800510c:	482f      	ldr	r0, [pc, #188]	; (80051cc <threadNVM25Q80+0x2e8>)
 800510e:	f002 f9eb 	bl	80074e8 <iprintf>
 8005112:	482f      	ldr	r0, [pc, #188]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8005114:	f002 f9e8 	bl	80074e8 <iprintf>
 8005118:	f7fb ff5c 	bl	8000fd4 <HAL_GetTick>
 800511c:	4603      	mov	r3, r0
 800511e:	4619      	mov	r1, r3
 8005120:	482c      	ldr	r0, [pc, #176]	; (80051d4 <threadNVM25Q80+0x2f0>)
 8005122:	f002 f9e1 	bl	80074e8 <iprintf>
 8005126:	4838      	ldr	r0, [pc, #224]	; (8005208 <threadNVM25Q80+0x324>)
 8005128:	f002 f9de 	bl	80074e8 <iprintf>
 800512c:	e7fe      	b.n	800512c <threadNVM25Q80+0x248>
					}
					if ( FlashProc.iAddr == MIN_SECTOR_FLASH_ERASE ){
 800512e:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <threadNVM25Q80+0x304>)
 8005130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d107      	bne.n	800514c <threadNVM25Q80+0x268>
						flushBuffSector();
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	469c      	mov	ip, r3
 8005140:	f7ff fea6 	bl	8004e90 <flushBuffSector.0>
						stateNvm = PREPARATIONS_CALC_NVM;
 8005144:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <threadNVM25Q80+0x2d4>)
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
						break;
 800514a:	e01e      	b.n	800518a <threadNVM25Q80+0x2a6>
				while (  (*pfGetCharStream)(&byteToNvm)  ){
 800514c:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <threadNVM25Q80+0x310>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4829      	ldr	r0, [pc, #164]	; (80051f8 <threadNVM25Q80+0x314>)
 8005152:	4798      	blx	r3
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f47f af66 	bne.w	8005028 <threadNVM25Q80+0x144>
				}//while
			}else{
				dbugerr("в WAIT_NVM_DATA состоянии, pfGetCharStream == 0");
				stateNvm = NVM_INTERN_ERROR ;
			}
		}break;
 800515c:	e075      	b.n	800524a <threadNVM25Q80+0x366>
				dbugerr("в WAIT_NVM_DATA состоянии, pfGetCharStream == 0");
 800515e:	4819      	ldr	r0, [pc, #100]	; (80051c4 <threadNVM25Q80+0x2e0>)
 8005160:	f002 f9c2 	bl	80074e8 <iprintf>
 8005164:	22a5      	movs	r2, #165	; 0xa5
 8005166:	4918      	ldr	r1, [pc, #96]	; (80051c8 <threadNVM25Q80+0x2e4>)
 8005168:	4818      	ldr	r0, [pc, #96]	; (80051cc <threadNVM25Q80+0x2e8>)
 800516a:	f002 f9bd 	bl	80074e8 <iprintf>
 800516e:	4818      	ldr	r0, [pc, #96]	; (80051d0 <threadNVM25Q80+0x2ec>)
 8005170:	f002 f9ba 	bl	80074e8 <iprintf>
 8005174:	f7fb ff2e 	bl	8000fd4 <HAL_GetTick>
 8005178:	4603      	mov	r3, r0
 800517a:	4619      	mov	r1, r3
 800517c:	4815      	ldr	r0, [pc, #84]	; (80051d4 <threadNVM25Q80+0x2f0>)
 800517e:	f002 f9b3 	bl	80074e8 <iprintf>
 8005182:	4822      	ldr	r0, [pc, #136]	; (800520c <threadNVM25Q80+0x328>)
 8005184:	f002 f9b0 	bl	80074e8 <iprintf>
 8005188:	e7fe      	b.n	8005188 <threadNVM25Q80+0x2a4>
		}break;
 800518a:	e05e      	b.n	800524a <threadNVM25Q80+0x366>
		//
		case NVM_STREAM_RECIVE_COMPLITE:{
			dbugnl("NVM_STREAM_RECIVE_COMPLITE");
 800518c:	4810      	ldr	r0, [pc, #64]	; (80051d0 <threadNVM25Q80+0x2ec>)
 800518e:	f002 f9ab 	bl	80074e8 <iprintf>
 8005192:	f7fb ff1f 	bl	8000fd4 <HAL_GetTick>
 8005196:	4603      	mov	r3, r0
 8005198:	4619      	mov	r1, r3
 800519a:	480e      	ldr	r0, [pc, #56]	; (80051d4 <threadNVM25Q80+0x2f0>)
 800519c:	f002 f9a4 	bl	80074e8 <iprintf>
 80051a0:	481b      	ldr	r0, [pc, #108]	; (8005210 <threadNVM25Q80+0x32c>)
 80051a2:	f002 f9a1 	bl	80074e8 <iprintf>
			flushBuffSector();
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	469c      	mov	ip, r3
 80051aa:	f7ff fe71 	bl	8004e90 <flushBuffSector.0>
			stateNvm = NO_INIT_NVM;
 80051ae:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <threadNVM25Q80+0x2d4>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
			return FALSE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e049      	b.n	800524c <threadNVM25Q80+0x368>
 80051b8:	20001428 	.word	0x20001428
 80051bc:	2000002c 	.word	0x2000002c
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	08008a60 	.word	0x08008a60
 80051c8:	08008a6c 	.word	0x08008a6c
 80051cc:	08008a88 	.word	0x08008a88
 80051d0:	08008aa8 	.word	0x08008aa8
 80051d4:	08008aac 	.word	0x08008aac
 80051d8:	08008ab8 	.word	0x08008ab8
 80051dc:	08008ad8 	.word	0x08008ad8
 80051e0:	08008af0 	.word	0x08008af0
 80051e4:	08008afc 	.word	0x08008afc
 80051e8:	2000041c 	.word	0x2000041c
 80051ec:	20000410 	.word	0x20000410
 80051f0:	08008b28 	.word	0x08008b28
 80051f4:	20001424 	.word	0x20001424
 80051f8:	20000009 	.word	0x20000009
 80051fc:	08008b54 	.word	0x08008b54
 8005200:	08008b78 	.word	0x08008b78
 8005204:	08008ba8 	.word	0x08008ba8
 8005208:	08008bc0 	.word	0x08008bc0
 800520c:	08008bf0 	.word	0x08008bf0
 8005210:	08008a20 	.word	0x08008a20
		}break;
		//
		case NVM_INTERN_ERROR:{
			dbugerr("NVM_INTERN_ERROR");
 8005214:	480f      	ldr	r0, [pc, #60]	; (8005254 <threadNVM25Q80+0x370>)
 8005216:	f002 f967 	bl	80074e8 <iprintf>
 800521a:	22b2      	movs	r2, #178	; 0xb2
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <threadNVM25Q80+0x374>)
 800521e:	480f      	ldr	r0, [pc, #60]	; (800525c <threadNVM25Q80+0x378>)
 8005220:	f002 f962 	bl	80074e8 <iprintf>
 8005224:	480e      	ldr	r0, [pc, #56]	; (8005260 <threadNVM25Q80+0x37c>)
 8005226:	f002 f95f 	bl	80074e8 <iprintf>
 800522a:	f7fb fed3 	bl	8000fd4 <HAL_GetTick>
 800522e:	4603      	mov	r3, r0
 8005230:	4619      	mov	r1, r3
 8005232:	480c      	ldr	r0, [pc, #48]	; (8005264 <threadNVM25Q80+0x380>)
 8005234:	f002 f958 	bl	80074e8 <iprintf>
 8005238:	480b      	ldr	r0, [pc, #44]	; (8005268 <threadNVM25Q80+0x384>)
 800523a:	f002 f955 	bl	80074e8 <iprintf>
 800523e:	e7fe      	b.n	800523e <threadNVM25Q80+0x35a>
			stateNvm = NO_INIT_NVM;
		}break;
		//error match state
		default:{
			stateNvm = NVM_INTERN_ERROR ;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <threadNVM25Q80+0x388>)
 8005242:	2206      	movs	r2, #6
 8005244:	701a      	strb	r2, [r3, #0]
		}break;
 8005246:	e000      	b.n	800524a <threadNVM25Q80+0x366>
		}break;
 8005248:	bf00      	nop
	}//switch(..
	return (TRUE);
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	08008a60 	.word	0x08008a60
 8005258:	08008a6c 	.word	0x08008a6c
 800525c:	08008a88 	.word	0x08008a88
 8005260:	08008aa8 	.word	0x08008aa8
 8005264:	08008aac 	.word	0x08008aac
 8005268:	08008a3c 	.word	0x08008a3c
 800526c:	20001428 	.word	0x20001428

08005270 <startNvm>:

/*
 * после валидации данных для автомата процесса NVM
 * инициируется необходимый процесс и автомат NVM приступает к работе
 */
bool_t startNvm(nvm_t* aNvm){
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	dbugnl("НАЧАЛО ПРОЦЕССА startNvm");
 8005278:	4842      	ldr	r0, [pc, #264]	; (8005384 <startNvm+0x114>)
 800527a:	f002 f935 	bl	80074e8 <iprintf>
 800527e:	f7fb fea9 	bl	8000fd4 <HAL_GetTick>
 8005282:	4603      	mov	r3, r0
 8005284:	4619      	mov	r1, r3
 8005286:	4840      	ldr	r0, [pc, #256]	; (8005388 <startNvm+0x118>)
 8005288:	f002 f92e 	bl	80074e8 <iprintf>
 800528c:	483f      	ldr	r0, [pc, #252]	; (800538c <startNvm+0x11c>)
 800528e:	f002 f92b 	bl	80074e8 <iprintf>
//	aNvm->numbsWrite
	if ( stateNvm != WAIT_INIT_NVM_AREA ){
 8005292:	4b3f      	ldr	r3, [pc, #252]	; (8005390 <startNvm+0x120>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d015      	beq.n	80052c6 <startNvm+0x56>
		dbugerr("инициализации SPI flash");
 800529a:	483e      	ldr	r0, [pc, #248]	; (8005394 <startNvm+0x124>)
 800529c:	f002 f924 	bl	80074e8 <iprintf>
 80052a0:	22c5      	movs	r2, #197	; 0xc5
 80052a2:	493d      	ldr	r1, [pc, #244]	; (8005398 <startNvm+0x128>)
 80052a4:	483d      	ldr	r0, [pc, #244]	; (800539c <startNvm+0x12c>)
 80052a6:	f002 f91f 	bl	80074e8 <iprintf>
 80052aa:	4836      	ldr	r0, [pc, #216]	; (8005384 <startNvm+0x114>)
 80052ac:	f002 f91c 	bl	80074e8 <iprintf>
 80052b0:	f7fb fe90 	bl	8000fd4 <HAL_GetTick>
 80052b4:	4603      	mov	r3, r0
 80052b6:	4619      	mov	r1, r3
 80052b8:	4833      	ldr	r0, [pc, #204]	; (8005388 <startNvm+0x118>)
 80052ba:	f002 f915 	bl	80074e8 <iprintf>
 80052be:	4838      	ldr	r0, [pc, #224]	; (80053a0 <startNvm+0x130>)
 80052c0:	f002 f912 	bl	80074e8 <iprintf>
 80052c4:	e7fe      	b.n	80052c4 <startNvm+0x54>
		return FALSE;
	};
	if ( aNvm->startAddrNvm < ALL_SPI_FLASH_SIZE ){
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ce:	d20c      	bcs.n	80052ea <startNvm+0x7a>
		iNvm.startAddrNvm=aNvm->startAddrNvm;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a33      	ldr	r2, [pc, #204]	; (80053a4 <startNvm+0x134>)
 80052d6:	6013      	str	r3, [r2, #0]
	}else{return FALSE;}
	if (  ( ( aNvm->startAddrNvm + aNvm->numbsWrite ) <=  ALL_SPI_FLASH_SIZE )  ){
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4413      	add	r3, r2
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e6:	d80b      	bhi.n	8005300 <startNvm+0x90>
 80052e8:	e001      	b.n	80052ee <startNvm+0x7e>
	}else{return FALSE;}
 80052ea:	2300      	movs	r3, #0
 80052ec:	e046      	b.n	800537c <startNvm+0x10c>
			iNvm.numbsWrite = aNvm->numbsWrite;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <startNvm+0x134>)
 80052f4:	6053      	str	r3, [r2, #4]
	}else{return FALSE;}
	if ( aNvm->passCallback != NULL ){
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <startNvm+0xa4>
 80052fe:	e001      	b.n	8005304 <startNvm+0x94>
	}else{return FALSE;}
 8005300:	2300      	movs	r3, #0
 8005302:	e03b      	b.n	800537c <startNvm+0x10c>
		iNvm.passCallback=aNvm->passCallback;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <startNvm+0x134>)
 800530a:	6093      	str	r3, [r2, #8]
		pfGetCharStream=iNvm.passCallback;
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <startNvm+0x134>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <startNvm+0x138>)
 8005312:	6013      	str	r3, [r2, #0]
	}

	const int NSector = MIN_SECTOR_FLASH_ERASE / PAGE_CACH_FLASH ;///кол-во стр в секторе
 8005314:	2310      	movs	r3, #16
 8005316:	60fb      	str	r3, [r7, #12]
	//п2. Вычисляем целевой адрес сектора назначения данных SPI flash
	FlashProc.iSectorAddr = ( iNvm.startAddrNvm / MIN_SECTOR_FLASH_ERASE ) * MIN_SECTOR_FLASH_ERASE;
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <startNvm+0x134>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	4a21      	ldr	r2, [pc, #132]	; (80053ac <startNvm+0x13c>)
 8005326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800532a:	6013      	str	r3, [r2, #0]
//	FlashProc.nSector = 0;//только для переключения на лету
	//п3. Вычисляем выравнивание адреса помещаемых данных относительно сектора, тк основная мин работа с сектором, потом уже с кэш страницей
	FlashProc.iAddr	= (iNvm.startAddrNvm - FlashProc.iSectorAddr) % MIN_SECTOR_FLASH_ERASE;
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <startNvm+0x134>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <startNvm+0x13c>)
 8005332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <startNvm+0x13c>)
 8005340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005344:	6053      	str	r3, [r2, #4]

	dbugnl("SectorAddr = %lu , относит. Addr в секторе = %lu , pазм. = %u"
 8005346:	480f      	ldr	r0, [pc, #60]	; (8005384 <startNvm+0x114>)
 8005348:	f002 f8ce 	bl	80074e8 <iprintf>
 800534c:	f7fb fe42 	bl	8000fd4 <HAL_GetTick>
 8005350:	4603      	mov	r3, r0
 8005352:	4619      	mov	r1, r3
 8005354:	480c      	ldr	r0, [pc, #48]	; (8005388 <startNvm+0x118>)
 8005356:	f002 f8c7 	bl	80074e8 <iprintf>
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <startNvm+0x13c>)
 800535c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	4b12      	ldr	r3, [pc, #72]	; (80053ac <startNvm+0x13c>)
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <startNvm+0x134>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4810      	ldr	r0, [pc, #64]	; (80053b0 <startNvm+0x140>)
 8005370:	f002 f8ba 	bl	80074e8 <iprintf>
	 .....|..|..|..|..|..|..|..|..|..|..|..|..
	 	    ^      					 |
	  	    iAddr(% PAGE_CACH_FLASH) |
	  	    					 	 nPage (% NSector)
	*/
	stateNvm = PREPARATIONS_CALC_NVM;
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <startNvm+0x120>)
 8005376:	2202      	movs	r2, #2
 8005378:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800537a:	2301      	movs	r3, #1
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08008aa8 	.word	0x08008aa8
 8005388:	08008aac 	.word	0x08008aac
 800538c:	08008c2c 	.word	0x08008c2c
 8005390:	20001428 	.word	0x20001428
 8005394:	08008a60 	.word	0x08008a60
 8005398:	08008a6c 	.word	0x08008a6c
 800539c:	08008a88 	.word	0x08008a88
 80053a0:	08008c54 	.word	0x08008c54
 80053a4:	20000410 	.word	0x20000410
 80053a8:	20001424 	.word	0x20001424
 80053ac:	2000041c 	.word	0x2000041c
 80053b0:	08008c7c 	.word	0x08008c7c

080053b4 <respondERROR>:
}
void respondREAD(){
	printCli (szREAD);
}
*/
void respondERROR(){
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
	printCli(szERROR);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <respondERROR+0x10>)
 80053ba:	f001 ff69 	bl	8007290 <printCli>
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000140 	.word	0x20000140

080053c8 <respondErrorNumersArg>:

void respondErrorNumersArg(){
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
	respondERROR();
 80053cc:	f7ff fff2 	bl	80053b4 <respondERROR>
	printCli(" Количество аргументов не соответствует команде \n\r");
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <respondErrorNumersArg+0x14>)
 80053d2:	f001 ff5d 	bl	8007290 <printCli>
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	08009718 	.word	0x08009718

080053e0 <help>:

void help(int argc, const char * const * argv){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	printCli ("microCLI library based shell v 1.1\n\r\n");
 80053ea:	4819      	ldr	r0, [pc, #100]	; (8005450 <help+0x70>)
 80053ec:	f001 ff50 	bl	8007290 <printCli>
	int i=0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 80053f4:	e01c      	b.n	8005430 <help+0x50>
		printCli("[");
 80053f6:	4817      	ldr	r0, [pc, #92]	; (8005454 <help+0x74>)
 80053f8:	f001 ff4a 	bl	8007290 <printCli>
		printCli(list_cmds[i].name);
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <help+0x78>)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4413      	add	r3, r2
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f001 ff42 	bl	8007290 <printCli>
		printCli("] \t ");
 800540c:	4813      	ldr	r0, [pc, #76]	; (800545c <help+0x7c>)
 800540e:	f001 ff3f 	bl	8007290 <printCli>
		printCli(list_cmds[i].descriptions);
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <help+0x78>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	4413      	add	r3, r2
 800541a:	3308      	adds	r3, #8
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f001 ff36 	bl	8007290 <printCli>
		printCli("\n\r");
 8005424:	480e      	ldr	r0, [pc, #56]	; (8005460 <help+0x80>)
 8005426:	f001 ff33 	bl	8007290 <printCli>
		i++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8005430:	4a09      	ldr	r2, [pc, #36]	; (8005458 <help+0x78>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	4413      	add	r3, r2
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1da      	bne.n	80053f6 <help+0x16>
	}
	printCli ("When you enter a command without a parameter, "
 8005440:	4808      	ldr	r0, [pc, #32]	; (8005464 <help+0x84>)
 8005442:	f001 ff25 	bl	8007290 <printCli>
			"the current set value is displayed.");
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	08009778 	.word	0x08009778
 8005454:	080097a0 	.word	0x080097a0
 8005458:	20000030 	.word	0x20000030
 800545c:	080097a4 	.word	0x080097a4
 8005460:	080097ac 	.word	0x080097ac
 8005464:	080097b0 	.word	0x080097b0

08005468 <clear>:
void clear(int argc, const char * const * argv){
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
	printCli ("\033[2J");    // ESC seq for clear entire screen
 8005472:	4805      	ldr	r0, [pc, #20]	; (8005488 <clear+0x20>)
 8005474:	f001 ff0c 	bl	8007290 <printCli>
	printCli ("\033[H");     // ESC seq for move cursor at left-top corner
 8005478:	4804      	ldr	r0, [pc, #16]	; (800548c <clear+0x24>)
 800547a:	f001 ff09 	bl	8007290 <printCli>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	08009804 	.word	0x08009804
 800548c:	0800980c 	.word	0x0800980c

08005490 <list>:
void list(int argc, const char * const * argv){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	int i=0;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
	printCli(CLYELLOW);
 800549e:	4812      	ldr	r0, [pc, #72]	; (80054e8 <list+0x58>)
 80054a0:	f001 fef6 	bl	8007290 <printCli>
	while (list_cmds[i].name[0]){
 80054a4:	e010      	b.n	80054c8 <list+0x38>
		printCli("'");
 80054a6:	4811      	ldr	r0, [pc, #68]	; (80054ec <list+0x5c>)
 80054a8:	f001 fef2 	bl	8007290 <printCli>
		printCli(list_cmds[i].name);
 80054ac:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <list+0x60>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 feea 	bl	8007290 <printCli>
		printCli ("'\t");
 80054bc:	480d      	ldr	r0, [pc, #52]	; (80054f4 <list+0x64>)
 80054be:	f001 fee7 	bl	8007290 <printCli>
		i++;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <list+0x60>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <list+0x16>
	}
	printCli(CLDEFAULTTEXT);
 80054d8:	4807      	ldr	r0, [pc, #28]	; (80054f8 <list+0x68>)
 80054da:	f001 fed9 	bl	8007290 <printCli>
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	08009810 	.word	0x08009810
 80054ec:	08009818 	.word	0x08009818
 80054f0:	20000030 	.word	0x20000030
 80054f4:	0800981c 	.word	0x0800981c
 80054f8:	08009820 	.word	0x08009820

080054fc <prolongationsExec>:

void prolongationsExec( int argc , const char * const * argv ){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	execute_list_commands ( argc , &argv[0]);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 ff09 	bl	8007320 <execute_list_commands>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <catver>:

void catver(int argc, const char *const* argv){
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	printCli ("FwVersion:");
 8005522:	4805      	ldr	r0, [pc, #20]	; (8005538 <catver+0x20>)
 8005524:	f001 feb4 	bl	8007290 <printCli>
	printCli ( "Build: " __DATE__", " __TIME__ );
 8005528:	4804      	ldr	r0, [pc, #16]	; (800553c <catver+0x24>)
 800552a:	f001 feb1 	bl	8007290 <printCli>
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	08009828 	.word	0x08009828
 800553c:	08009834 	.word	0x08009834

08005540 <man>:

void man(int argc, const char *const* argv){
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	int i=0;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 800554e:	e030      	b.n	80055b2 <man+0x72>
		if (strcmp(argv[0],list_cmds[i].name)==0){
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	491e      	ldr	r1, [pc, #120]	; (80055d0 <man+0x90>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	440b      	add	r3, r1
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7fa fe35 	bl	80001d0 <strcmp>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d11f      	bne.n	80055ac <man+0x6c>
			if (list_cmds[i].man[0]!=0){
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <man+0x90>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	4413      	add	r3, r2
 8005574:	330c      	adds	r3, #12
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <man+0x52>
				printCli(list_cmds[i].man);
 800557e:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <man+0x90>)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	4413      	add	r3, r2
 8005586:	330c      	adds	r3, #12
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f001 fe80 	bl	8007290 <printCli>
 8005590:	e008      	b.n	80055a4 <man+0x64>
			}else{
				printCli(list_cmds[i].descriptions);
 8005592:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <man+0x90>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	4413      	add	r3, r2
 800559a:	3308      	adds	r3, #8
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fe76 	bl	8007290 <printCli>
			}
			printCli("\n\r");
 80055a4:	480b      	ldr	r0, [pc, #44]	; (80055d4 <man+0x94>)
 80055a6:	f001 fe73 	bl	8007290 <printCli>
			return;
 80055aa:	e00d      	b.n	80055c8 <man+0x88>
		}
		i++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <man+0x90>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1c6      	bne.n	8005550 <man+0x10>
	}
	printCli ("Command for man absent, exec 'man man' and exec 'list'\n\r");
 80055c2:	4805      	ldr	r0, [pc, #20]	; (80055d8 <man+0x98>)
 80055c4:	f001 fe64 	bl	8007290 <printCli>
}
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000030 	.word	0x20000030
 80055d4:	080097ac 	.word	0x080097ac
 80055d8:	08009854 	.word	0x08009854

080055dc <uid>:

#include "w25q80def.h"

void uid(int argc, const char *const* argv){
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	b09e      	sub	sp, #120	; 0x78
 80055e2:	af06      	add	r7, sp, #24
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
 80055e8:	466b      	mov	r3, sp
 80055ea:	469a      	mov	sl, r3
	uint8_t UId[8];
	getUniqueIdFlash25q(UId);
 80055ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fd0c 	bl	800600e <getUniqueIdFlash25q>

	const char stroutmask[]= "Manufacture Uniqui UID SPI flash: %02x%02x%02x%02x%02x%02x%02x%02x\n\r";
 80055f6:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <uid+0xd8>)
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4611      	mov	r1, r2
 80055fe:	2245      	movs	r2, #69	; 0x45
 8005600:	4618      	mov	r0, r3
 8005602:	f001 ff41 	bl	8007488 <memcpy>
	char strout[strlen(stroutmask)+2];
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	4618      	mov	r0, r3
 800560c:	f7fa fdea 	bl	80001e4 <strlen>
 8005610:	4603      	mov	r3, r0
 8005612:	1c99      	adds	r1, r3, #2
 8005614:	460b      	mov	r3, r1
 8005616:	3b01      	subs	r3, #1
 8005618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800561a:	2300      	movs	r3, #0
 800561c:	4688      	mov	r8, r1
 800561e:	4699      	mov	r9, r3
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800562c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005634:	2300      	movs	r3, #0
 8005636:	460c      	mov	r4, r1
 8005638:	461d      	mov	r5, r3
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	00eb      	lsls	r3, r5, #3
 8005644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005648:	00e2      	lsls	r2, r4, #3
 800564a:	1dcb      	adds	r3, r1, #7
 800564c:	08db      	lsrs	r3, r3, #3
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	ebad 0d03 	sub.w	sp, sp, r3
 8005654:	ab06      	add	r3, sp, #24
 8005656:	3300      	adds	r3, #0
 8005658:	65bb      	str	r3, [r7, #88]	; 0x58
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 800565a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800565e:	469c      	mov	ip, r3
 8005660:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005664:	469e      	mov	lr, r3
 8005666:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800566a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800566e:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8005672:	4608      	mov	r0, r1
 8005674:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8005678:	460c      	mov	r4, r1
			UId[6], UId[7]);
 800567a:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 800567e:	460d      	mov	r5, r1
			UId[6], UId[7]);
 8005680:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
	sprintf(strout, stroutmask, UId[0], UId[1], UId[2], UId[3], UId[4], UId[5],
 8005684:	460e      	mov	r6, r1
 8005686:	f107 0108 	add.w	r1, r7, #8
 800568a:	9605      	str	r6, [sp, #20]
 800568c:	9504      	str	r5, [sp, #16]
 800568e:	9403      	str	r4, [sp, #12]
 8005690:	9002      	str	r0, [sp, #8]
 8005692:	9201      	str	r2, [sp, #4]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4673      	mov	r3, lr
 8005698:	4662      	mov	r2, ip
 800569a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800569c:	f001 ff86 	bl	80075ac <siprintf>
	printCli(strout);
 80056a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056a2:	f001 fdf5 	bl	8007290 <printCli>
 80056a6:	46d5      	mov	sp, sl
}
 80056a8:	bf00      	nop
 80056aa:	3760      	adds	r7, #96	; 0x60
 80056ac:	46bd      	mov	sp, r7
 80056ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b2:	bf00      	nop
 80056b4:	08009890 	.word	0x08009890

080056b8 <reg>:

void reg( int argc , const char * const * argv ){
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	b095      	sub	sp, #84	; 0x54
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
 80056c4:	466b      	mov	r3, sp
 80056c6:	461e      	mov	r6, r3

	if (argc!=1){
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d002      	beq.n	80056d4 <reg+0x1c>
		respondERROR();
 80056ce:	f7ff fe71 	bl	80053b4 <respondERROR>
		return;
 80056d2:	e063      	b.n	800579c <reg+0xe4>
	}
	uint8_t status;
	size_t i=atol(argv[0]);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fea7 	bl	800742c <atol>
 80056de:	4603      	mov	r3, r0
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ( (i==1) || (i==2) ){
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d002      	beq.n	80056ee <reg+0x36>
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d153      	bne.n	8005796 <reg+0xde>
		status=getStatusRegFlash25q(i);
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc68 	bl	8005fc8 <getStatusRegFlash25q>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80056fe:	bf00      	nop
	}else{
		respondERROR();
		return;
	}
	const char stroutmask[]= "Текущий статус Status Register-%d : %d\n\n\r";
 8005700:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <reg+0xf0>)
 8005702:	f107 0408 	add.w	r4, r7, #8
 8005706:	461d      	mov	r5, r3
 8005708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005714:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005718:	6020      	str	r0, [r4, #0]
 800571a:	3404      	adds	r4, #4
 800571c:	8021      	strh	r1, [r4, #0]
 800571e:	3402      	adds	r4, #2
 8005720:	0c0b      	lsrs	r3, r1, #16
 8005722:	7023      	strb	r3, [r4, #0]
	char strout[strlen(stroutmask)+2];
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4618      	mov	r0, r3
 800572a:	f7fa fd5b 	bl	80001e4 <strlen>
 800572e:	4603      	mov	r3, r0
 8005730:	1c99      	adds	r1, r3, #2
 8005732:	460b      	mov	r3, r1
 8005734:	3b01      	subs	r3, #1
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
 8005738:	2300      	movs	r3, #0
 800573a:	468a      	mov	sl, r1
 800573c:	469b      	mov	fp, r3
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800574a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800574e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005752:	2300      	movs	r3, #0
 8005754:	4688      	mov	r8, r1
 8005756:	4699      	mov	r9, r3
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005764:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005768:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576c:	1dcb      	adds	r3, r1, #7
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	ebad 0d03 	sub.w	sp, sp, r3
 8005776:	466b      	mov	r3, sp
 8005778:	3300      	adds	r3, #0
 800577a:	643b      	str	r3, [r7, #64]	; 0x40
	sprintf( strout , stroutmask , i , status );
 800577c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005780:	f107 0108 	add.w	r1, r7, #8
 8005784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005786:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005788:	f001 ff10 	bl	80075ac <siprintf>
	printCli(strout);
 800578c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800578e:	f001 fd7f 	bl	8007290 <printCli>
 8005792:	46b5      	mov	sp, r6
 8005794:	e003      	b.n	800579e <reg+0xe6>
		respondERROR();
 8005796:	f7ff fe0d 	bl	80053b4 <respondERROR>
		return;
 800579a:	bf00      	nop
 800579c:	46b5      	mov	sp, r6

}
 800579e:	3754      	adds	r7, #84	; 0x54
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a6:	bf00      	nop
 80057a8:	080098d8 	.word	0x080098d8

080057ac <eraseAll>:

void eraseAll( int argc , const char * const * argv ){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
	eraseAllChipFlash25q();
 80057b6:	f000 fe61 	bl	800647c <eraseAllChipFlash25q>
	printCli("\n\rChip erased complite!\n\r");
 80057ba:	4803      	ldr	r0, [pc, #12]	; (80057c8 <eraseAll+0x1c>)
 80057bc:	f001 fd68 	bl	8007290 <printCli>
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	08009910 	.word	0x08009910

080057cc <cathex>:


void cathex( int argc , const char * const * argv ){
 80057cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057d0:	b0a7      	sub	sp, #156	; 0x9c
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
 80057d8:	466b      	mov	r3, sp
 80057da:	461e      	mov	r6, r3

	if (argc!=2){
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d002      	beq.n	80057e8 <cathex+0x1c>
		respondErrorNumersArg();
 80057e2:	f7ff fdf1 	bl	80053c8 <respondErrorNumersArg>
		return;
 80057e6:	e097      	b.n	8005918 <cathex+0x14c>
	}
	size_t addr=atol(argv[0]);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fe1d 	bl	800742c <atol>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (addr>=ALL_SPI_FLASH_SIZE){
 80057f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005800:	d303      	bcc.n	800580a <cathex+0x3e>
		printCli("Адрес задан вне допустимого диапазона\n\r");
 8005802:	4848      	ldr	r0, [pc, #288]	; (8005924 <cathex+0x158>)
 8005804:	f001 fd44 	bl	8007290 <printCli>
		return;
 8005808:	e086      	b.n	8005918 <cathex+0x14c>
	}
	size_t numbs=atoi(argv[1]);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fe07 	bl	8007424 <atoi>
 8005816:	4603      	mov	r3, r0
 8005818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const char stroutmask[]= "Вывод содержимого внешней SPI flash по адресу %u в кол-ве %u байт в HEX(16):\n\n\r";
 800581c:	4a42      	ldr	r2, [pc, #264]	; (8005928 <cathex+0x15c>)
 800581e:	f107 030c 	add.w	r3, r7, #12
 8005822:	4611      	mov	r1, r2
 8005824:	227a      	movs	r2, #122	; 0x7a
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fe2e 	bl	8007488 <memcpy>
	char strout[strlen(stroutmask)+2];
 800582c:	f107 030c 	add.w	r3, r7, #12
 8005830:	4618      	mov	r0, r3
 8005832:	f7fa fcd7 	bl	80001e4 <strlen>
 8005836:	4603      	mov	r3, r0
 8005838:	1c99      	adds	r1, r3, #2
 800583a:	460b      	mov	r3, r1
 800583c:	3b01      	subs	r3, #1
 800583e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005842:	2300      	movs	r3, #0
 8005844:	4688      	mov	r8, r1
 8005846:	4699      	mov	r9, r3
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800585c:	2300      	movs	r3, #0
 800585e:	460c      	mov	r4, r1
 8005860:	461d      	mov	r5, r3
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	00eb      	lsls	r3, r5, #3
 800586c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005870:	00e2      	lsls	r2, r4, #3
 8005872:	1dcb      	adds	r3, r1, #7
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	ebad 0d03 	sub.w	sp, sp, r3
 800587c:	466b      	mov	r3, sp
 800587e:	3300      	adds	r3, #0
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sprintf(strout, stroutmask,addr,numbs );
 8005884:	f107 010c 	add.w	r1, r7, #12
 8005888:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800588c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005890:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005894:	f001 fe8a 	bl	80075ac <siprintf>
	printCli(strout);
 8005898:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800589c:	f001 fcf8 	bl	8007290 <printCli>


	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 80058a0:	e029      	b.n	80058f6 <cathex+0x12a>
		uint8_t bSrc = readByteAddrFlash25q(addr);
 80058a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80058a6:	f000 fc37 	bl	8006118 <readByteAddrFlash25q>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		sprintf(strout,"%02X ",bSrc);
 80058b0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80058b4:	461a      	mov	r2, r3
 80058b6:	491d      	ldr	r1, [pc, #116]	; (800592c <cathex+0x160>)
 80058b8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80058bc:	f001 fe76 	bl	80075ac <siprintf>
		printCli(strout);
 80058c0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80058c4:	f001 fce4 	bl	8007290 <printCli>
		if ((numbs&7)==7)printCli(" ");
 80058c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	2b07      	cmp	r3, #7
 80058d2:	d102      	bne.n	80058da <cathex+0x10e>
 80058d4:	4816      	ldr	r0, [pc, #88]	; (8005930 <cathex+0x164>)
 80058d6:	f001 fcdb 	bl	8007290 <printCli>
		if ((numbs&31)==31)printCli("\n\r");
 80058da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2b1f      	cmp	r3, #31
 80058e4:	d102      	bne.n	80058ec <cathex+0x120>
 80058e6:	4813      	ldr	r0, [pc, #76]	; (8005934 <cathex+0x168>)
 80058e8:	f001 fcd2 	bl	8007290 <printCli>
		addr++;
 80058ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 80058f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058fa:	1e5a      	subs	r2, r3, #1
 80058fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <cathex+0x142>
 8005904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590c:	d3c9      	bcc.n	80058a2 <cathex+0xd6>
	}
	printCli("\n\r-- end --\n\r");
 800590e:	480a      	ldr	r0, [pc, #40]	; (8005938 <cathex+0x16c>)
 8005910:	f001 fcbe 	bl	8007290 <printCli>
 8005914:	46b5      	mov	sp, r6
 8005916:	e000      	b.n	800591a <cathex+0x14e>
 8005918:	46b5      	mov	sp, r6
}
 800591a:	379c      	adds	r7, #156	; 0x9c
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005922:	bf00      	nop
 8005924:	0800992c 	.word	0x0800992c
 8005928:	08009994 	.word	0x08009994
 800592c:	08009978 	.word	0x08009978
 8005930:	08009980 	.word	0x08009980
 8005934:	080097ac 	.word	0x080097ac
 8005938:	08009984 	.word	0x08009984

0800593c <jedec>:

void jedec( int argc , const char * const * argv ){
 800593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005940:	b0b3      	sub	sp, #204	; 0xcc
 8005942:	af02      	add	r7, sp, #8
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
 8005948:	466b      	mov	r3, sp
 800594a:	461e      	mov	r6, r3
	char pVoid[3];
	getJedecIdFlash25q(pVoid);
 800594c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fba7 	bl	80060a4 <getJedecIdFlash25q>

	const char stroutmask[]= "winbond JedecId SPI flash (page 54, https://static.chipdip.ru/lib/463/DOC002463585.pdf) \n\r"
 8005956:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <jedec+0xb8>)
 8005958:	f107 0308 	add.w	r3, r7, #8
 800595c:	4611      	mov	r1, r2
 800595e:	22ac      	movs	r2, #172	; 0xac
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fd91 	bl	8007488 <memcpy>
			"Manufacturer ID (0xEF=25Q80): %02X\n\r"
			"Memory Type ID1: %+02X\n\r"
			"Capacity ID: %+02X \n\r";
	char strout[strlen(stroutmask)+2];
 8005966:	f107 0308 	add.w	r3, r7, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f7fa fc3a 	bl	80001e4 <strlen>
 8005970:	4603      	mov	r3, r0
 8005972:	1c99      	adds	r1, r3, #2
 8005974:	460b      	mov	r3, r1
 8005976:	3b01      	subs	r3, #1
 8005978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800597c:	2300      	movs	r3, #0
 800597e:	4688      	mov	r8, r1
 8005980:	4699      	mov	r9, r3
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800598e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005996:	2300      	movs	r3, #0
 8005998:	460c      	mov	r4, r1
 800599a:	461d      	mov	r5, r3
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	00eb      	lsls	r3, r5, #3
 80059a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059aa:	00e2      	lsls	r2, r4, #3
 80059ac:	1dcb      	adds	r3, r1, #7
 80059ae:	08db      	lsrs	r3, r3, #3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	ebad 0d03 	sub.w	sp, sp, r3
 80059b6:	ab02      	add	r3, sp, #8
 80059b8:	3300      	adds	r3, #0
 80059ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	sprintf(strout, stroutmask, pVoid[2],pVoid[1],pVoid[0] );
 80059be:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80059c2:	461a      	mov	r2, r3
 80059c4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80059c8:	4618      	mov	r0, r3
 80059ca:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80059ce:	f107 0108 	add.w	r1, r7, #8
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4603      	mov	r3, r0
 80059d6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059da:	f001 fde7 	bl	80075ac <siprintf>
	printCli(strout);
 80059de:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059e2:	f001 fc55 	bl	8007290 <printCli>
 80059e6:	46b5      	mov	sp, r6

}
 80059e8:	bf00      	nop
 80059ea:	37c4      	adds	r7, #196	; 0xc4
 80059ec:	46bd      	mov	sp, r7
 80059ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059f2:	bf00      	nop
 80059f4:	08009a10 	.word	0x08009a10

080059f8 <cat>:

void cat( int argc , const char * const * argv ){
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b098      	sub	sp, #96	; 0x60
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]

	if (argc!=2){
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d002      	beq.n	8005a0e <cat+0x16>
		respondErrorNumersArg();
 8005a08:	f7ff fcde 	bl	80053c8 <respondErrorNumersArg>
		return;
 8005a0c:	e04c      	b.n	8005aa8 <cat+0xb0>
	}
	size_t addr=atol(argv[0]);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 fd0a 	bl	800742c <atol>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (addr>=ALL_SPI_FLASH_SIZE){
 8005a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d303      	bcc.n	8005a2c <cat+0x34>
		printCli("Адрес задан вне допустимого диапазона\n\r");
 8005a24:	4822      	ldr	r0, [pc, #136]	; (8005ab0 <cat+0xb8>)
 8005a26:	f001 fc33 	bl	8007290 <printCli>
		return;
 8005a2a:	e03d      	b.n	8005aa8 <cat+0xb0>
	}
	size_t numbs=atoi(argv[1]);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fcf6 	bl	8007424 <atoi>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	65bb      	str	r3, [r7, #88]	; 0x58
	const char stroutmask[]= "Вывод сод внеш SPI flash %u в кол %u байт в ASCII:\n\n\r";
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	; (8005ab4 <cat+0xbc>)
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4611      	mov	r1, r2
 8005a44:	224b      	movs	r2, #75	; 0x4b
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fd1e 	bl	8007488 <memcpy>
	sprintf(strout, stroutmask,addr,numbs );
 8005a4c:	f107 010c 	add.w	r1, r7, #12
 8005a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a54:	4818      	ldr	r0, [pc, #96]	; (8005ab8 <cat+0xc0>)
 8005a56:	f001 fda9 	bl	80075ac <siprintf>
	printCli(strout);
 8005a5a:	4817      	ldr	r0, [pc, #92]	; (8005ab8 <cat+0xc0>)
 8005a5c:	f001 fc18 	bl	8007290 <printCli>

	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 8005a60:	e012      	b.n	8005a88 <cat+0x90>

		uint8_t bSrc = readByteAddrFlash25q(addr);
 8005a62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005a64:	f000 fb58 	bl	8006118 <readByteAddrFlash25q>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		sprintf(strout,"%c",bSrc);
 8005a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a72:	461a      	mov	r2, r3
 8005a74:	4911      	ldr	r1, [pc, #68]	; (8005abc <cat+0xc4>)
 8005a76:	4810      	ldr	r0, [pc, #64]	; (8005ab8 <cat+0xc0>)
 8005a78:	f001 fd98 	bl	80075ac <siprintf>
		printCli(strout);
 8005a7c:	480e      	ldr	r0, [pc, #56]	; (8005ab8 <cat+0xc0>)
 8005a7e:	f001 fc07 	bl	8007290 <printCli>
		addr++;
 8005a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a84:	3301      	adds	r3, #1
 8005a86:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (  (0!=numbs--) && (addr<ALL_SPI_FLASH_SIZE) ){
 8005a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a8a:	1e5a      	subs	r2, r3, #1
 8005a8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <cat+0xa2>
 8005a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a98:	d3e3      	bcc.n	8005a62 <cat+0x6a>
	}

	unselectFlash25q();
 8005a9a:	f000 fa61 	bl	8005f60 <unselectFlash25q>

	printCli("\n\r-- end --\n\r");
 8005a9e:	4808      	ldr	r0, [pc, #32]	; (8005ac0 <cat+0xc8>)
 8005aa0:	f001 fbf6 	bl	8007290 <printCli>
	flushKeyboard();
 8005aa4:	f001 fc2e 	bl	8007304 <flushKeyboard>
}
 8005aa8:	3760      	adds	r7, #96	; 0x60
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0800992c 	.word	0x0800992c
 8005ab4:	08009ac0 	.word	0x08009ac0
 8005ab8:	2000142c 	.word	0x2000142c
 8005abc:	08009abc 	.word	0x08009abc
 8005ac0:	08009984 	.word	0x08009984

08005ac4 <returnCliByte>:
//	writePageFlash25q( addr , argv[1] , numbs );
//
//	flushKeyboard();
//}

bool_t returnCliByte(uint8_t* retByte){
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	if (rxCharLen()!=0){
 8005acc:	f001 fbc4 	bl	8007258 <rxCharLen>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <returnCliByte+0x32>
		uint8_t chars[2]={0,0};
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	81bb      	strh	r3, [r7, #12]
		chars[0]=(uint8_t)get_char();
 8005ada:	f001 fbef 	bl	80072bc <get_char>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	733b      	strb	r3, [r7, #12]
		printCli((char*)chars);
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 fbd2 	bl	8007290 <printCli>
		*retByte=chars[0];
 8005aec:	7b3a      	ldrb	r2, [r7, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e000      	b.n	8005af8 <returnCliByte+0x34>
	}
	return FALSE;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <writeRaw>:

void writeRaw( int argc , const char * const * argv ){
 8005b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b04:	b0a1      	sub	sp, #132	; 0x84
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
 8005b0c:	466b      	mov	r3, sp
 8005b0e:	461e      	mov	r6, r3
	if (argc!=2){
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d002      	beq.n	8005b1c <writeRaw+0x1c>
		respondErrorNumersArg();
 8005b16:	f7ff fc57 	bl	80053c8 <respondErrorNumersArg>
		return;
 8005b1a:	e08f      	b.n	8005c3c <writeRaw+0x13c>
	}
	size_t addr=atol(argv[0]);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fc83 	bl	800742c <atol>
 8005b26:	4603      	mov	r3, r0
 8005b28:	67fb      	str	r3, [r7, #124]	; 0x7c
	if ( addr >= ALL_SPI_FLASH_SIZE){
 8005b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b30:	d305      	bcc.n	8005b3e <writeRaw+0x3e>
		respondERROR();
 8005b32:	f7ff fc3f 	bl	80053b4 <respondERROR>
		printCli("Адрес задан вне допустимого диапазона");
 8005b36:	4844      	ldr	r0, [pc, #272]	; (8005c48 <writeRaw+0x148>)
 8005b38:	f001 fbaa 	bl	8007290 <printCli>
		return;
 8005b3c:	e07e      	b.n	8005c3c <writeRaw+0x13c>
	}
	size_t numbs=atol(argv[1]);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	3304      	adds	r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fc71 	bl	800742c <atol>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	67bb      	str	r3, [r7, #120]	; 0x78
	if (  ( numbs + addr )  >  ALL_SPI_FLASH_SIZE  ){
 8005b4e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b52:	4413      	add	r3, r2
 8005b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b58:	d905      	bls.n	8005b66 <writeRaw+0x66>
		respondERROR();
 8005b5a:	f7ff fc2b 	bl	80053b4 <respondERROR>
		printCli("Данные выйдут за границы флеш");
 8005b5e:	483b      	ldr	r0, [pc, #236]	; (8005c4c <writeRaw+0x14c>)
 8005b60:	f001 fb96 	bl	8007290 <printCli>
		return;
 8005b64:	e06a      	b.n	8005c3c <writeRaw+0x13c>
	}
	const char stroutmask[]= "из  этого терминала >> SPI flash, addr = %u Ns= %u байт в RAW\n\r";
 8005b66:	4a3a      	ldr	r2, [pc, #232]	; (8005c50 <writeRaw+0x150>)
 8005b68:	f107 0318 	add.w	r3, r7, #24
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	2255      	movs	r2, #85	; 0x55
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 fc89 	bl	8007488 <memcpy>
	char strout[strlen(stroutmask)+2];
 8005b76:	f107 0318 	add.w	r3, r7, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fb32 	bl	80001e4 <strlen>
 8005b80:	4603      	mov	r3, r0
 8005b82:	1c99      	adds	r1, r3, #2
 8005b84:	460b      	mov	r3, r1
 8005b86:	3b01      	subs	r3, #1
 8005b88:	677b      	str	r3, [r7, #116]	; 0x74
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4688      	mov	r8, r1
 8005b8e:	4699      	mov	r9, r3
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ba0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	461d      	mov	r5, r3
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	00eb      	lsls	r3, r5, #3
 8005bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb8:	00e2      	lsls	r2, r4, #3
 8005bba:	1dcb      	adds	r3, r1, #7
 8005bbc:	08db      	lsrs	r3, r3, #3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	ebad 0d03 	sub.w	sp, sp, r3
 8005bc4:	466b      	mov	r3, sp
 8005bc6:	3300      	adds	r3, #0
 8005bc8:	673b      	str	r3, [r7, #112]	; 0x70
	sprintf( strout , stroutmask , addr , numbs );
 8005bca:	f107 0118 	add.w	r1, r7, #24
 8005bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bd2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005bd4:	f001 fcea 	bl	80075ac <siprintf>
	printCli(strout);
 8005bd8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005bda:	f001 fb59 	bl	8007290 <printCli>
	printCli("'\n\r <<");
 8005bde:	481d      	ldr	r0, [pc, #116]	; (8005c54 <writeRaw+0x154>)
 8005be0:	f001 fb56 	bl	8007290 <printCli>

	nvm_t tNvm;
		tNvm.numbsWrite = numbs;
 8005be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be6:	613b      	str	r3, [r7, #16]
		tNvm.startAddrNvm = addr;
 8005be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bea:	60fb      	str	r3, [r7, #12]
		tNvm.passCallback = returnCliByte;
 8005bec:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <writeRaw+0x158>)
 8005bee:	617b      	str	r3, [r7, #20]
	if ( startNvm(&tNvm) ) {
 8005bf0:	f107 030c 	add.w	r3, r7, #12
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fb3b 	bl	8005270 <startNvm>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d013      	beq.n	8005c28 <writeRaw+0x128>
		dbugnl("Начато прослушивание");
 8005c00:	4816      	ldr	r0, [pc, #88]	; (8005c5c <writeRaw+0x15c>)
 8005c02:	f001 fc71 	bl	80074e8 <iprintf>
 8005c06:	f7fb f9e5 	bl	8000fd4 <HAL_GetTick>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4814      	ldr	r0, [pc, #80]	; (8005c60 <writeRaw+0x160>)
 8005c10:	f001 fc6a 	bl	80074e8 <iprintf>
 8005c14:	4813      	ldr	r0, [pc, #76]	; (8005c64 <writeRaw+0x164>)
 8005c16:	f001 fc67 	bl	80074e8 <iprintf>
		while ( threadNVM25Q80() );	//внимание! автомат nvm вызывается отсюда,
 8005c1a:	bf00      	nop
 8005c1c:	f7ff f962 	bl	8004ee4 <threadNVM25Q80>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1fa      	bne.n	8005c1c <writeRaw+0x11c>
 8005c26:	e002      	b.n	8005c2e <writeRaw+0x12e>
									//прочие задачи блокируются
									//сам будет вызывать функцию драйвера
									//для изъятия данных из потока
									//returnCliByte(..)
	}else{
		printCli("err: процесс NVM не начался, не удовлетворительные параметры, 2 вн. эшелон проверки");
 8005c28:	480f      	ldr	r0, [pc, #60]	; (8005c68 <writeRaw+0x168>)
 8005c2a:	f001 fb31 	bl	8007290 <printCli>
	}
	flushKeyboard();
 8005c2e:	f001 fb69 	bl	8007304 <flushKeyboard>
	printCli("\n\r ------ end recive ------");
 8005c32:	480e      	ldr	r0, [pc, #56]	; (8005c6c <writeRaw+0x16c>)
 8005c34:	f001 fb2c 	bl	8007290 <printCli>
 8005c38:	46b5      	mov	sp, r6
 8005c3a:	e000      	b.n	8005c3e <writeRaw+0x13e>
 8005c3c:	46b5      	mov	sp, r6
}
 8005c3e:	3784      	adds	r7, #132	; 0x84
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c46:	bf00      	nop
 8005c48:	08009b0c 	.word	0x08009b0c
 8005c4c:	08009b54 	.word	0x08009b54
 8005c50:	08009c78 	.word	0x08009c78
 8005c54:	08009b8c 	.word	0x08009b8c
 8005c58:	08005ac5 	.word	0x08005ac5
 8005c5c:	080097ac 	.word	0x080097ac
 8005c60:	08009b94 	.word	0x08009b94
 8005c64:	08009ba0 	.word	0x08009ba0
 8005c68:	08009bc8 	.word	0x08009bc8
 8005c6c:	08009c5c 	.word	0x08009c5c

08005c70 <erase>:


void erase( int argc , const char * const * argv ){
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	b097      	sub	sp, #92	; 0x5c
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
 8005c7c:	466b      	mov	r3, sp
 8005c7e:	461e      	mov	r6, r3
	if (argc!=2){
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d002      	beq.n	8005c8c <erase+0x1c>
		respondErrorNumersArg();
 8005c86:	f7ff fb9f 	bl	80053c8 <respondErrorNumersArg>
		return;
 8005c8a:	e085      	b.n	8005d98 <erase+0x128>
	}
	size_t addr=atol(argv[0]);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fbcb 	bl	800742c <atol>
 8005c96:	4603      	mov	r3, r0
 8005c98:	657b      	str	r3, [r7, #84]	; 0x54
	if ( addr >= ALL_SPI_FLASH_SIZE){
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca0:	d305      	bcc.n	8005cae <erase+0x3e>
		respondERROR();
 8005ca2:	f7ff fb87 	bl	80053b4 <respondERROR>
		printCli("Адрес задан вне допустимого диапазона");
 8005ca6:	483f      	ldr	r0, [pc, #252]	; (8005da4 <erase+0x134>)
 8005ca8:	f001 faf2 	bl	8007290 <printCli>
		return;
 8005cac:	e074      	b.n	8005d98 <erase+0x128>
	}
	size_t numbs=atol(argv[1]);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fbb9 	bl	800742c <atol>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
	if (  ( numbs + addr )  >  ALL_SPI_FLASH_SIZE  ){
 8005cbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cc8:	d905      	bls.n	8005cd6 <erase+0x66>
		respondERROR();
 8005cca:	f7ff fb73 	bl	80053b4 <respondERROR>
		printCli("Данные выйдут за границы флеш");
 8005cce:	4836      	ldr	r0, [pc, #216]	; (8005da8 <erase+0x138>)
 8005cd0:	f001 fade 	bl	8007290 <printCli>
		return;
 8005cd4:	e060      	b.n	8005d98 <erase+0x128>
	}
	const char stroutmask[]= "ERASE SPI flash, addr = %u Ns= %u байт \n\r";
 8005cd6:	4b35      	ldr	r3, [pc, #212]	; (8005dac <erase+0x13c>)
 8005cd8:	f107 0418 	add.w	r4, r7, #24
 8005cdc:	461d      	mov	r5, r3
 8005cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ce6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005cea:	c407      	stmia	r4!, {r0, r1, r2}
 8005cec:	8023      	strh	r3, [r4, #0]
	char strout[strlen(stroutmask)+2];
 8005cee:	f107 0318 	add.w	r3, r7, #24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fa fa76 	bl	80001e4 <strlen>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	1c99      	adds	r1, r3, #2
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d02:	2300      	movs	r3, #0
 8005d04:	468a      	mov	sl, r1
 8005d06:	469b      	mov	fp, r3
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4688      	mov	r8, r1
 8005d20:	4699      	mov	r9, r3
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d36:	1dcb      	adds	r3, r1, #7
 8005d38:	08db      	lsrs	r3, r3, #3
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8005d40:	466b      	mov	r3, sp
 8005d42:	3300      	adds	r3, #0
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
	sprintf( strout , stroutmask , addr , numbs );
 8005d46:	f107 0118 	add.w	r1, r7, #24
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005d50:	f001 fc2c 	bl	80075ac <siprintf>
	printCli(strout);
 8005d54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005d56:	f001 fa9b 	bl	8007290 <printCli>

	nvm_t tNvm;
		tNvm.numbsWrite = numbs;
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	613b      	str	r3, [r7, #16]
		tNvm.startAddrNvm = addr;
 8005d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d60:	60fb      	str	r3, [r7, #12]
		tNvm.passCallback = pfStreamForErase;
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <erase+0x140>)
 8005d64:	617b      	str	r3, [r7, #20]
	if ( startNvm(&tNvm) ) {
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fa80 	bl	8005270 <startNvm>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <erase+0x114>
		//
		while ( threadNVM25Q80() );	//внимание! автомат nvm вызывается отсюда,
 8005d76:	bf00      	nop
 8005d78:	f7ff f8b4 	bl	8004ee4 <threadNVM25Q80>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1fa      	bne.n	8005d78 <erase+0x108>
 8005d82:	e002      	b.n	8005d8a <erase+0x11a>
									//сам будет вызывать функцию драйвера
									//для изъятия данных из потока
									//returnCliByte(..)
		//
	}else{
		printCli("err: процесс NVM не начался, не удовлетворительные параметры, 2 вн. эшелон проверки");
 8005d84:	480b      	ldr	r0, [pc, #44]	; (8005db4 <erase+0x144>)
 8005d86:	f001 fa83 	bl	8007290 <printCli>
	}
	flushKeyboard();
 8005d8a:	f001 fabb 	bl	8007304 <flushKeyboard>
	printCli("\n\r ------ end recive ------");
 8005d8e:	480a      	ldr	r0, [pc, #40]	; (8005db8 <erase+0x148>)
 8005d90:	f001 fa7e 	bl	8007290 <printCli>
 8005d94:	46b5      	mov	sp, r6
 8005d96:	e000      	b.n	8005d9a <erase+0x12a>
 8005d98:	46b5      	mov	sp, r6
}
 8005d9a:	375c      	adds	r7, #92	; 0x5c
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da2:	bf00      	nop
 8005da4:	08009b0c 	.word	0x08009b0c
 8005da8:	08009b54 	.word	0x08009b54
 8005dac:	08009cd0 	.word	0x08009cd0
 8005db0:	08004e5b 	.word	0x08004e5b
 8005db4:	08009bc8 	.word	0x08009bc8
 8005db8:	08009c5c 	.word	0x08009c5c

08005dbc <userApp>:
#include <usb.h>



void userApp(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0

	initFlash25q();
 8005dc0:	f000 f8d4 	bl	8005f6c <initFlash25q>

	initCLI();
 8005dc4:	f001 fa00 	bl	80071c8 <initCLI>

	dbug ("\033[2J");    // ESC seq for clear entire screen
 8005dc8:	4815      	ldr	r0, [pc, #84]	; (8005e20 <userApp+0x64>)
 8005dca:	f001 fb8d 	bl	80074e8 <iprintf>
	dbug ("\033[H");     // ESC seq for move cursor at left-top corner
 8005dce:	4815      	ldr	r0, [pc, #84]	; (8005e24 <userApp+0x68>)
 8005dd0:	f001 fb8a 	bl	80074e8 <iprintf>
	dbugnl("Build: " __TIME__ " , " __DATE__ "\n\r");
 8005dd4:	4814      	ldr	r0, [pc, #80]	; (8005e28 <userApp+0x6c>)
 8005dd6:	f001 fb87 	bl	80074e8 <iprintf>
 8005dda:	f7fb f8fb 	bl	8000fd4 <HAL_GetTick>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4619      	mov	r1, r3
 8005de2:	4812      	ldr	r0, [pc, #72]	; (8005e2c <userApp+0x70>)
 8005de4:	f001 fb80 	bl	80074e8 <iprintf>
 8005de8:	4811      	ldr	r0, [pc, #68]	; (8005e30 <userApp+0x74>)
 8005dea:	f001 fb7d 	bl	80074e8 <iprintf>

	while (1){

		//
		threadNVM25Q80();
 8005dee:	f7ff f879 	bl	8004ee4 <threadNVM25Q80>
		//

		//!! thread - 01
	#ifdef __SW_CLI_HTREAD
		CLIthread();
 8005df2:	f001 fa17 	bl	8007224 <CLIthread>
	#endif
	//!! thread - 02
		HAL_Delay(1);
 8005df6:	2001      	movs	r0, #1
 8005df8:	f7fb f8f8 	bl	8000fec <HAL_Delay>
		static char c;
		if ((++c & 127) == 127){
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <userApp+0x78>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <userApp+0x78>)
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <userApp+0x78>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e10:	2b7f      	cmp	r3, #127	; 0x7f
 8005e12:	d1ec      	bne.n	8005dee <userApp+0x32>
			  HAL_GPIO_TogglePin(fromMX(BLINK));
 8005e14:	2120      	movs	r1, #32
 8005e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e1a:	f7fb fdef 	bl	80019fc <HAL_GPIO_TogglePin>
	while (1){
 8005e1e:	e7e6      	b.n	8005dee <userApp+0x32>
 8005e20:	08009d00 	.word	0x08009d00
 8005e24:	08009d08 	.word	0x08009d08
 8005e28:	08009d0c 	.word	0x08009d0c
 8005e2c:	08009d10 	.word	0x08009d10
 8005e30:	08009d1c 	.word	0x08009d1c
 8005e34:	20001c2c 	.word	0x20001c2c

08005e38 <selectFlashSpi>:

#include "w25Qxx.h"

#define SPITIMEOUTMS (3000)

void selectFlashSpi(void){
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
	if ( HAL_GPIO_ReadPin(fromMX(SPI_FLASH_CS)) == SET ){
 8005e3c:	2110      	movs	r1, #16
 8005e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e42:	f7fb fdab 	bl	800199c <HAL_GPIO_ReadPin>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d108      	bne.n	8005e5e <selectFlashSpi+0x26>
		HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),RESET);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2110      	movs	r1, #16
 8005e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e54:	f7fb fdba 	bl	80019cc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8005e58:	2001      	movs	r0, #1
 8005e5a:	f7fb f8c7 	bl	8000fec <HAL_Delay>
	}
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <deselectFlashSpi>:
void deselectFlashSpi(void){
 8005e62:	b580      	push	{r7, lr}
 8005e64:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),SET);
 8005e66:	2201      	movs	r2, #1
 8005e68:	2110      	movs	r1, #16
 8005e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e6e:	f7fb fdad 	bl	80019cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7fb f8ba 	bl	8000fec <HAL_Delay>
}
 8005e78:	bf00      	nop
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <sendDataSpi>:

void sendDataSpi(void* arg, uint16_t aNumbs ){
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	807b      	strh	r3, [r7, #2]
	t_spi_data TX = arg;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&HSPI25Q80
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4803      	ldr	r0, [pc, #12]	; (8005ea4 <sendDataSpi+0x28>)
 8005e96:	f7fd f98e 	bl	80031b6 <HAL_SPI_Transmit>
			, arg
			,aNumbs/*sizeof(t_spi_data)*/
			,SPITIMEOUTMS
			);

	return ;
 8005e9a:	bf00      	nop
}
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200001f0 	.word	0x200001f0

08005ea8 <sendByteSpi>:

void sendByteSpi(t_spi_data arg){
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
	t_spi_data TX = arg;
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	73fb      	strb	r3, [r7, #15]
	t_spi_data RX;
	HAL_SPI_Transmit(&HSPI25Q80
 8005eb6:	f107 010f 	add.w	r1, r7, #15
 8005eba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4803      	ldr	r0, [pc, #12]	; (8005ed0 <sendByteSpi+0x28>)
 8005ec2:	f7fd f978 	bl	80031b6 <HAL_SPI_Transmit>
			, &TX
			,1
			,SPITIMEOUTMS
			);

	return ( RX );
 8005ec6:	bf00      	nop
}
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	200001f0 	.word	0x200001f0

08005ed4 <getByteSpi>:

t_spi_data getByteSpi() {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
		t_spi_data RX;
		HAL_SPI_Receive(&HSPI25Q80
 8005eda:	1df9      	adds	r1, r7, #7
 8005edc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4804      	ldr	r0, [pc, #16]	; (8005ef4 <getByteSpi+0x20>)
 8005ee4:	f7fd fad5 	bl	8003492 <HAL_SPI_Receive>
				, &RX
				,1
				,SPITIMEOUTMS
				);
		return ( RX );
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
	}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200001f0 	.word	0x200001f0

08005ef8 <sleep>:

#include "w25q80def.h"

//t_spi_data (*_pfSpiGetSendByte)(t_spi_data) = &sendGetByteSpi;

static void sleep(uint32_t a){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	HAL_Delay(a);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fb f873 	bl	8000fec <HAL_Delay>
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <sendSpiData>:

void sendSpiData(t_spi_data* pArg,uint16_t numbs) {
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	807b      	strh	r3, [r7, #2]
	sendDataSpi(pArg,numbs);
 8005f1a:	887b      	ldrh	r3, [r7, #2]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff ffac 	bl	8005e7c <sendDataSpi>
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <sendSpiFlashByte>:

void sendSpiFlashByte(t_spi_data pArg) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
	sendByteSpi(pArg);
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ffb5 	bl	8005ea8 <sendByteSpi>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <getSpiByte>:

t_spi_data getSpiByte(){
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0
	return (getByteSpi());
 8005f4a:	f7ff ffc3 	bl	8005ed4 <getByteSpi>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <selectFlash25q>:


void selectFlash25q(){
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
	selectFlashSpi();
 8005f58:	f7ff ff6e 	bl	8005e38 <selectFlashSpi>
}
 8005f5c:	bf00      	nop
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <unselectFlash25q>:

void unselectFlash25q(){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	deselectFlashSpi();
 8005f64:	f7ff ff7d 	bl	8005e62 <deselectFlashSpi>
}
 8005f68:	bf00      	nop
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <initFlash25q>:

void initFlash25q(){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
	unselectFlash25q();
 8005f72:	f7ff fff5 	bl	8005f60 <unselectFlash25q>
	HAL_Delay(100);
 8005f76:	2064      	movs	r0, #100	; 0x64
 8005f78:	f7fb f838 	bl	8000fec <HAL_Delay>
	setResetModeFlash25q();
 8005f7c:	f000 f80a 	bl	8005f94 <setResetModeFlash25q>
	doResetFlash25q();
 8005f80:	f000 f811 	bl	8005fa6 <doResetFlash25q>
	uint8_t pVoid[3];
	getJedecIdFlash25q(pVoid);
 8005f84:	1d3b      	adds	r3, r7, #4
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 f88c 	bl	80060a4 <getJedecIdFlash25q>
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <setResetModeFlash25q>:

void setResetModeFlash25q() {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
	selectFlash25q();
 8005f98:	f7ff ffdc 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_ENABLE_RESET);
 8005f9c:	2066      	movs	r0, #102	; 0x66
 8005f9e:	f7ff ffc5 	bl	8005f2c <sendSpiFlashByte>
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <doResetFlash25q>:

void doResetFlash25q() {
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	af00      	add	r7, sp, #0
	selectFlash25q();
 8005faa:	f7ff ffd3 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_RESET);
 8005fae:	2099      	movs	r0, #153	; 0x99
 8005fb0:	f7ff ffbc 	bl	8005f2c <sendSpiFlashByte>
	unselectFlash25q();
 8005fb4:	f7ff ffd4 	bl	8005f60 <unselectFlash25q>
}
 8005fb8:	bf00      	nop
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <freeSpiFlash25q>:

void freeSpiFlash25q(){
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
	unselectFlash25q();
 8005fc0:	f7ff ffce 	bl	8005f60 <unselectFlash25q>
}
 8005fc4:	bf00      	nop
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <getStatusRegFlash25q>:


uint8_t getStatusRegFlash25q(spi_status_reg_t register_num) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
	selectFlash25q();
 8005fd2:	f7ff ffbf 	bl	8005f54 <selectFlash25q>
	uint8_t retStatus=0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
	if (register_num == SPIFLASH_REG1) {
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <getStatusRegFlash25q+0x28>
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_1);
 8005fe0:	2005      	movs	r0, #5
 8005fe2:	f7ff ffa3 	bl	8005f2c <sendSpiFlashByte>
		retStatus= getSpiByte();
 8005fe6:	f7ff ffae 	bl	8005f46 <getSpiByte>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]
 8005fee:	e009      	b.n	8006004 <getStatusRegFlash25q+0x3c>
	} else if (register_num == SPIFLASH_REG2) {
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d106      	bne.n	8006004 <getStatusRegFlash25q+0x3c>
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_2);
 8005ff6:	2035      	movs	r0, #53	; 0x35
 8005ff8:	f7ff ff98 	bl	8005f2c <sendSpiFlashByte>
		retStatus= (uint8_t) getSpiByte();
 8005ffc:	f7ff ffa3 	bl	8005f46 <getSpiByte>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
	}
	return retStatus;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <getUniqueIdFlash25q>:

	freeSpiFlash25q();
	return temp;
}

void getUniqueIdFlash25q(uint8_t *pRet) {
 800600e:	b590      	push	{r4, r7, lr}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]

	selectFlash25q();
 8006016:	f7ff ff9d 	bl	8005f54 <selectFlash25q>

	sendSpiFlashByte(FLASH25Q_COMMAND_UNIQUE_ID);
 800601a:	204b      	movs	r0, #75	; 0x4b
 800601c:	f7ff ff86 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8006020:	2000      	movs	r0, #0
 8006022:	f7ff ff83 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8006026:	2000      	movs	r0, #0
 8006028:	f7ff ff80 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 800602c:	2000      	movs	r0, #0
 800602e:	f7ff ff7d 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte(FLASH25Q_COMMAND_NOP);
 8006032:	2000      	movs	r0, #0
 8006034:	f7ff ff7a 	bl	8005f2c <sendSpiFlashByte>

	pRet[0] = (uint8_t) getSpiByte();
 8006038:	f7ff ff85 	bl	8005f46 <getSpiByte>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	701a      	strb	r2, [r3, #0]
	pRet[1] = (uint8_t) getSpiByte();
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	1c5c      	adds	r4, r3, #1
 8006048:	f7ff ff7d 	bl	8005f46 <getSpiByte>
 800604c:	4603      	mov	r3, r0
 800604e:	7023      	strb	r3, [r4, #0]
	pRet[2] = (uint8_t) getSpiByte();
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	1c9c      	adds	r4, r3, #2
 8006054:	f7ff ff77 	bl	8005f46 <getSpiByte>
 8006058:	4603      	mov	r3, r0
 800605a:	7023      	strb	r3, [r4, #0]
	pRet[3] = (uint8_t) getSpiByte();
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1cdc      	adds	r4, r3, #3
 8006060:	f7ff ff71 	bl	8005f46 <getSpiByte>
 8006064:	4603      	mov	r3, r0
 8006066:	7023      	strb	r3, [r4, #0]
	pRet[4] = (uint8_t) getSpiByte();
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	1d1c      	adds	r4, r3, #4
 800606c:	f7ff ff6b 	bl	8005f46 <getSpiByte>
 8006070:	4603      	mov	r3, r0
 8006072:	7023      	strb	r3, [r4, #0]
	pRet[5] = (uint8_t) getSpiByte();
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	1d5c      	adds	r4, r3, #5
 8006078:	f7ff ff65 	bl	8005f46 <getSpiByte>
 800607c:	4603      	mov	r3, r0
 800607e:	7023      	strb	r3, [r4, #0]
	pRet[6] = (uint8_t) getSpiByte();
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1d9c      	adds	r4, r3, #6
 8006084:	f7ff ff5f 	bl	8005f46 <getSpiByte>
 8006088:	4603      	mov	r3, r0
 800608a:	7023      	strb	r3, [r4, #0]
	pRet[7] = (uint8_t) getSpiByte();
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ddc      	adds	r4, r3, #7
 8006090:	f7ff ff59 	bl	8005f46 <getSpiByte>
 8006094:	4603      	mov	r3, r0
 8006096:	7023      	strb	r3, [r4, #0]

	freeSpiFlash25q();
 8006098:	f7ff ff90 	bl	8005fbc <freeSpiFlash25q>
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd90      	pop	{r4, r7, pc}

080060a4 <getJedecIdFlash25q>:

void getJedecIdFlash25q(uint8_t *pRet) {
 80060a4:	b590      	push	{r4, r7, lr}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	selectFlash25q();
 80060ac:	f7ff ff52 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_JEDEC_ID);
 80060b0:	209f      	movs	r0, #159	; 0x9f
 80060b2:	f7ff ff3b 	bl	8005f2c <sendSpiFlashByte>
	pRet[0] = getSpiByte();
 80060b6:	f7ff ff46 	bl	8005f46 <getSpiByte>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	701a      	strb	r2, [r3, #0]
	pRet[1] = getSpiByte();
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	1c5c      	adds	r4, r3, #1
 80060c6:	f7ff ff3e 	bl	8005f46 <getSpiByte>
 80060ca:	4603      	mov	r3, r0
 80060cc:	7023      	strb	r3, [r4, #0]
	pRet[2] = getSpiByte();
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	1c9c      	adds	r4, r3, #2
 80060d2:	f7ff ff38 	bl	8005f46 <getSpiByte>
 80060d6:	4603      	mov	r3, r0
 80060d8:	7023      	strb	r3, [r4, #0]
	freeSpiFlash25q();
 80060da:	f7ff ff6f 	bl	8005fbc <freeSpiFlash25q>
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}

080060e6 <sendAddr24Flash25q>:

static void sendAddr24Flash25q(uint32_t aAddr){
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
	//todo	if(ID >= W25Q256)	sendSpiFlashByte((aAddr & 0xFF000000) >> 24);
	sendSpiFlashByte((aAddr/65536)%256);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff19 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte((aAddr/256)%256);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff13 	bl	8005f2c <sendSpiFlashByte>
	sendSpiFlashByte(aAddr%256);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff ff0e 	bl	8005f2c <sendSpiFlashByte>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <readByteAddrFlash25q>:

uint8_t readByteAddrFlash25q(uint32_t aAddr) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	selectFlash25q();
 8006120:	f7ff ff18 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_READ_DATA);
 8006124:	2003      	movs	r0, #3
 8006126:	f7ff ff01 	bl	8005f2c <sendSpiFlashByte>
	sendAddr24Flash25q(aAddr);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ffdb 	bl	80060e6 <sendAddr24Flash25q>
	uint8_t retByte=getSpiByte();
 8006130:	f7ff ff09 	bl	8005f46 <getSpiByte>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
	unselectFlash25q();
 8006138:	f7ff ff12 	bl	8005f60 <unselectFlash25q>
	return retByte;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <readBlockDataFlash25q>:

void readBlockDataFlash25q(uint32_t aAddr, uint8_t *data_ptr, uint32_t read_len) {
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	dbugnl4("вычитываем readBlockDataFlash25q addr = %d , len = %d\n\r",aAddr,read_len);
 8006154:	4822      	ldr	r0, [pc, #136]	; (80061e0 <readBlockDataFlash25q+0x98>)
 8006156:	f001 f9c7 	bl	80074e8 <iprintf>
 800615a:	f7fa ff3b 	bl	8000fd4 <HAL_GetTick>
 800615e:	4603      	mov	r3, r0
 8006160:	4619      	mov	r1, r3
 8006162:	4820      	ldr	r0, [pc, #128]	; (80061e4 <readBlockDataFlash25q+0x9c>)
 8006164:	f001 f9c0 	bl	80074e8 <iprintf>
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	481e      	ldr	r0, [pc, #120]	; (80061e8 <readBlockDataFlash25q+0xa0>)
 800616e:	f001 f9bb 	bl	80074e8 <iprintf>
	selectFlash25q();
 8006172:	f7ff feef 	bl	8005f54 <selectFlash25q>

	sendSpiFlashByte(FLASH25Q_COMMAND_READ_DATA);
 8006176:	2003      	movs	r0, #3
 8006178:	f7ff fed8 	bl	8005f2c <sendSpiFlashByte>
	sendAddr24Flash25q(aAddr);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff ffb2 	bl	80060e6 <sendAddr24Flash25q>

	for (uint32_t i = 0; i < read_len; i++) {
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e021      	b.n	80061cc <readBlockDataFlash25q+0x84>
		if ( (i%64) == 0 ){ dbug4("\n\r%u:",i) ;}
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <readBlockDataFlash25q+0x52>
 8006192:	6979      	ldr	r1, [r7, #20]
 8006194:	4815      	ldr	r0, [pc, #84]	; (80061ec <readBlockDataFlash25q+0xa4>)
 8006196:	f001 f9a7 	bl	80074e8 <iprintf>
		if ( (i%8) == 0 ){ dbug4(" ") ;}
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <readBlockDataFlash25q+0x62>
 80061a4:	2020      	movs	r0, #32
 80061a6:	f001 f9b7 	bl	8007518 <putchar>
		data_ptr[i] = (uint8_t) getSpiByte();
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	18d4      	adds	r4, r2, r3
 80061b0:	f7ff fec9 	bl	8005f46 <getSpiByte>
 80061b4:	4603      	mov	r3, r0
 80061b6:	7023      	strb	r3, [r4, #0]
		dbug4("%c",data_ptr[i]);
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f9a9 	bl	8007518 <putchar>
	for (uint32_t i = 0; i < read_len; i++) {
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	3301      	adds	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d3d9      	bcc.n	8006188 <readBlockDataFlash25q+0x40>
	}
	unselectFlash25q();
 80061d4:	f7ff fec4 	bl	8005f60 <unselectFlash25q>

}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}
 80061e0:	08009d3c 	.word	0x08009d3c
 80061e4:	08009d40 	.word	0x08009d40
 80061e8:	08009d4c 	.word	0x08009d4c
 80061ec:	08009d90 	.word	0x08009d90

080061f0 <setEnableWriteFlash25q>:
	sendSpiFlashByte(FLASH25Q_COMMAND_WRITE_STATUS_REGS);
	sendSpiFlashByte(val_stat_reg_1);
	sendSpiFlashByte(val_stat_reg_2);
}

void setEnableWriteFlash25q() {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
	dbugnl4("enable W flash");
 80061f4:	480a      	ldr	r0, [pc, #40]	; (8006220 <setEnableWriteFlash25q+0x30>)
 80061f6:	f001 f977 	bl	80074e8 <iprintf>
 80061fa:	f7fa feeb 	bl	8000fd4 <HAL_GetTick>
 80061fe:	4603      	mov	r3, r0
 8006200:	4619      	mov	r1, r3
 8006202:	4808      	ldr	r0, [pc, #32]	; (8006224 <setEnableWriteFlash25q+0x34>)
 8006204:	f001 f970 	bl	80074e8 <iprintf>
 8006208:	4807      	ldr	r0, [pc, #28]	; (8006228 <setEnableWriteFlash25q+0x38>)
 800620a:	f001 f96d 	bl	80074e8 <iprintf>
	selectFlash25q();
 800620e:	f7ff fea1 	bl	8005f54 <selectFlash25q>
		sendSpiFlashByte(FLASH25Q_COMMAND_WRITE_ENABLE);
 8006212:	2006      	movs	r0, #6
 8006214:	f7ff fe8a 	bl	8005f2c <sendSpiFlashByte>
	unselectFlash25q();
 8006218:	f7ff fea2 	bl	8005f60 <unselectFlash25q>
}
 800621c:	bf00      	nop
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08009d3c 	.word	0x08009d3c
 8006224:	08009d40 	.word	0x08009d40
 8006228:	08009d98 	.word	0x08009d98

0800622c <waitEndWriteFlash25q>:
	uint8_t val = getStatusRegFlash25q(SPIFLASH_REG1);
	return ( val & S0BIT );
}
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

static void waitEndWriteFlash25q(){
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
	uint8_t StatusRegister1;
	selectFlash25q();;
 8006232:	f7ff fe8f 	bl	8005f54 <selectFlash25q>
	do{
		sendSpiFlashByte(FLASH25Q_COMMAND_READ_STATUS_REG_1);
 8006236:	2005      	movs	r0, #5
 8006238:	f7ff fe78 	bl	8005f2c <sendSpiFlashByte>
		StatusRegister1 = getSpiByte();
 800623c:	f7ff fe83 	bl	8005f46 <getSpiByte>
 8006240:	4603      	mov	r3, r0
 8006242:	71fb      	strb	r3, [r7, #7]
		sleep(1);
 8006244:	2001      	movs	r0, #1
 8006246:	f7ff fe57 	bl	8005ef8 <sleep>
	}
	while((StatusRegister1 & BUSY_BIT_C0) == BUSY_BIT_C0);
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <waitEndWriteFlash25q+0xa>

	unselectFlash25q();
 8006254:	f7ff fe84 	bl	8005f60 <unselectFlash25q>
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <writePageFlash25q>:
}
/*
 * @arg aNumb - кол-во записываемых данных, !не должен вылазить за страницу вн. кэша вн. флеша (256-aOffset)
 */

bool_t writePageFlash25q( uint32_t aPageAddr , uint8_t* pBuffer , uint32_t aNumb){
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]

	dbugnl4("writePageFlash25q( Addr = %d , разм. данных для записи = %d )" , aPageAddr	, aNumb );
 800626c:	4824      	ldr	r0, [pc, #144]	; (8006300 <writePageFlash25q+0xa0>)
 800626e:	f001 f93b 	bl	80074e8 <iprintf>
 8006272:	f7fa feaf 	bl	8000fd4 <HAL_GetTick>
 8006276:	4603      	mov	r3, r0
 8006278:	4619      	mov	r1, r3
 800627a:	4822      	ldr	r0, [pc, #136]	; (8006304 <writePageFlash25q+0xa4>)
 800627c:	f001 f934 	bl	80074e8 <iprintf>
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	4820      	ldr	r0, [pc, #128]	; (8006308 <writePageFlash25q+0xa8>)
 8006286:	f001 f92f 	bl	80074e8 <iprintf>

	if (  ( aNumb > PAGE_CACH_FLASH )  ||  ( aNumb == 0 )  ){
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006290:	d802      	bhi.n	8006298 <writePageFlash25q+0x38>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d115      	bne.n	80062c4 <writePageFlash25q+0x64>
		dbugerr("размера страницы посл. кэш флеш");
 8006298:	481c      	ldr	r0, [pc, #112]	; (800630c <writePageFlash25q+0xac>)
 800629a:	f001 f925 	bl	80074e8 <iprintf>
 800629e:	22ec      	movs	r2, #236	; 0xec
 80062a0:	491b      	ldr	r1, [pc, #108]	; (8006310 <writePageFlash25q+0xb0>)
 80062a2:	481c      	ldr	r0, [pc, #112]	; (8006314 <writePageFlash25q+0xb4>)
 80062a4:	f001 f920 	bl	80074e8 <iprintf>
 80062a8:	4815      	ldr	r0, [pc, #84]	; (8006300 <writePageFlash25q+0xa0>)
 80062aa:	f001 f91d 	bl	80074e8 <iprintf>
 80062ae:	f7fa fe91 	bl	8000fd4 <HAL_GetTick>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4619      	mov	r1, r3
 80062b6:	4813      	ldr	r0, [pc, #76]	; (8006304 <writePageFlash25q+0xa4>)
 80062b8:	f001 f916 	bl	80074e8 <iprintf>
 80062bc:	4816      	ldr	r0, [pc, #88]	; (8006318 <writePageFlash25q+0xb8>)
 80062be:	f001 f913 	bl	80074e8 <iprintf>
 80062c2:	e7fe      	b.n	80062c2 <writePageFlash25q+0x62>
//
//	if((aOffset + aNumb) > PAGE_CACH_FLASH)
//		aNumb = PAGE_CACH_FLASH - aOffset;
//

	waitEndWriteFlash25q();
 80062c4:	f7ff ffb2 	bl	800622c <waitEndWriteFlash25q>

	setEnableWriteFlash25q();
 80062c8:	f7ff ff92 	bl	80061f0 <setEnableWriteFlash25q>

	selectFlash25q();;
 80062cc:	f7ff fe42 	bl	8005f54 <selectFlash25q>

	sendSpiFlashByte(FLASH25Q_COMMAND_PAGE_PROGRAMM);
 80062d0:	2002      	movs	r0, #2
 80062d2:	f7ff fe2b 	bl	8005f2c <sendSpiFlashByte>

	sendAddr24Flash25q(aPageAddr);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff ff05 	bl	80060e6 <sendAddr24Flash25q>

	sendSpiData( pBuffer, aNumb );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	68b8      	ldr	r0, [r7, #8]
 80062e4:	f7ff fe13 	bl	8005f0e <sendSpiData>

	unselectFlash25q();//подтверждение начала записи
 80062e8:	f7ff fe3a 	bl	8005f60 <unselectFlash25q>

	waitEndWriteFlash25q();
 80062ec:	f7ff ff9e 	bl	800622c <waitEndWriteFlash25q>

	unselectFlash25q();
 80062f0:	f7ff fe36 	bl	8005f60 <unselectFlash25q>

	return TRUE;
 80062f4:	2301      	movs	r3, #1
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08009d3c 	.word	0x08009d3c
 8006304:	08009d40 	.word	0x08009d40
 8006308:	08009da8 	.word	0x08009da8
 800630c:	08009dfc 	.word	0x08009dfc
 8006310:	08009e08 	.word	0x08009e08
 8006314:	08009e2c 	.word	0x08009e2c
 8006318:	08009e4c 	.word	0x08009e4c

0800631c <writeSectorFlash25q>:


bool_t writeSectorFlash25q(uint32_t aSectorAddr , uint8_t *pBuffer , uint32_t aNumbs){
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
	dbugnl4("writeSectorFlash25q( Addr = %lu , разм. данных для записи = %lu )"
 8006328:	4827      	ldr	r0, [pc, #156]	; (80063c8 <writeSectorFlash25q+0xac>)
 800632a:	f001 f8dd 	bl	80074e8 <iprintf>
 800632e:	f7fa fe51 	bl	8000fd4 <HAL_GetTick>
 8006332:	4603      	mov	r3, r0
 8006334:	4619      	mov	r1, r3
 8006336:	4825      	ldr	r0, [pc, #148]	; (80063cc <writeSectorFlash25q+0xb0>)
 8006338:	f001 f8d6 	bl	80074e8 <iprintf>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	4823      	ldr	r0, [pc, #140]	; (80063d0 <writeSectorFlash25q+0xb4>)
 8006342:	f001 f8d1 	bl	80074e8 <iprintf>
			,aSectorAddr	,aNumbs	);

	if ( (aSectorAddr>ALL_SPI_FLASH_SIZE) || (aNumbs>ALL_SPI_FLASH_SIZE) ) {
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634c:	d803      	bhi.n	8006356 <writeSectorFlash25q+0x3a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006354:	d901      	bls.n	800635a <writeSectorFlash25q+0x3e>
		return FALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	e031      	b.n	80063be <writeSectorFlash25q+0xa2>
	}
	int32_t n = aNumbs;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	61fb      	str	r3, [r7, #28]
	uint8_t* pSrc;pSrc=pBuffer;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	61bb      	str	r3, [r7, #24]
	uint32_t addrSrc=aSectorAddr;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	617b      	str	r3, [r7, #20]

	if (addrSrc % ALL_SPI_FLASH_SIZE != 0){
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800636c:	2b00      	cmp	r3, #0
 800636e:	d022      	beq.n	80063b6 <writeSectorFlash25q+0x9a>
		dbugw("addr не выровнен по странице");
 8006370:	4818      	ldr	r0, [pc, #96]	; (80063d4 <writeSectorFlash25q+0xb8>)
 8006372:	f001 f8b9 	bl	80074e8 <iprintf>
 8006376:	4814      	ldr	r0, [pc, #80]	; (80063c8 <writeSectorFlash25q+0xac>)
 8006378:	f001 f8b6 	bl	80074e8 <iprintf>
 800637c:	f7fa fe2a 	bl	8000fd4 <HAL_GetTick>
 8006380:	4603      	mov	r3, r0
 8006382:	4619      	mov	r1, r3
 8006384:	4811      	ldr	r0, [pc, #68]	; (80063cc <writeSectorFlash25q+0xb0>)
 8006386:	f001 f8af 	bl	80074e8 <iprintf>
 800638a:	4813      	ldr	r0, [pc, #76]	; (80063d8 <writeSectorFlash25q+0xbc>)
 800638c:	f001 f8ac 	bl	80074e8 <iprintf>
	}

	while( n > 0 ){
 8006390:	e011      	b.n	80063b6 <writeSectorFlash25q+0x9a>
		writePageFlash25q( addrSrc , pSrc , PAGE_CACH_FLASH );
 8006392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	6978      	ldr	r0, [r7, #20]
 800639a:	f7ff ff61 	bl	8006260 <writePageFlash25q>
		addrSrc += PAGE_CACH_FLASH;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063a4:	617b      	str	r3, [r7, #20]
		pSrc += PAGE_CACH_FLASH;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063ac:	61bb      	str	r3, [r7, #24]
		n -= PAGE_CACH_FLASH;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80063b4:	61fb      	str	r3, [r7, #28]
	while( n > 0 ){
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dcea      	bgt.n	8006392 <writeSectorFlash25q+0x76>
	}
	return TRUE;
 80063bc:	2301      	movs	r3, #1
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	08009d3c 	.word	0x08009d3c
 80063cc:	08009d40 	.word	0x08009d40
 80063d0:	08009e88 	.word	0x08009e88
 80063d4:	08009ee0 	.word	0x08009ee0
 80063d8:	08009efc 	.word	0x08009efc

080063dc <eraseSector4kFlash25q>:

void eraseSector4kFlash25q(uint32_t aAddr_sector) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	dbugnl4("eraseSector4kFlash25q( addr = %09u )" , aAddr_sector );
 80063e4:	4820      	ldr	r0, [pc, #128]	; (8006468 <eraseSector4kFlash25q+0x8c>)
 80063e6:	f001 f87f 	bl	80074e8 <iprintf>
 80063ea:	f7fa fdf3 	bl	8000fd4 <HAL_GetTick>
 80063ee:	4603      	mov	r3, r0
 80063f0:	4619      	mov	r1, r3
 80063f2:	481e      	ldr	r0, [pc, #120]	; (800646c <eraseSector4kFlash25q+0x90>)
 80063f4:	f001 f878 	bl	80074e8 <iprintf>
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	481d      	ldr	r0, [pc, #116]	; (8006470 <eraseSector4kFlash25q+0x94>)
 80063fc:	f001 f874 	bl	80074e8 <iprintf>
	//ERASE THE SPECIFIED SECTOR (4KB)
	unselectFlash25q();
 8006400:	f7ff fdae 	bl	8005f60 <unselectFlash25q>
	setEnableWriteFlash25q();
 8006404:	f7ff fef4 	bl	80061f0 <setEnableWriteFlash25q>

	selectFlash25q();
 8006408:	f7ff fda4 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_SECTOR_ERASE_4KB);
 800640c:	2020      	movs	r0, #32
 800640e:	f7ff fd8d 	bl	8005f2c <sendSpiFlashByte>
	sendAddr24Flash25q(aAddr_sector);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fe67 	bl	80060e6 <sendAddr24Flash25q>
	unselectFlash25q();
 8006418:	f7ff fda2 	bl	8005f60 <unselectFlash25q>

	dbugnl4("..wait..");timerStart();
 800641c:	4812      	ldr	r0, [pc, #72]	; (8006468 <eraseSector4kFlash25q+0x8c>)
 800641e:	f001 f863 	bl	80074e8 <iprintf>
 8006422:	f7fa fdd7 	bl	8000fd4 <HAL_GetTick>
 8006426:	4603      	mov	r3, r0
 8006428:	4619      	mov	r1, r3
 800642a:	4810      	ldr	r0, [pc, #64]	; (800646c <eraseSector4kFlash25q+0x90>)
 800642c:	f001 f85c 	bl	80074e8 <iprintf>
 8006430:	4810      	ldr	r0, [pc, #64]	; (8006474 <eraseSector4kFlash25q+0x98>)
 8006432:	f001 f859 	bl	80074e8 <iprintf>
 8006436:	f000 f895 	bl	8006564 <timerStart>
	waitEndWriteFlash25q();
 800643a:	f7ff fef7 	bl	800622c <waitEndWriteFlash25q>
	dbugnl4("%u ms erase sector (~30ms)",retTimeStamp());
 800643e:	480a      	ldr	r0, [pc, #40]	; (8006468 <eraseSector4kFlash25q+0x8c>)
 8006440:	f001 f852 	bl	80074e8 <iprintf>
 8006444:	f7fa fdc6 	bl	8000fd4 <HAL_GetTick>
 8006448:	4603      	mov	r3, r0
 800644a:	4619      	mov	r1, r3
 800644c:	4807      	ldr	r0, [pc, #28]	; (800646c <eraseSector4kFlash25q+0x90>)
 800644e:	f001 f84b 	bl	80074e8 <iprintf>
 8006452:	f000 f88f 	bl	8006574 <retTimeStamp>
 8006456:	4603      	mov	r3, r0
 8006458:	4619      	mov	r1, r3
 800645a:	4807      	ldr	r0, [pc, #28]	; (8006478 <eraseSector4kFlash25q+0x9c>)
 800645c:	f001 f844 	bl	80074e8 <iprintf>

}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	08009d3c 	.word	0x08009d3c
 800646c:	08009d40 	.word	0x08009d40
 8006470:	08009f30 	.word	0x08009f30
 8006474:	08009f58 	.word	0x08009f58
 8006478:	08009f64 	.word	0x08009f64

0800647c <eraseAllChipFlash25q>:

	sendSpiFlashByte(FLASH25Q_COMMAND_BLOCK_ERASE_64KB);
	sendAddr24Flash25q(aBlock);
}

void eraseAllChipFlash25q() {
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0

	unselectFlash25q();
 8006480:	f7ff fd6e 	bl	8005f60 <unselectFlash25q>

	setEnableWriteFlash25q();
 8006484:	f7ff feb4 	bl	80061f0 <setEnableWriteFlash25q>

	selectFlash25q();
 8006488:	f7ff fd64 	bl	8005f54 <selectFlash25q>
	sendSpiFlashByte(FLASH25Q_COMMAND_CHIP_ERASE);
 800648c:	20c7      	movs	r0, #199	; 0xc7
 800648e:	f7ff fd4d 	bl	8005f2c <sendSpiFlashByte>
	unselectFlash25q();
 8006492:	f7ff fd65 	bl	8005f60 <unselectFlash25q>

	dbugnl4("..wait..");timerStart();
 8006496:	4812      	ldr	r0, [pc, #72]	; (80064e0 <eraseAllChipFlash25q+0x64>)
 8006498:	f001 f826 	bl	80074e8 <iprintf>
 800649c:	f7fa fd9a 	bl	8000fd4 <HAL_GetTick>
 80064a0:	4603      	mov	r3, r0
 80064a2:	4619      	mov	r1, r3
 80064a4:	480f      	ldr	r0, [pc, #60]	; (80064e4 <eraseAllChipFlash25q+0x68>)
 80064a6:	f001 f81f 	bl	80074e8 <iprintf>
 80064aa:	480f      	ldr	r0, [pc, #60]	; (80064e8 <eraseAllChipFlash25q+0x6c>)
 80064ac:	f001 f81c 	bl	80074e8 <iprintf>
 80064b0:	f000 f858 	bl	8006564 <timerStart>
	waitEndWriteFlash25q();
 80064b4:	f7ff feba 	bl	800622c <waitEndWriteFlash25q>
	dbugnl4("%u ms erase sector (~2000ms <6000ms)",retTimeStamp());
 80064b8:	4809      	ldr	r0, [pc, #36]	; (80064e0 <eraseAllChipFlash25q+0x64>)
 80064ba:	f001 f815 	bl	80074e8 <iprintf>
 80064be:	f7fa fd89 	bl	8000fd4 <HAL_GetTick>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4619      	mov	r1, r3
 80064c6:	4807      	ldr	r0, [pc, #28]	; (80064e4 <eraseAllChipFlash25q+0x68>)
 80064c8:	f001 f80e 	bl	80074e8 <iprintf>
 80064cc:	f000 f852 	bl	8006574 <retTimeStamp>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4619      	mov	r1, r3
 80064d4:	4805      	ldr	r0, [pc, #20]	; (80064ec <eraseAllChipFlash25q+0x70>)
 80064d6:	f001 f807 	bl	80074e8 <iprintf>

}
 80064da:	bf00      	nop
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08009d3c 	.word	0x08009d3c
 80064e4:	08009d40 	.word	0x08009d40
 80064e8:	08009f58 	.word	0x08009f58
 80064ec:	08009f80 	.word	0x08009f80

080064f0 <__io_putchar>:

#ifdef DBUG_HUART

extern UART_HandleTypeDef DBUG_HUART;

int __io_putchar(int ch){
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&DBUG_HUART, (uint8_t*) &ch, 1, 1);
 80064f8:	1d39      	adds	r1, r7, #4
 80064fa:	2301      	movs	r3, #1
 80064fc:	2201      	movs	r2, #1
 80064fe:	4804      	ldr	r0, [pc, #16]	; (8006510 <__io_putchar+0x20>)
 8006500:	f7fd fd14 	bl	8003f2c <HAL_UART_Transmit>

	return ch;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200002bc 	.word	0x200002bc

08006514 <getTickUtils>:
/*
 * \brief В случе отсутствия системного таймера,
 * \brief завести таймер времени в мс с разрядностью не ниже 32 бита
 * \return Возращает значение системного времени в мс
 */
size_t getTickUtils(){
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
	size_t count;
#if ESP32IDF
	timer_get_counter_value(TIMER_GROUP_0, TIMER_0,&count);
#elif STM32CUBE
	count=HAL_GetTick();
 800651a:	f7fa fd5b 	bl	8000fd4 <HAL_GetTick>
 800651e:	6078      	str	r0, [r7, #4]

#else
#warning секцию не удалять, человекам-снежинкам вход запрещен!
#error реализовать таймер времени в мс с разрядностью не ниже 32 бита в отдельной секции выше!
#endif
	return (  (size_t) count  );
 8006520:	687b      	ldr	r3, [r7, #4]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <getTimeoutVolue>:
/*
 * \return функция возращает значение системного таймера, после которого наступит превышение интервала
 * \brief при использовании таймера
 */
size_t getTimeoutVolue(size_t Atime){
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
	return ( getTickUtils() + Atime );
 8006532:	f7ff ffef 	bl	8006514 <getTickUtils>
 8006536:	4602      	mov	r2, r0
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4413      	add	r3, r2
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <resetTimeoutNewVolue>:
/*
 * \brief Установка локального таймера внутри данной библиотеки утилит, проверять в isNotTimeout()
 */
static size_t timeEnd=-1;
void resetTimeoutNewVolue(size_t Atimeout){
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	timeEnd=getTimeoutVolue(Atimeout);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ffec 	bl	800652a <getTimeoutVolue>
 8006552:	4603      	mov	r3, r0
 8006554:	4a02      	ldr	r2, [pc, #8]	; (8006560 <resetTimeoutNewVolue+0x1c>)
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000164 	.word	0x20000164

08006564 <timerStart>:
	return ( getTickUtils() < timeEnd );
}
/*
 * засекает время
 */
void timerStart(){
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
	resetTimeoutNewVolue(0);
 8006568:	2000      	movs	r0, #0
 800656a:	f7ff ffeb 	bl	8006544 <resetTimeoutNewVolue>
}
 800656e:	bf00      	nop
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <retTimeStamp>:
/*
 * возращает время от засечки в мс
 */
size_t retTimeStamp(){
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
	return ( getTickUtils() - timeEnd );
 8006578:	f7ff ffcc 	bl	8006514 <getTickUtils>
 800657c:	4602      	mov	r2, r0
 800657e:	4b02      	ldr	r3, [pc, #8]	; (8006588 <retTimeStamp+0x14>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	1ad3      	subs	r3, r2, r3
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000164 	.word	0x20000164

0800658c <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	5c8a      	ldrb	r2, [r1, r2]
 80065a0:	4413      	add	r3, r2
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b3f      	cmp	r3, #63	; 0x3f
 80065aa:	dd02      	ble.n	80065b2 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3b40      	subs	r3, #64	; 0x40
 80065b0:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	5cd3      	ldrb	r3, [r2, r3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <hist_is_space_for_new+0x1a>
		return true;
 80065da:	2301      	movs	r3, #1
 80065dc:	e01e      	b.n	800661c <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	429a      	cmp	r2, r3
 80065e8:	db0c      	blt.n	8006604 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	4413      	add	r3, r2
 80065f8:	3b01      	subs	r3, #1
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	da0c      	bge.n	800661a <hist_is_space_for_new+0x56>
			return true;
 8006600:	2301      	movs	r3, #1
 8006602:	e00b      	b.n	800661c <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	da01      	bge.n	800661a <hist_is_space_for_new+0x56>
			return true;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <hist_is_space_for_new+0x58>
	}
	return false;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b3e      	cmp	r3, #62	; 0x3e
 8006638:	dc61      	bgt.n	80066fe <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 800663a:	e002      	b.n	8006642 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff ffa5 	bl	800658c <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ffbd 	bl	80065c4 <hist_is_space_for_new>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f5      	beq.n	800663c <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	5cd3      	ldrb	r3, [r2, r3]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	b2d1      	uxtb	r1, r2
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	da0a      	bge.n	800668c <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	3301      	adds	r3, #1
 800667e:	4413      	add	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 feff 	bl	8007488 <memcpy>
 800668a:	e018      	b.n	80066be <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8006694:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	3301      	adds	r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 feef 	bl	8007488 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	18d1      	adds	r1, r2, r3
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	461a      	mov	r2, r3
 80066ba:	f000 fee5 	bl	8007488 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	b2d1      	uxtb	r1, r2
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	2b3f      	cmp	r3, #63	; 0x3f
 80066de:	dd05      	ble.n	80066ec <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e4:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	2100      	movs	r1, #0
 80066f4:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	649a      	str	r2, [r3, #72]	; 0x48
 80066fc:	e000      	b.n	8006700 <hist_save_line+0xd8>
		return;
 80066fe:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08c      	sub	sp, #48	; 0x30
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 800671c:	e010      	b.n	8006740 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	4413      	add	r3, r2
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672a:	4413      	add	r3, r2
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	2b3f      	cmp	r3, #63	; 0x3f
 8006732:	dd02      	ble.n	800673a <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	3b40      	subs	r3, #64	; 0x40
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	3301      	adds	r3, #1
 800673e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	4413      	add	r3, r2
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e8      	bne.n	800671e <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d176      	bne.n	8006840 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006758:	429a      	cmp	r2, r3
 800675a:	f2c0 80d6 	blt.w	800690a <hist_restore_line+0x204>
			int header = pThis->begin;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8006768:	e010      	b.n	800678c <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	4413      	add	r3, r2
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006776:	4413      	add	r3, r2
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	2b3f      	cmp	r3, #63	; 0x3f
 800677e:	dd02      	ble.n	8006786 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	3b40      	subs	r3, #64	; 0x40
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	3301      	adds	r3, #1
 800678a:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	4413      	add	r3, r2
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <hist_restore_line+0xa2>
 8006798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d1e0      	bne.n	800676a <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	4413      	add	r3, r2
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80aa 	beq.w	800690a <hist_restore_line+0x204>
					pThis->cur++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	4413      	add	r3, r2
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	4413      	add	r3, r2
 80067ce:	2b3f      	cmp	r3, #63	; 0x3f
 80067d0:	dc11      	bgt.n	80067f6 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80067d2:	2265      	movs	r2, #101	; 0x65
 80067d4:	2100      	movs	r1, #0
 80067d6:	68b8      	ldr	r0, [r7, #8]
 80067d8:	f000 fe7e 	bl	80074d8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	3301      	adds	r3, #1
 80067e2:	18d1      	adds	r1, r2, r3
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	4413      	add	r3, r2
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	68b8      	ldr	r0, [r7, #8]
 80067f0:	f000 fe4a 	bl	8007488 <memcpy>
 80067f4:	e01f      	b.n	8006836 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80067fc:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80067fe:	2265      	movs	r2, #101	; 0x65
 8006800:	2100      	movs	r1, #0
 8006802:	68b8      	ldr	r0, [r7, #8]
 8006804:	f000 fe68 	bl	80074d8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	3301      	adds	r3, #1
 800680e:	4413      	add	r3, r2
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4619      	mov	r1, r3
 8006814:	68b8      	ldr	r0, [r7, #8]
 8006816:	f000 fe37 	bl	8007488 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	18d0      	adds	r0, r2, r3
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	4413      	add	r3, r2
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	461a      	mov	r2, r3
 8006832:	f000 fe29 	bl	8007488 <memcpy>
				}
				return pThis->ring_buf[header];
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	4413      	add	r3, r2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	e066      	b.n	800690e <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd5e      	ble.n	8006906 <hist_restore_line+0x200>
				pThis->cur--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800685c:	e010      	b.n	8006880 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3301      	adds	r3, #1
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b3f      	cmp	r3, #63	; 0x3f
 8006872:	dd02      	ble.n	800687a <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	3b40      	subs	r3, #64	; 0x40
 8006878:	61fb      	str	r3, [r7, #28]
				j++;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	3301      	adds	r3, #1
 800687e:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <hist_restore_line+0x194>
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006896:	429a      	cmp	r2, r3
 8006898:	d1e1      	bne.n	800685e <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	4413      	add	r3, r2
 80068a8:	2b3f      	cmp	r3, #63	; 0x3f
 80068aa:	dc0c      	bgt.n	80068c6 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3301      	adds	r3, #1
 80068b2:	18d1      	adds	r1, r2, r3
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	68b8      	ldr	r0, [r7, #8]
 80068c0:	f000 fde2 	bl	8007488 <memcpy>
 80068c4:	e01a      	b.n	80068fc <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80068cc:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4619      	mov	r1, r3
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f000 fdd4 	bl	8007488 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	18d0      	adds	r0, r2, r3
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	f000 fdc6 	bl	8007488 <memcpy>
			}
			return pThis->ring_buf[header];
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	e003      	b.n	800690e <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8006906:	2300      	movs	r3, #0
 8006908:	e001      	b.n	800690e <hist_restore_line+0x208>
		}
	}
	return -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800690e:	4618      	mov	r0, r3
 8006910:	3730      	adds	r7, #48	; 0x30
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
	int i = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 800692a:	e002      	b.n	8006932 <split+0x1c>
			ind++;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3301      	adds	r3, #1
 8006930:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4413      	add	r3, r2
 8006938:	3354      	adds	r3, #84	; 0x54
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d103      	bne.n	8006948 <split+0x32>
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	429a      	cmp	r2, r3
 8006946:	dbf1      	blt.n	800692c <split+0x16>
		}
		if (!(ind < limit)) return i;
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	db01      	blt.n	8006954 <split+0x3e>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	e024      	b.n	800699e <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1c58      	adds	r0, r3, #1
 8006960:	6178      	str	r0, [r7, #20]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4403      	add	r3, r0
 8006968:	440a      	add	r2, r1
 800696a:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b1f      	cmp	r3, #31
 8006970:	dd05      	ble.n	800697e <split+0x68>
			return -1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006976:	e012      	b.n	800699e <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3301      	adds	r3, #1
 800697c:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	3354      	adds	r3, #84	; 0x54
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <split+0x7e>
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	dbf1      	blt.n	8006978 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	dbca      	blt.n	8006932 <split+0x1c>
 800699c:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 800699e:	4618      	mov	r0, r3
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80069d6:	4803      	ldr	r0, [pc, #12]	; (80069e4 <terminal_backspace+0x1c>)
 80069d8:	4798      	blx	r3
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08009fc4 	.word	0x08009fc4

080069e8 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80069f6:	4803      	ldr	r0, [pc, #12]	; (8006a04 <terminal_newline+0x1c>)
 80069f8:	4798      	blx	r3
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	08009fcc 	.word	0x08009fcc

08006a08 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8006a12:	2300      	movs	r3, #0
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	f107 030c 	add.w	r3, r7, #12
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	605a      	str	r2, [r3, #4]
 8006a20:	609a      	str	r2, [r3, #8]
#ifdef _USE_LIBC_STDIO 
	if (offset > 0) {
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd07      	ble.n	8006a38 <terminal_move_cursor+0x30>
		snprintf (str, 16, "\033[%dC", offset);
 8006a28:	f107 0008 	add.w	r0, r7, #8
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	4a0d      	ldr	r2, [pc, #52]	; (8006a64 <terminal_move_cursor+0x5c>)
 8006a30:	2110      	movs	r1, #16
 8006a32:	f000 fd87 	bl	8007544 <sniprintf>
 8006a36:	e00a      	b.n	8006a4e <terminal_move_cursor+0x46>
	} else if (offset < 0) {
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	da07      	bge.n	8006a4e <terminal_move_cursor+0x46>
		snprintf (str, 16, "\033[%dD", -(offset));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	425b      	negs	r3, r3
 8006a42:	f107 0008 	add.w	r0, r7, #8
 8006a46:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <terminal_move_cursor+0x60>)
 8006a48:	2110      	movs	r1, #16
 8006a4a:	f000 fd7b 	bl	8007544 <sniprintf>
		endstr = u16bit_to_str (-(offset), str+2);
		strcpy (endstr, "D");
	} else
		return;
#endif	
	pThis->print (str);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006a54:	f107 0208 	add.w	r2, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	08009fd0 	.word	0x08009fd0
 8006a68:	08009fd8 	.word	0x08009fd8

08006a6c <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	6078      	str	r0, [r7, #4]
	char str[16];
#ifdef _USE_LIBC_STDIO
	snprintf (str, 16, "\033[%dD\033[%dC", \
 8006a74:	f107 0008 	add.w	r0, r7, #8
 8006a78:	230d      	movs	r3, #13
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2374      	movs	r3, #116	; 0x74
 8006a7e:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <terminal_reset_cursor+0x30>)
 8006a80:	2110      	movs	r1, #16
 8006a82:	f000 fd5f 	bl	8007544 <sniprintf>
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
	strcpy (endstr, "D\033["); endstr += 3;
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
	strcpy (endstr, "C");
#endif
	pThis->print (str);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	08009fe0 	.word	0x08009fe0

08006aa0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006ab2:	4816      	ldr	r0, [pc, #88]	; (8006b0c <terminal_print_line+0x6c>)
 8006ab4:	4798      	blx	r3

	char nch [] = {0,0};
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e014      	b.n	8006aea <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3354      	adds	r3, #84	; 0x54
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8006acc:	7c3b      	ldrb	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <terminal_print_line+0x36>
			nch[0] = ' ';
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006adc:	f107 0210 	add.w	r2, r7, #16
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	dbe4      	blt.n	8006ac0 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff ffb8 	bl	8006a6c <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff ff82 	bl	8006a08 <terminal_move_cursor>
}
 8006b04:	bf00      	nop
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08009fec 	.word	0x08009fec

08006b10 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3354      	adds	r3, #84	; 0x54
 8006b1e:	2265      	movs	r2, #101	; 0x65
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fcd8 	bl	80074d8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	2240      	movs	r2, #64	; 0x40
 8006b2e:	2100      	movs	r1, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fcd1 	bl	80074d8 <memset>
	pThis->ring_hist.begin = 0;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <microrl_init+0x78>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20000168 	.word	0x20000168

08006b8c <microrl_set_execute_callback>:
	pThis->get_completion = get_completion;
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <microrl_set_sigint_callback>:
//}

#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	1d18      	adds	r0, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3354      	adds	r3, #84	; 0x54
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7ff fd92 	bl	8006706 <hist_restore_line>
 8006be2:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	db1a      	blt.n	8006c20 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	3354      	adds	r3, #84	; 0x54
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff ff2e 	bl	8006a6c <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c16:	461a      	mov	r2, r3
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff ff40 	bl	8006aa0 <terminal_print_line>
	}
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b5b      	cmp	r3, #91	; 0x5b
 8006c38:	d104      	bne.n	8006c44 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
		return 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e07b      	b.n	8006d3c <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d14f      	bne.n	8006cec <escape_process+0xc4>
		if (ch == 'A') {
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	2b41      	cmp	r3, #65	; 0x41
 8006c50:	d105      	bne.n	8006c5e <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8006c52:	2100      	movs	r1, #0
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ffb7 	bl	8006bc8 <hist_search>
#endif
			return 1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e06e      	b.n	8006d3c <escape_process+0x114>
		} else if (ch == 'B') {
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	2b42      	cmp	r3, #66	; 0x42
 8006c62:	d105      	bne.n	8006c70 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff ffae 	bl	8006bc8 <hist_search>
#endif
			return 1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e065      	b.n	8006d3c <escape_process+0x114>
		} else if (ch == 'C') {
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	2b43      	cmp	r3, #67	; 0x43
 8006c74:	d114      	bne.n	8006ca0 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006c82:	429a      	cmp	r2, r3
 8006c84:	da0a      	bge.n	8006c9c <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8006c86:	2101      	movs	r1, #1
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff febd 	bl	8006a08 <terminal_move_cursor>
				pThis->cursor++;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e04d      	b.n	8006d3c <escape_process+0x114>
		} else if (ch == 'D') {
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	2b44      	cmp	r3, #68	; 0x44
 8006ca4:	d112      	bne.n	8006ccc <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd0b      	ble.n	8006cc8 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8006cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fea7 	bl	8006a08 <terminal_move_cursor>
				pThis->cursor--;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e037      	b.n	8006d3c <escape_process+0x114>
		} else if (ch == '7') {
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	2b37      	cmp	r3, #55	; 0x37
 8006cd0:	d104      	bne.n	8006cdc <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	701a      	strb	r2, [r3, #0]
			return 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e02f      	b.n	8006d3c <escape_process+0x114>
		} else if (ch == '8') {
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	2b38      	cmp	r3, #56	; 0x38
 8006ce0:	d12b      	bne.n	8006d3a <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	701a      	strb	r2, [r3, #0]
			return 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e027      	b.n	8006d3c <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b7e      	cmp	r3, #126	; 0x7e
 8006cf0:	d123      	bne.n	8006d3a <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d108      	bne.n	8006d0c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff feb6 	bl	8006a6c <terminal_reset_cursor>
			pThis->cursor = 0;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e017      	b.n	8006d3c <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d112      	bne.n	8006d3a <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe6f 	bl	8006a08 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8006d3a:	2301      	movs	r3, #1
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	2b64      	cmp	r3, #100	; 0x64
 8006d5c:	dc60      	bgt.n	8006e20 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	440b      	add	r3, r1
 8006d70:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3354      	adds	r3, #84	; 0x54
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 8006d7c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006d8a:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f000 fb89 	bl	80074a4 <memmove>
		for (i = 0; i < len; i++) {
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e025      	b.n	8006de4 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	440b      	add	r3, r1
 8006da8:	7811      	ldrb	r1, [r2, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	460a      	mov	r2, r1
 8006db0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d109      	bne.n	8006dde <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	dbd5      	blt.n	8006d98 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <microrl_insert_text+0xde>
	}
	return false;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dd31      	ble.n	8006ea0 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fdc3 	bl	80069c8 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3354      	adds	r3, #84	; 0x54
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8006e5c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f000 fb18 	bl	80074a4 <memmove>
		pThis->cursor--;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e7a:	1e5a      	subs	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e98:	1e5a      	subs	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0a4      	sub	sp, #144	; 0x90
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fd99 	bl	80069e8 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd0a      	ble.n	8006ed6 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1d18      	adds	r0, r3, #4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f7ff fba9 	bl	8006628 <hist_save_line>
//	else
		pThis->print ("\n\r");
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006edc:	4823      	ldr	r0, [pc, #140]	; (8006f6c <new_line_handler+0xc4>)
 8006ede:	4798      	blx	r3
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ee6:	f107 020c 	add.w	r2, r7, #12
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fd12 	bl	8006916 <split>
 8006ef2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (status == -1){
 8006ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006efe:	d109      	bne.n	8006f14 <new_line_handler+0x6c>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006f06:	481a      	ldr	r0, [pc, #104]	; (8006f70 <new_line_handler+0xc8>)
 8006f08:	4798      	blx	r3
		pThis->print (ENDL);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006f10:	4818      	ldr	r0, [pc, #96]	; (8006f74 <new_line_handler+0xcc>)
 8006f12:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8006f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dd0d      	ble.n	8006f38 <new_line_handler+0x90>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <new_line_handler+0x90>
		pThis->execute (status, tkn_arr);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f2c:	f107 020c 	add.w	r2, r7, #12
 8006f30:	4611      	mov	r1, r2
 8006f32:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006f36:	4798      	blx	r3
	print_prompt (pThis);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fd36 	bl	80069aa <print_prompt>
	pThis->cmdlen = 0;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3354      	adds	r3, #84	; 0x54
 8006f52:	2265      	movs	r2, #101	; 0x65
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fabe 	bl	80074d8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8006f62:	bf00      	nop
 8006f64:	3790      	adds	r7, #144	; 0x90
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08009ff0 	.word	0x08009ff0
 8006f70:	08009ff4 	.word	0x08009ff4
 8006f74:	08009fcc 	.word	0x08009fcc

08006f78 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fe49 	bl	8006c28 <escape_process>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 810e 	beq.w	80071ba <microrl_insert_char+0x242>
			pThis->escape = 0;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8006fa4:	e109      	b.n	80071ba <microrl_insert_char+0x242>
		switch (ch) {
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b1b      	cmp	r3, #27
 8006faa:	dc3f      	bgt.n	800702c <microrl_insert_char+0xb4>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f340 80d9 	ble.w	8007164 <microrl_insert_char+0x1ec>
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	2b1a      	cmp	r3, #26
 8006fb6:	f200 80d5 	bhi.w	8007164 <microrl_insert_char+0x1ec>
 8006fba:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <microrl_insert_char+0x48>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	080070a1 	.word	0x080070a1
 8006fc4:	080070d9 	.word	0x080070d9
 8006fc8:	08007151 	.word	0x08007151
 8006fcc:	08007165 	.word	0x08007165
 8006fd0:	0800707d 	.word	0x0800707d
 8006fd4:	080070b1 	.word	0x080070b1
 8006fd8:	08007165 	.word	0x08007165
 8006fdc:	08007111 	.word	0x08007111
 8006fe0:	08007165 	.word	0x08007165
 8006fe4:	080071a5 	.word	0x080071a5
 8006fe8:	08007065 	.word	0x08007065
 8006fec:	08007165 	.word	0x08007165
 8006ff0:	08007033 	.word	0x08007033
 8006ff4:	08007107 	.word	0x08007107
 8006ff8:	08007165 	.word	0x08007165
 8006ffc:	080070fd 	.word	0x080070fd
 8007000:	08007165 	.word	0x08007165
 8007004:	0800712d 	.word	0x0800712d
 8007008:	08007165 	.word	0x08007165
 800700c:	08007165 	.word	0x08007165
 8007010:	08007049 	.word	0x08007049
 8007014:	08007165 	.word	0x08007165
 8007018:	08007165 	.word	0x08007165
 800701c:	08007165 	.word	0x08007165
 8007020:	08007165 	.word	0x08007165
 8007024:	08007165 	.word	0x08007165
 8007028:	0800703b 	.word	0x0800703b
 800702c:	2b7f      	cmp	r3, #127	; 0x7f
 800702e:	d06f      	beq.n	8007110 <microrl_insert_char+0x198>
 8007030:	e098      	b.n	8007164 <microrl_insert_char+0x1ec>
				new_line_handler(pThis);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff ff38 	bl	8006ea8 <new_line_handler>
			break;
 8007038:	e0bf      	b.n	80071ba <microrl_insert_char+0x242>
				pThis->escape = 1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	705a      	strb	r2, [r3, #1]
			break;
 8007040:	e0bb      	b.n	80071ba <microrl_insert_char+0x242>
					microrl_backspace (pThis);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fef1 	bl	8006e2a <microrl_backspace>
					while (pThis->cursor > 0) {
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800704e:	2b00      	cmp	r3, #0
 8007050:	dcf7      	bgt.n	8007042 <microrl_insert_char+0xca>
				terminal_print_line (pThis, 0, pThis->cursor);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007058:	461a      	mov	r2, r3
 800705a:	2100      	movs	r1, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fd1f 	bl	8006aa0 <terminal_print_line>
			break;
 8007062:	e0aa      	b.n	80071ba <microrl_insert_char+0x242>
				pThis->print ("\033[K");
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800706a:	4856      	ldr	r0, [pc, #344]	; (80071c4 <microrl_insert_char+0x24c>)
 800706c:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 800707a:	e09e      	b.n	80071ba <microrl_insert_char+0x242>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fcbb 	bl	8006a08 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 800709e:	e08c      	b.n	80071ba <microrl_insert_char+0x242>
				terminal_reset_cursor (pThis);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff fce3 	bl	8006a6c <terminal_reset_cursor>
				pThis->cursor = 0;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80070ae:	e084      	b.n	80071ba <microrl_insert_char+0x242>
			if (pThis->cursor < pThis->cmdlen) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80070bc:	429a      	cmp	r2, r3
 80070be:	da73      	bge.n	80071a8 <microrl_insert_char+0x230>
				terminal_move_cursor (pThis, 1);
 80070c0:	2101      	movs	r1, #1
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fca0 	bl	8006a08 <terminal_move_cursor>
				pThis->cursor++;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80070d6:	e067      	b.n	80071a8 <microrl_insert_char+0x230>
			if (pThis->cursor) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d064      	beq.n	80071ac <microrl_insert_char+0x234>
				terminal_move_cursor (pThis, -1);
 80070e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fc8e 	bl	8006a08 <terminal_move_cursor>
				pThis->cursor--;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80070f2:	1e5a      	subs	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80070fa:	e057      	b.n	80071ac <microrl_insert_char+0x234>
			hist_search (pThis, _HIST_UP);
 80070fc:	2100      	movs	r1, #0
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fd62 	bl	8006bc8 <hist_search>
			break;
 8007104:	e059      	b.n	80071ba <microrl_insert_char+0x242>
			hist_search (pThis, _HIST_DOWN);
 8007106:	2101      	movs	r1, #1
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fd5d 	bl	8006bc8 <hist_search>
			break;
 800710e:	e054      	b.n	80071ba <microrl_insert_char+0x242>
				microrl_backspace (pThis);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fe8a 	bl	8006e2a <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007122:	461a      	mov	r2, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff fcbb 	bl	8006aa0 <terminal_print_line>
			break;
 800712a:	e046      	b.n	80071ba <microrl_insert_char+0x242>
				terminal_newline (pThis);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fc5b 	bl	80069e8 <terminal_newline>
				print_prompt (pThis);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fc39 	bl	80069aa <print_prompt>
				terminal_reset_cursor (pThis);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fc97 	bl	8006a6c <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007144:	461a      	mov	r2, r3
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fca9 	bl	8006aa0 <terminal_print_line>
			break;
 800714e:	e034      	b.n	80071ba <microrl_insert_char+0x242>
			if (pThis->sigint != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d02a      	beq.n	80071b0 <microrl_insert_char+0x238>
				pThis->sigint();
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007160:	4798      	blx	r3
			break;
 8007162:	e025      	b.n	80071b0 <microrl_insert_char+0x238>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b20      	cmp	r3, #32
 8007168:	d104      	bne.n	8007174 <microrl_insert_char+0x1fc>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01f      	beq.n	80071b4 <microrl_insert_char+0x23c>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b1f      	cmp	r3, #31
 8007178:	dd1c      	ble.n	80071b4 <microrl_insert_char+0x23c>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 800717a:	463b      	mov	r3, r7
 800717c:	2201      	movs	r2, #1
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fddf 	bl	8006d44 <microrl_insert_text>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d015      	beq.n	80071b8 <microrl_insert_char+0x240>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007192:	1e59      	subs	r1, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800719a:	461a      	mov	r2, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fc7f 	bl	8006aa0 <terminal_print_line>
			break;
 80071a2:	e009      	b.n	80071b8 <microrl_insert_char+0x240>
			break;
 80071a4:	bf00      	nop
 80071a6:	e008      	b.n	80071ba <microrl_insert_char+0x242>
			break;
 80071a8:	bf00      	nop
 80071aa:	e006      	b.n	80071ba <microrl_insert_char+0x242>
			break;
 80071ac:	bf00      	nop
 80071ae:	e004      	b.n	80071ba <microrl_insert_char+0x242>
			break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <microrl_insert_char+0x242>
	}
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <microrl_insert_char+0x242>
			break;
 80071b8:	bf00      	nop
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08009fec 	.word	0x08009fec

080071c8 <initCLI>:



//*****************************************************************************
//dummy function, no need on linux-PC
void initCLI(void){
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
#ifdef HUART_CLI
	HAL_UART_Receive_DMA(&HUART_CLI, bRx, RX_SIZE);
 80071cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071d0:	490d      	ldr	r1, [pc, #52]	; (8007208 <initCLI+0x40>)
 80071d2:	480e      	ldr	r0, [pc, #56]	; (800720c <initCLI+0x44>)
 80071d4:	f7fc ff3e 	bl	8004054 <HAL_UART_Receive_DMA>
#endif
	// call init with ptr to microrl instance and print callback
	microrl_init (prl, printCli);
 80071d8:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <initCLI+0x48>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	490d      	ldr	r1, [pc, #52]	; (8007214 <initCLI+0x4c>)
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fc96 	bl	8006b10 <microrl_init>
	// set callback for execute
	microrl_set_execute_callback (prl, execute_list_commands);
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <initCLI+0x48>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	490b      	ldr	r1, [pc, #44]	; (8007218 <initCLI+0x50>)
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fcce 	bl	8006b8c <microrl_set_execute_callback>
#ifdef _USE_COMPLETE
	// set callback for completion
	microrl_set_complete_callback (prl, complet);
#endif
	// set callback for Ctrl+C
	microrl_set_sigint_callback (prl, sigint);
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <initCLI+0x48>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4909      	ldr	r1, [pc, #36]	; (800721c <initCLI+0x54>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fcd7 	bl	8006baa <microrl_set_sigint_callback>
//	setListComs(prl, p_list_cmds);
#ifndef __SW_CLI_HTREAD
	extern TIM_HandleTypeDef htim7;
	HAL_TIM_Base_Start_IT(&htim7);
#endif
	cli_enable=1;
 80071fc:	4b08      	ldr	r3, [pc, #32]	; (8007220 <initCLI+0x58>)
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
};
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20001c30 	.word	0x20001c30
 800720c:	20000340 	.word	0x20000340
 8007210:	2000016c 	.word	0x2000016c
 8007214:	08007291 	.word	0x08007291
 8007218:	08007321 	.word	0x08007321
 800721c:	08007411 	.word	0x08007411
 8007220:	20003d04 	.word	0x20003d04

08007224 <CLIthread>:

//*****************************************************************************
// non blocked CLI command line interface thread, periodically call 1 each system pass
void CLIthread(){
 8007224:	b598      	push	{r3, r4, r7, lr}
 8007226:	af00      	add	r7, sp, #0
	if  (cli_enable) {
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <CLIthread+0x2c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <CLIthread+0x28>
		if (rxUsbLen()!=0){
			getRxCDC();
		}
		#endif
		#ifdef HUART_CLI
		if (rxCharLen()!=0) {
 8007230:	f000 f812 	bl	8007258 <rxCharLen>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d008      	beq.n	800724c <CLIthread+0x28>
			microrl_insert_char (prl, get_char());
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <CLIthread+0x30>)
 800723c:	681c      	ldr	r4, [r3, #0]
 800723e:	f000 f83d 	bl	80072bc <get_char>
 8007242:	4603      	mov	r3, r0
 8007244:	4619      	mov	r1, r3
 8007246:	4620      	mov	r0, r4
 8007248:	f7ff fe96 	bl	8006f78 <microrl_insert_char>
		#endif
	#ifdef USE_USB_FS_HAL
	deferredCliTask();
	#endif
	}
}
 800724c:	bf00      	nop
 800724e:	bd98      	pop	{r3, r4, r7, pc}
 8007250:	20003d04 	.word	0x20003d04
 8007254:	2000016c 	.word	0x2000016c

08007258 <rxCharLen>:
	usbPush();
}
#endif

#ifdef HUART_CLI
uint16_t rxCharLen(){ //проверяет наличие байтов, не 0 - можно читать, побайтно
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
	uint16_t p_rx = RX_SIZE - HUART_CLI.hdmarx->Instance->CNDTR;
 800725e:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <rxCharLen+0x30>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 800726c:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSizeReady=(p_rx - p_old);
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <rxCharLen+0x34>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	80bb      	strh	r3, [r7, #4]
	return dataSizeReady;
 800727a:	88bb      	ldrh	r3, [r7, #4]
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	20000340 	.word	0x20000340
 800728c:	20003d08 	.word	0x20003d08

08007290 <printCli>:
#endif

//*****************************************************************************
// print callback for microrl library
void printCli(const char * str)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
	size_t len=strlen(str);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7f8 ffa3 	bl	80001e4 <strlen>
 800729e:	60f8      	str	r0, [r7, #12]

#ifdef HUART_CLI
#warning	//todo tx  HUART_CLI.hdmatx->Instance->CNDTR;
//    while ( (HAL_UART_GetState(&HUART_CLI)==HAL_UART_STATE_BUSY_TX_RX));
//    HAL_UART_Transmit_DMA(&HUART_CLI,(uint8_t*)str,strlen(str));
    HAL_UART_Transmit(&HUART_CLI,(uint8_t*)str,len,100);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	2364      	movs	r3, #100	; 0x64
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4803      	ldr	r0, [pc, #12]	; (80072b8 <printCli+0x28>)
 80072aa:	f7fc fe3f 	bl	8003f2c <HAL_UART_Transmit>
#else
#warning CLI без обратного вывода
#endif
}
 80072ae:	bf00      	nop
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000340 	.word	0x20000340

080072bc <get_char>:

#ifdef HUART_CLI
//*****************************************************************************
// get char user pressed, no waiting Enter input
char get_char(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
	char ret;
	while(rxCharLen()==0);
 80072c2:	bf00      	nop
 80072c4:	f7ff ffc8 	bl	8007258 <rxCharLen>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0fa      	beq.n	80072c4 <get_char+0x8>
	ret=(char)bRx[p_old];
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <get_char+0x40>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a0b      	ldr	r2, [pc, #44]	; (8007300 <get_char+0x44>)
 80072d4:	5cd3      	ldrb	r3, [r2, r3]
 80072d6:	71fb      	strb	r3, [r7, #7]
	p_old++;
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <get_char+0x40>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a07      	ldr	r2, [pc, #28]	; (80072fc <get_char+0x40>)
 80072e0:	6013      	str	r3, [r2, #0]
	if (p_old == RX_SIZE){
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <get_char+0x40>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ea:	d102      	bne.n	80072f2 <get_char+0x36>
		p_old = 0;
 80072ec:	4b03      	ldr	r3, [pc, #12]	; (80072fc <get_char+0x40>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
	}
	return ret;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20003d08 	.word	0x20003d08
 8007300:	20001c30 	.word	0x20001c30

08007304 <flushKeyboard>:
#endif

void flushKeyboard(){
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	while (rxCharLen()!=0){
 8007308:	e001      	b.n	800730e <flushKeyboard+0xa>
		get_char();
 800730a:	f7ff ffd7 	bl	80072bc <get_char>
	while (rxCharLen()!=0){
 800730e:	f7ff ffa3 	bl	8007258 <rxCharLen>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1f8      	bne.n	800730a <flushKeyboard+0x6>
	}
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <execute_list_commands>:

//*****************************************************************************
// execute callback for microrl library
// do what you want here, but don't write to argv!!! read only!!
int execute_list_commands(int argc, const char * const * argv)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	int i = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
	extern exec_cmds_t list_cmds[];
	void (*fexec)(int argc, const char * const * argv);
	int flagexec=0;
 800732e:	2300      	movs	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
	// just iterate through argv word and compare it with your commands
	while (i < argc) {
 8007332:	e057      	b.n	80073e4 <execute_list_commands+0xc4>
		int ii= 0;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 8007338:	e03d      	b.n	80073b6 <execute_list_commands+0x96>
			if (strcmp(argv[i],list_cmds[ii].name)==0){
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	4413      	add	r3, r2
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	492f      	ldr	r1, [pc, #188]	; (8007404 <execute_list_commands+0xe4>)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	440b      	add	r3, r1
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7f8 ff3d 	bl	80001d0 <strcmp>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d129      	bne.n	80073b0 <execute_list_commands+0x90>
				fexec=list_cmds[ii].f_exec;
 800735c:	4a29      	ldr	r2, [pc, #164]	; (8007404 <execute_list_commands+0xe4>)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	4413      	add	r3, r2
 8007364:	3304      	adds	r3, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	60fb      	str	r3, [r7, #12]
				int ac=argc-1-i;	//кол-во аргументов передаваемых командам
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1e5a      	subs	r2, r3, #1
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	613b      	str	r3, [r7, #16]
				if (( ac>0 )&&( argv[i+1][0]=='&' )) {	//для случая когда аргумент за командой &
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	dd0a      	ble.n	8007390 <execute_list_commands+0x70>
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	3301      	adds	r3, #1
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	4413      	add	r3, r2
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b26      	cmp	r3, #38	; 0x26
 800738a:	d101      	bne.n	8007390 <execute_list_commands+0x70>
					ac=0;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
				}
				fexec(ac,&argv[i+1]);
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	3301      	adds	r3, #1
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	441a      	add	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4611      	mov	r1, r2
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	4798      	blx	r3
				printCli ("\n\r");
 80073a2:	4819      	ldr	r0, [pc, #100]	; (8007408 <execute_list_commands+0xe8>)
 80073a4:	f7ff ff74 	bl	8007290 <printCli>
				flagexec++;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61bb      	str	r3, [r7, #24]
				break;
 80073ae:	e00a      	b.n	80073c6 <execute_list_commands+0xa6>
			}
			ii++;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3301      	adds	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 80073b6:	4a13      	ldr	r2, [pc, #76]	; (8007404 <execute_list_commands+0xe4>)
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	4413      	add	r3, r2
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1b9      	bne.n	800733a <execute_list_commands+0x1a>
		}
		while (  (argv[i++][0]!='&') && (i<argc) );
 80073c6:	bf00      	nop
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	61fa      	str	r2, [r7, #28]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	4413      	add	r3, r2
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b26      	cmp	r3, #38	; 0x26
 80073da:	d003      	beq.n	80073e4 <execute_list_commands+0xc4>
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	dbf1      	blt.n	80073c8 <execute_list_commands+0xa8>
	while (i < argc) {
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	dba3      	blt.n	8007334 <execute_list_commands+0x14>
	}
	if (flagexec==0){
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <execute_list_commands+0xd8>
		printCli ("Valid command absent!\n\r");
 80073f2:	4806      	ldr	r0, [pc, #24]	; (800740c <execute_list_commands+0xec>)
 80073f4:	f7ff ff4c 	bl	8007290 <printCli>
	}
	return 0;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3720      	adds	r7, #32
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000030 	.word	0x20000030
 8007408:	0800a00c 	.word	0x0800a00c
 800740c:	0800a010 	.word	0x0800a010

08007410 <sigint>:
}
#endif

//*****************************************************************************
void sigint (void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
	printCli ("^C catched!\n\r");
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <sigint+0x10>)
 8007416:	f7ff ff3b 	bl	8007290 <printCli>
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	0800a028 	.word	0x0800a028

08007424 <atoi>:
 8007424:	220a      	movs	r2, #10
 8007426:	2100      	movs	r1, #0
 8007428:	f000 b962 	b.w	80076f0 <strtol>

0800742c <atol>:
 800742c:	220a      	movs	r2, #10
 800742e:	2100      	movs	r1, #0
 8007430:	f000 b95e 	b.w	80076f0 <strtol>

08007434 <__errno>:
 8007434:	4b01      	ldr	r3, [pc, #4]	; (800743c <__errno+0x8>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000170 	.word	0x20000170

08007440 <__libc_init_array>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4d0d      	ldr	r5, [pc, #52]	; (8007478 <__libc_init_array+0x38>)
 8007444:	4c0d      	ldr	r4, [pc, #52]	; (800747c <__libc_init_array+0x3c>)
 8007446:	1b64      	subs	r4, r4, r5
 8007448:	10a4      	asrs	r4, r4, #2
 800744a:	2600      	movs	r6, #0
 800744c:	42a6      	cmp	r6, r4
 800744e:	d109      	bne.n	8007464 <__libc_init_array+0x24>
 8007450:	4d0b      	ldr	r5, [pc, #44]	; (8007480 <__libc_init_array+0x40>)
 8007452:	4c0c      	ldr	r4, [pc, #48]	; (8007484 <__libc_init_array+0x44>)
 8007454:	f001 faa8 	bl	80089a8 <_init>
 8007458:	1b64      	subs	r4, r4, r5
 800745a:	10a4      	asrs	r4, r4, #2
 800745c:	2600      	movs	r6, #0
 800745e:	42a6      	cmp	r6, r4
 8007460:	d105      	bne.n	800746e <__libc_init_array+0x2e>
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	f855 3b04 	ldr.w	r3, [r5], #4
 8007468:	4798      	blx	r3
 800746a:	3601      	adds	r6, #1
 800746c:	e7ee      	b.n	800744c <__libc_init_array+0xc>
 800746e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007472:	4798      	blx	r3
 8007474:	3601      	adds	r6, #1
 8007476:	e7f2      	b.n	800745e <__libc_init_array+0x1e>
 8007478:	0800a224 	.word	0x0800a224
 800747c:	0800a224 	.word	0x0800a224
 8007480:	0800a224 	.word	0x0800a224
 8007484:	0800a228 	.word	0x0800a228

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800749e:	4291      	cmp	r1, r2
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <memmove>:
 80074a4:	4288      	cmp	r0, r1
 80074a6:	b510      	push	{r4, lr}
 80074a8:	eb01 0402 	add.w	r4, r1, r2
 80074ac:	d902      	bls.n	80074b4 <memmove+0x10>
 80074ae:	4284      	cmp	r4, r0
 80074b0:	4623      	mov	r3, r4
 80074b2:	d807      	bhi.n	80074c4 <memmove+0x20>
 80074b4:	1e43      	subs	r3, r0, #1
 80074b6:	42a1      	cmp	r1, r4
 80074b8:	d008      	beq.n	80074cc <memmove+0x28>
 80074ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074c2:	e7f8      	b.n	80074b6 <memmove+0x12>
 80074c4:	4402      	add	r2, r0
 80074c6:	4601      	mov	r1, r0
 80074c8:	428a      	cmp	r2, r1
 80074ca:	d100      	bne.n	80074ce <memmove+0x2a>
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074d6:	e7f7      	b.n	80074c8 <memmove+0x24>

080074d8 <memset>:
 80074d8:	4402      	add	r2, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <iprintf>:
 80074e8:	b40f      	push	{r0, r1, r2, r3}
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <iprintf+0x2c>)
 80074ec:	b513      	push	{r0, r1, r4, lr}
 80074ee:	681c      	ldr	r4, [r3, #0]
 80074f0:	b124      	cbz	r4, 80074fc <iprintf+0x14>
 80074f2:	69a3      	ldr	r3, [r4, #24]
 80074f4:	b913      	cbnz	r3, 80074fc <iprintf+0x14>
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 f95c 	bl	80077b4 <__sinit>
 80074fc:	ab05      	add	r3, sp, #20
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	68a1      	ldr	r1, [r4, #8]
 8007502:	9301      	str	r3, [sp, #4]
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fc0f 	bl	8007d28 <_vfiprintf_r>
 800750a:	b002      	add	sp, #8
 800750c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007510:	b004      	add	sp, #16
 8007512:	4770      	bx	lr
 8007514:	20000170 	.word	0x20000170

08007518 <putchar>:
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <putchar+0x28>)
 800751a:	b513      	push	{r0, r1, r4, lr}
 800751c:	681c      	ldr	r4, [r3, #0]
 800751e:	4601      	mov	r1, r0
 8007520:	b134      	cbz	r4, 8007530 <putchar+0x18>
 8007522:	69a3      	ldr	r3, [r4, #24]
 8007524:	b923      	cbnz	r3, 8007530 <putchar+0x18>
 8007526:	9001      	str	r0, [sp, #4]
 8007528:	4620      	mov	r0, r4
 800752a:	f000 f943 	bl	80077b4 <__sinit>
 800752e:	9901      	ldr	r1, [sp, #4]
 8007530:	68a2      	ldr	r2, [r4, #8]
 8007532:	4620      	mov	r0, r4
 8007534:	b002      	add	sp, #8
 8007536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753a:	f000 beb9 	b.w	80082b0 <_putc_r>
 800753e:	bf00      	nop
 8007540:	20000170 	.word	0x20000170

08007544 <sniprintf>:
 8007544:	b40c      	push	{r2, r3}
 8007546:	b530      	push	{r4, r5, lr}
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <sniprintf+0x64>)
 800754a:	1e0c      	subs	r4, r1, #0
 800754c:	681d      	ldr	r5, [r3, #0]
 800754e:	b09d      	sub	sp, #116	; 0x74
 8007550:	da08      	bge.n	8007564 <sniprintf+0x20>
 8007552:	238b      	movs	r3, #139	; 0x8b
 8007554:	602b      	str	r3, [r5, #0]
 8007556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800755a:	b01d      	add	sp, #116	; 0x74
 800755c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007560:	b002      	add	sp, #8
 8007562:	4770      	bx	lr
 8007564:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007568:	f8ad 3014 	strh.w	r3, [sp, #20]
 800756c:	bf14      	ite	ne
 800756e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007572:	4623      	moveq	r3, r4
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800757c:	9002      	str	r0, [sp, #8]
 800757e:	9006      	str	r0, [sp, #24]
 8007580:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007584:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007586:	ab21      	add	r3, sp, #132	; 0x84
 8007588:	a902      	add	r1, sp, #8
 800758a:	4628      	mov	r0, r5
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f000 faa1 	bl	8007ad4 <_svfiprintf_r>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	bfbc      	itt	lt
 8007596:	238b      	movlt	r3, #139	; 0x8b
 8007598:	602b      	strlt	r3, [r5, #0]
 800759a:	2c00      	cmp	r4, #0
 800759c:	d0dd      	beq.n	800755a <sniprintf+0x16>
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	e7d9      	b.n	800755a <sniprintf+0x16>
 80075a6:	bf00      	nop
 80075a8:	20000170 	.word	0x20000170

080075ac <siprintf>:
 80075ac:	b40e      	push	{r1, r2, r3}
 80075ae:	b500      	push	{lr}
 80075b0:	b09c      	sub	sp, #112	; 0x70
 80075b2:	ab1d      	add	r3, sp, #116	; 0x74
 80075b4:	9002      	str	r0, [sp, #8]
 80075b6:	9006      	str	r0, [sp, #24]
 80075b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075bc:	4809      	ldr	r0, [pc, #36]	; (80075e4 <siprintf+0x38>)
 80075be:	9107      	str	r1, [sp, #28]
 80075c0:	9104      	str	r1, [sp, #16]
 80075c2:	4909      	ldr	r1, [pc, #36]	; (80075e8 <siprintf+0x3c>)
 80075c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	a902      	add	r1, sp, #8
 80075d0:	f000 fa80 	bl	8007ad4 <_svfiprintf_r>
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	b01c      	add	sp, #112	; 0x70
 80075dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e0:	b003      	add	sp, #12
 80075e2:	4770      	bx	lr
 80075e4:	20000170 	.word	0x20000170
 80075e8:	ffff0208 	.word	0xffff0208

080075ec <_strtol_l.constprop.0>:
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f2:	d001      	beq.n	80075f8 <_strtol_l.constprop.0+0xc>
 80075f4:	2b24      	cmp	r3, #36	; 0x24
 80075f6:	d906      	bls.n	8007606 <_strtol_l.constprop.0+0x1a>
 80075f8:	f7ff ff1c 	bl	8007434 <__errno>
 80075fc:	2316      	movs	r3, #22
 80075fe:	6003      	str	r3, [r0, #0]
 8007600:	2000      	movs	r0, #0
 8007602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80076ec <_strtol_l.constprop.0+0x100>
 800760a:	460d      	mov	r5, r1
 800760c:	462e      	mov	r6, r5
 800760e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007612:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007616:	f017 0708 	ands.w	r7, r7, #8
 800761a:	d1f7      	bne.n	800760c <_strtol_l.constprop.0+0x20>
 800761c:	2c2d      	cmp	r4, #45	; 0x2d
 800761e:	d132      	bne.n	8007686 <_strtol_l.constprop.0+0x9a>
 8007620:	782c      	ldrb	r4, [r5, #0]
 8007622:	2701      	movs	r7, #1
 8007624:	1cb5      	adds	r5, r6, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d05b      	beq.n	80076e2 <_strtol_l.constprop.0+0xf6>
 800762a:	2b10      	cmp	r3, #16
 800762c:	d109      	bne.n	8007642 <_strtol_l.constprop.0+0x56>
 800762e:	2c30      	cmp	r4, #48	; 0x30
 8007630:	d107      	bne.n	8007642 <_strtol_l.constprop.0+0x56>
 8007632:	782c      	ldrb	r4, [r5, #0]
 8007634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007638:	2c58      	cmp	r4, #88	; 0x58
 800763a:	d14d      	bne.n	80076d8 <_strtol_l.constprop.0+0xec>
 800763c:	786c      	ldrb	r4, [r5, #1]
 800763e:	2310      	movs	r3, #16
 8007640:	3502      	adds	r5, #2
 8007642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800764a:	f04f 0c00 	mov.w	ip, #0
 800764e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007652:	4666      	mov	r6, ip
 8007654:	fb03 8a19 	mls	sl, r3, r9, r8
 8007658:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800765c:	f1be 0f09 	cmp.w	lr, #9
 8007660:	d816      	bhi.n	8007690 <_strtol_l.constprop.0+0xa4>
 8007662:	4674      	mov	r4, lr
 8007664:	42a3      	cmp	r3, r4
 8007666:	dd24      	ble.n	80076b2 <_strtol_l.constprop.0+0xc6>
 8007668:	f1bc 0f00 	cmp.w	ip, #0
 800766c:	db1e      	blt.n	80076ac <_strtol_l.constprop.0+0xc0>
 800766e:	45b1      	cmp	r9, r6
 8007670:	d31c      	bcc.n	80076ac <_strtol_l.constprop.0+0xc0>
 8007672:	d101      	bne.n	8007678 <_strtol_l.constprop.0+0x8c>
 8007674:	45a2      	cmp	sl, r4
 8007676:	db19      	blt.n	80076ac <_strtol_l.constprop.0+0xc0>
 8007678:	fb06 4603 	mla	r6, r6, r3, r4
 800767c:	f04f 0c01 	mov.w	ip, #1
 8007680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007684:	e7e8      	b.n	8007658 <_strtol_l.constprop.0+0x6c>
 8007686:	2c2b      	cmp	r4, #43	; 0x2b
 8007688:	bf04      	itt	eq
 800768a:	782c      	ldrbeq	r4, [r5, #0]
 800768c:	1cb5      	addeq	r5, r6, #2
 800768e:	e7ca      	b.n	8007626 <_strtol_l.constprop.0+0x3a>
 8007690:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007694:	f1be 0f19 	cmp.w	lr, #25
 8007698:	d801      	bhi.n	800769e <_strtol_l.constprop.0+0xb2>
 800769a:	3c37      	subs	r4, #55	; 0x37
 800769c:	e7e2      	b.n	8007664 <_strtol_l.constprop.0+0x78>
 800769e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80076a2:	f1be 0f19 	cmp.w	lr, #25
 80076a6:	d804      	bhi.n	80076b2 <_strtol_l.constprop.0+0xc6>
 80076a8:	3c57      	subs	r4, #87	; 0x57
 80076aa:	e7db      	b.n	8007664 <_strtol_l.constprop.0+0x78>
 80076ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80076b0:	e7e6      	b.n	8007680 <_strtol_l.constprop.0+0x94>
 80076b2:	f1bc 0f00 	cmp.w	ip, #0
 80076b6:	da05      	bge.n	80076c4 <_strtol_l.constprop.0+0xd8>
 80076b8:	2322      	movs	r3, #34	; 0x22
 80076ba:	6003      	str	r3, [r0, #0]
 80076bc:	4646      	mov	r6, r8
 80076be:	b942      	cbnz	r2, 80076d2 <_strtol_l.constprop.0+0xe6>
 80076c0:	4630      	mov	r0, r6
 80076c2:	e79e      	b.n	8007602 <_strtol_l.constprop.0+0x16>
 80076c4:	b107      	cbz	r7, 80076c8 <_strtol_l.constprop.0+0xdc>
 80076c6:	4276      	negs	r6, r6
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	d0f9      	beq.n	80076c0 <_strtol_l.constprop.0+0xd4>
 80076cc:	f1bc 0f00 	cmp.w	ip, #0
 80076d0:	d000      	beq.n	80076d4 <_strtol_l.constprop.0+0xe8>
 80076d2:	1e69      	subs	r1, r5, #1
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	e7f3      	b.n	80076c0 <_strtol_l.constprop.0+0xd4>
 80076d8:	2430      	movs	r4, #48	; 0x30
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1b1      	bne.n	8007642 <_strtol_l.constprop.0+0x56>
 80076de:	2308      	movs	r3, #8
 80076e0:	e7af      	b.n	8007642 <_strtol_l.constprop.0+0x56>
 80076e2:	2c30      	cmp	r4, #48	; 0x30
 80076e4:	d0a5      	beq.n	8007632 <_strtol_l.constprop.0+0x46>
 80076e6:	230a      	movs	r3, #10
 80076e8:	e7ab      	b.n	8007642 <_strtol_l.constprop.0+0x56>
 80076ea:	bf00      	nop
 80076ec:	0800a081 	.word	0x0800a081

080076f0 <strtol>:
 80076f0:	4613      	mov	r3, r2
 80076f2:	460a      	mov	r2, r1
 80076f4:	4601      	mov	r1, r0
 80076f6:	4802      	ldr	r0, [pc, #8]	; (8007700 <strtol+0x10>)
 80076f8:	6800      	ldr	r0, [r0, #0]
 80076fa:	f7ff bf77 	b.w	80075ec <_strtol_l.constprop.0>
 80076fe:	bf00      	nop
 8007700:	20000170 	.word	0x20000170

08007704 <std>:
 8007704:	2300      	movs	r3, #0
 8007706:	b510      	push	{r4, lr}
 8007708:	4604      	mov	r4, r0
 800770a:	e9c0 3300 	strd	r3, r3, [r0]
 800770e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007712:	6083      	str	r3, [r0, #8]
 8007714:	8181      	strh	r1, [r0, #12]
 8007716:	6643      	str	r3, [r0, #100]	; 0x64
 8007718:	81c2      	strh	r2, [r0, #14]
 800771a:	6183      	str	r3, [r0, #24]
 800771c:	4619      	mov	r1, r3
 800771e:	2208      	movs	r2, #8
 8007720:	305c      	adds	r0, #92	; 0x5c
 8007722:	f7ff fed9 	bl	80074d8 <memset>
 8007726:	4b05      	ldr	r3, [pc, #20]	; (800773c <std+0x38>)
 8007728:	6263      	str	r3, [r4, #36]	; 0x24
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x3c>)
 800772c:	62a3      	str	r3, [r4, #40]	; 0x28
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x40>)
 8007730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x44>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	6323      	str	r3, [r4, #48]	; 0x30
 8007738:	bd10      	pop	{r4, pc}
 800773a:	bf00      	nop
 800773c:	08008361 	.word	0x08008361
 8007740:	08008383 	.word	0x08008383
 8007744:	080083bb 	.word	0x080083bb
 8007748:	080083df 	.word	0x080083df

0800774c <_cleanup_r>:
 800774c:	4901      	ldr	r1, [pc, #4]	; (8007754 <_cleanup_r+0x8>)
 800774e:	f000 b8af 	b.w	80078b0 <_fwalk_reent>
 8007752:	bf00      	nop
 8007754:	080086b9 	.word	0x080086b9

08007758 <__sfmoreglue>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	2268      	movs	r2, #104	; 0x68
 800775c:	1e4d      	subs	r5, r1, #1
 800775e:	4355      	muls	r5, r2
 8007760:	460e      	mov	r6, r1
 8007762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007766:	f000 f8e5 	bl	8007934 <_malloc_r>
 800776a:	4604      	mov	r4, r0
 800776c:	b140      	cbz	r0, 8007780 <__sfmoreglue+0x28>
 800776e:	2100      	movs	r1, #0
 8007770:	e9c0 1600 	strd	r1, r6, [r0]
 8007774:	300c      	adds	r0, #12
 8007776:	60a0      	str	r0, [r4, #8]
 8007778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800777c:	f7ff feac 	bl	80074d8 <memset>
 8007780:	4620      	mov	r0, r4
 8007782:	bd70      	pop	{r4, r5, r6, pc}

08007784 <__sfp_lock_acquire>:
 8007784:	4801      	ldr	r0, [pc, #4]	; (800778c <__sfp_lock_acquire+0x8>)
 8007786:	f000 b8b3 	b.w	80078f0 <__retarget_lock_acquire_recursive>
 800778a:	bf00      	nop
 800778c:	20003d0d 	.word	0x20003d0d

08007790 <__sfp_lock_release>:
 8007790:	4801      	ldr	r0, [pc, #4]	; (8007798 <__sfp_lock_release+0x8>)
 8007792:	f000 b8ae 	b.w	80078f2 <__retarget_lock_release_recursive>
 8007796:	bf00      	nop
 8007798:	20003d0d 	.word	0x20003d0d

0800779c <__sinit_lock_acquire>:
 800779c:	4801      	ldr	r0, [pc, #4]	; (80077a4 <__sinit_lock_acquire+0x8>)
 800779e:	f000 b8a7 	b.w	80078f0 <__retarget_lock_acquire_recursive>
 80077a2:	bf00      	nop
 80077a4:	20003d0e 	.word	0x20003d0e

080077a8 <__sinit_lock_release>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__sinit_lock_release+0x8>)
 80077aa:	f000 b8a2 	b.w	80078f2 <__retarget_lock_release_recursive>
 80077ae:	bf00      	nop
 80077b0:	20003d0e 	.word	0x20003d0e

080077b4 <__sinit>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	f7ff fff0 	bl	800779c <__sinit_lock_acquire>
 80077bc:	69a3      	ldr	r3, [r4, #24]
 80077be:	b11b      	cbz	r3, 80077c8 <__sinit+0x14>
 80077c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c4:	f7ff bff0 	b.w	80077a8 <__sinit_lock_release>
 80077c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077cc:	6523      	str	r3, [r4, #80]	; 0x50
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <__sinit+0x68>)
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <__sinit+0x6c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	bf04      	itt	eq
 80077da:	2301      	moveq	r3, #1
 80077dc:	61a3      	streq	r3, [r4, #24]
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 f820 	bl	8007824 <__sfp>
 80077e4:	6060      	str	r0, [r4, #4]
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 f81c 	bl	8007824 <__sfp>
 80077ec:	60a0      	str	r0, [r4, #8]
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 f818 	bl	8007824 <__sfp>
 80077f4:	2200      	movs	r2, #0
 80077f6:	60e0      	str	r0, [r4, #12]
 80077f8:	2104      	movs	r1, #4
 80077fa:	6860      	ldr	r0, [r4, #4]
 80077fc:	f7ff ff82 	bl	8007704 <std>
 8007800:	68a0      	ldr	r0, [r4, #8]
 8007802:	2201      	movs	r2, #1
 8007804:	2109      	movs	r1, #9
 8007806:	f7ff ff7d 	bl	8007704 <std>
 800780a:	68e0      	ldr	r0, [r4, #12]
 800780c:	2202      	movs	r2, #2
 800780e:	2112      	movs	r1, #18
 8007810:	f7ff ff78 	bl	8007704 <std>
 8007814:	2301      	movs	r3, #1
 8007816:	61a3      	str	r3, [r4, #24]
 8007818:	e7d2      	b.n	80077c0 <__sinit+0xc>
 800781a:	bf00      	nop
 800781c:	0800a184 	.word	0x0800a184
 8007820:	0800774d 	.word	0x0800774d

08007824 <__sfp>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	4607      	mov	r7, r0
 8007828:	f7ff ffac 	bl	8007784 <__sfp_lock_acquire>
 800782c:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <__sfp+0x84>)
 800782e:	681e      	ldr	r6, [r3, #0]
 8007830:	69b3      	ldr	r3, [r6, #24]
 8007832:	b913      	cbnz	r3, 800783a <__sfp+0x16>
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff ffbd 	bl	80077b4 <__sinit>
 800783a:	3648      	adds	r6, #72	; 0x48
 800783c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007840:	3b01      	subs	r3, #1
 8007842:	d503      	bpl.n	800784c <__sfp+0x28>
 8007844:	6833      	ldr	r3, [r6, #0]
 8007846:	b30b      	cbz	r3, 800788c <__sfp+0x68>
 8007848:	6836      	ldr	r6, [r6, #0]
 800784a:	e7f7      	b.n	800783c <__sfp+0x18>
 800784c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007850:	b9d5      	cbnz	r5, 8007888 <__sfp+0x64>
 8007852:	4b16      	ldr	r3, [pc, #88]	; (80078ac <__sfp+0x88>)
 8007854:	60e3      	str	r3, [r4, #12]
 8007856:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800785a:	6665      	str	r5, [r4, #100]	; 0x64
 800785c:	f000 f847 	bl	80078ee <__retarget_lock_init_recursive>
 8007860:	f7ff ff96 	bl	8007790 <__sfp_lock_release>
 8007864:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007868:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	61a5      	str	r5, [r4, #24]
 8007870:	2208      	movs	r2, #8
 8007872:	4629      	mov	r1, r5
 8007874:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007878:	f7ff fe2e 	bl	80074d8 <memset>
 800787c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007880:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007884:	4620      	mov	r0, r4
 8007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007888:	3468      	adds	r4, #104	; 0x68
 800788a:	e7d9      	b.n	8007840 <__sfp+0x1c>
 800788c:	2104      	movs	r1, #4
 800788e:	4638      	mov	r0, r7
 8007890:	f7ff ff62 	bl	8007758 <__sfmoreglue>
 8007894:	4604      	mov	r4, r0
 8007896:	6030      	str	r0, [r6, #0]
 8007898:	2800      	cmp	r0, #0
 800789a:	d1d5      	bne.n	8007848 <__sfp+0x24>
 800789c:	f7ff ff78 	bl	8007790 <__sfp_lock_release>
 80078a0:	230c      	movs	r3, #12
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	e7ee      	b.n	8007884 <__sfp+0x60>
 80078a6:	bf00      	nop
 80078a8:	0800a184 	.word	0x0800a184
 80078ac:	ffff0001 	.word	0xffff0001

080078b0 <_fwalk_reent>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4606      	mov	r6, r0
 80078b6:	4688      	mov	r8, r1
 80078b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078bc:	2700      	movs	r7, #0
 80078be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c2:	f1b9 0901 	subs.w	r9, r9, #1
 80078c6:	d505      	bpl.n	80078d4 <_fwalk_reent+0x24>
 80078c8:	6824      	ldr	r4, [r4, #0]
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	d1f7      	bne.n	80078be <_fwalk_reent+0xe>
 80078ce:	4638      	mov	r0, r7
 80078d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d907      	bls.n	80078ea <_fwalk_reent+0x3a>
 80078da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078de:	3301      	adds	r3, #1
 80078e0:	d003      	beq.n	80078ea <_fwalk_reent+0x3a>
 80078e2:	4629      	mov	r1, r5
 80078e4:	4630      	mov	r0, r6
 80078e6:	47c0      	blx	r8
 80078e8:	4307      	orrs	r7, r0
 80078ea:	3568      	adds	r5, #104	; 0x68
 80078ec:	e7e9      	b.n	80078c2 <_fwalk_reent+0x12>

080078ee <__retarget_lock_init_recursive>:
 80078ee:	4770      	bx	lr

080078f0 <__retarget_lock_acquire_recursive>:
 80078f0:	4770      	bx	lr

080078f2 <__retarget_lock_release_recursive>:
 80078f2:	4770      	bx	lr

080078f4 <sbrk_aligned>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4e0e      	ldr	r6, [pc, #56]	; (8007930 <sbrk_aligned+0x3c>)
 80078f8:	460c      	mov	r4, r1
 80078fa:	6831      	ldr	r1, [r6, #0]
 80078fc:	4605      	mov	r5, r0
 80078fe:	b911      	cbnz	r1, 8007906 <sbrk_aligned+0x12>
 8007900:	f000 fd1e 	bl	8008340 <_sbrk_r>
 8007904:	6030      	str	r0, [r6, #0]
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fd19 	bl	8008340 <_sbrk_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d00a      	beq.n	8007928 <sbrk_aligned+0x34>
 8007912:	1cc4      	adds	r4, r0, #3
 8007914:	f024 0403 	bic.w	r4, r4, #3
 8007918:	42a0      	cmp	r0, r4
 800791a:	d007      	beq.n	800792c <sbrk_aligned+0x38>
 800791c:	1a21      	subs	r1, r4, r0
 800791e:	4628      	mov	r0, r5
 8007920:	f000 fd0e 	bl	8008340 <_sbrk_r>
 8007924:	3001      	adds	r0, #1
 8007926:	d101      	bne.n	800792c <sbrk_aligned+0x38>
 8007928:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800792c:	4620      	mov	r0, r4
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	20003d14 	.word	0x20003d14

08007934 <_malloc_r>:
 8007934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007938:	1ccd      	adds	r5, r1, #3
 800793a:	f025 0503 	bic.w	r5, r5, #3
 800793e:	3508      	adds	r5, #8
 8007940:	2d0c      	cmp	r5, #12
 8007942:	bf38      	it	cc
 8007944:	250c      	movcc	r5, #12
 8007946:	2d00      	cmp	r5, #0
 8007948:	4607      	mov	r7, r0
 800794a:	db01      	blt.n	8007950 <_malloc_r+0x1c>
 800794c:	42a9      	cmp	r1, r5
 800794e:	d905      	bls.n	800795c <_malloc_r+0x28>
 8007950:	230c      	movs	r3, #12
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	2600      	movs	r6, #0
 8007956:	4630      	mov	r0, r6
 8007958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795c:	4e2e      	ldr	r6, [pc, #184]	; (8007a18 <_malloc_r+0xe4>)
 800795e:	f000 ff5f 	bl	8008820 <__malloc_lock>
 8007962:	6833      	ldr	r3, [r6, #0]
 8007964:	461c      	mov	r4, r3
 8007966:	bb34      	cbnz	r4, 80079b6 <_malloc_r+0x82>
 8007968:	4629      	mov	r1, r5
 800796a:	4638      	mov	r0, r7
 800796c:	f7ff ffc2 	bl	80078f4 <sbrk_aligned>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	4604      	mov	r4, r0
 8007974:	d14d      	bne.n	8007a12 <_malloc_r+0xde>
 8007976:	6834      	ldr	r4, [r6, #0]
 8007978:	4626      	mov	r6, r4
 800797a:	2e00      	cmp	r6, #0
 800797c:	d140      	bne.n	8007a00 <_malloc_r+0xcc>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	4631      	mov	r1, r6
 8007982:	4638      	mov	r0, r7
 8007984:	eb04 0803 	add.w	r8, r4, r3
 8007988:	f000 fcda 	bl	8008340 <_sbrk_r>
 800798c:	4580      	cmp	r8, r0
 800798e:	d13a      	bne.n	8007a06 <_malloc_r+0xd2>
 8007990:	6821      	ldr	r1, [r4, #0]
 8007992:	3503      	adds	r5, #3
 8007994:	1a6d      	subs	r5, r5, r1
 8007996:	f025 0503 	bic.w	r5, r5, #3
 800799a:	3508      	adds	r5, #8
 800799c:	2d0c      	cmp	r5, #12
 800799e:	bf38      	it	cc
 80079a0:	250c      	movcc	r5, #12
 80079a2:	4629      	mov	r1, r5
 80079a4:	4638      	mov	r0, r7
 80079a6:	f7ff ffa5 	bl	80078f4 <sbrk_aligned>
 80079aa:	3001      	adds	r0, #1
 80079ac:	d02b      	beq.n	8007a06 <_malloc_r+0xd2>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	442b      	add	r3, r5
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	e00e      	b.n	80079d4 <_malloc_r+0xa0>
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	1b52      	subs	r2, r2, r5
 80079ba:	d41e      	bmi.n	80079fa <_malloc_r+0xc6>
 80079bc:	2a0b      	cmp	r2, #11
 80079be:	d916      	bls.n	80079ee <_malloc_r+0xba>
 80079c0:	1961      	adds	r1, r4, r5
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	6025      	str	r5, [r4, #0]
 80079c6:	bf18      	it	ne
 80079c8:	6059      	strne	r1, [r3, #4]
 80079ca:	6863      	ldr	r3, [r4, #4]
 80079cc:	bf08      	it	eq
 80079ce:	6031      	streq	r1, [r6, #0]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f104 060b 	add.w	r6, r4, #11
 80079da:	f000 ff27 	bl	800882c <__malloc_unlock>
 80079de:	f026 0607 	bic.w	r6, r6, #7
 80079e2:	1d23      	adds	r3, r4, #4
 80079e4:	1af2      	subs	r2, r6, r3
 80079e6:	d0b6      	beq.n	8007956 <_malloc_r+0x22>
 80079e8:	1b9b      	subs	r3, r3, r6
 80079ea:	50a3      	str	r3, [r4, r2]
 80079ec:	e7b3      	b.n	8007956 <_malloc_r+0x22>
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	bf0c      	ite	eq
 80079f4:	6032      	streq	r2, [r6, #0]
 80079f6:	605a      	strne	r2, [r3, #4]
 80079f8:	e7ec      	b.n	80079d4 <_malloc_r+0xa0>
 80079fa:	4623      	mov	r3, r4
 80079fc:	6864      	ldr	r4, [r4, #4]
 80079fe:	e7b2      	b.n	8007966 <_malloc_r+0x32>
 8007a00:	4634      	mov	r4, r6
 8007a02:	6876      	ldr	r6, [r6, #4]
 8007a04:	e7b9      	b.n	800797a <_malloc_r+0x46>
 8007a06:	230c      	movs	r3, #12
 8007a08:	603b      	str	r3, [r7, #0]
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	f000 ff0e 	bl	800882c <__malloc_unlock>
 8007a10:	e7a1      	b.n	8007956 <_malloc_r+0x22>
 8007a12:	6025      	str	r5, [r4, #0]
 8007a14:	e7de      	b.n	80079d4 <_malloc_r+0xa0>
 8007a16:	bf00      	nop
 8007a18:	20003d10 	.word	0x20003d10

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	429e      	cmp	r6, r3
 8007a24:	4682      	mov	sl, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	d838      	bhi.n	8007aa0 <__ssputs_r+0x84>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d032      	beq.n	8007a9c <__ssputs_r+0x80>
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	6909      	ldr	r1, [r1, #16]
 8007a3a:	eba5 0901 	sub.w	r9, r5, r1
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a48:	3301      	adds	r3, #1
 8007a4a:	444b      	add	r3, r9
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d531      	bpl.n	8007abc <__ssputs_r+0xa0>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7ff ff6b 	bl	8007934 <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f8ca 3000 	str.w	r3, [sl]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	464a      	mov	r2, r9
 8007a7c:	f7ff fd04 	bl	8007488 <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	6165      	str	r5, [r4, #20]
 8007a90:	444e      	add	r6, r9
 8007a92:	eba5 0509 	sub.w	r5, r5, r9
 8007a96:	6026      	str	r6, [r4, #0]
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	463e      	mov	r6, r7
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x86>
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	6820      	ldr	r0, [r4, #0]
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	f7ff fcfc 	bl	80074a4 <memmove>
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	1b9b      	subs	r3, r3, r6
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	4433      	add	r3, r6
 8007ab6:	6023      	str	r3, [r4, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7db      	b.n	8007a74 <__ssputs_r+0x58>
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 ff07 	bl	80088d0 <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e1      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f000 feb4 	bl	8008838 <_free_r>
 8007ad0:	e7c7      	b.n	8007a62 <__ssputs_r+0x46>
	...

08007ad4 <_svfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4698      	mov	r8, r3
 8007ada:	898b      	ldrh	r3, [r1, #12]
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	b09d      	sub	sp, #116	; 0x74
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	d50e      	bpl.n	8007b06 <_svfiprintf_r+0x32>
 8007ae8:	690b      	ldr	r3, [r1, #16]
 8007aea:	b963      	cbnz	r3, 8007b06 <_svfiprintf_r+0x32>
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	f7ff ff21 	bl	8007934 <_malloc_r>
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6128      	str	r0, [r5, #16]
 8007af6:	b920      	cbnz	r0, 8007b02 <_svfiprintf_r+0x2e>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b00:	e0d1      	b.n	8007ca6 <_svfiprintf_r+0x1d2>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	616b      	str	r3, [r5, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b14:	2330      	movs	r3, #48	; 0x30
 8007b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cc0 <_svfiprintf_r+0x1ec>
 8007b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1e:	f04f 0901 	mov.w	r9, #1
 8007b22:	4623      	mov	r3, r4
 8007b24:	469a      	mov	sl, r3
 8007b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2a:	b10a      	cbz	r2, 8007b30 <_svfiprintf_r+0x5c>
 8007b2c:	2a25      	cmp	r2, #37	; 0x25
 8007b2e:	d1f9      	bne.n	8007b24 <_svfiprintf_r+0x50>
 8007b30:	ebba 0b04 	subs.w	fp, sl, r4
 8007b34:	d00b      	beq.n	8007b4e <_svfiprintf_r+0x7a>
 8007b36:	465b      	mov	r3, fp
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ff6d 	bl	8007a1c <__ssputs_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	f000 80aa 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4a:	445a      	add	r2, fp
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80a2 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b62:	f10a 0a01 	add.w	sl, sl, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b70:	4654      	mov	r4, sl
 8007b72:	2205      	movs	r2, #5
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4851      	ldr	r0, [pc, #324]	; (8007cc0 <_svfiprintf_r+0x1ec>)
 8007b7a:	f7f8 fb41 	bl	8000200 <memchr>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	b9d8      	cbnz	r0, 8007bba <_svfiprintf_r+0xe6>
 8007b82:	06d0      	lsls	r0, r2, #27
 8007b84:	bf44      	itt	mi
 8007b86:	2320      	movmi	r3, #32
 8007b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8c:	0711      	lsls	r1, r2, #28
 8007b8e:	bf44      	itt	mi
 8007b90:	232b      	movmi	r3, #43	; 0x2b
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d015      	beq.n	8007bca <_svfiprintf_r+0xf6>
 8007b9e:	9a07      	ldr	r2, [sp, #28]
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f04f 0c0a 	mov.w	ip, #10
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d94e      	bls.n	8007c52 <_svfiprintf_r+0x17e>
 8007bb4:	b1b0      	cbz	r0, 8007be4 <_svfiprintf_r+0x110>
 8007bb6:	9207      	str	r2, [sp, #28]
 8007bb8:	e014      	b.n	8007be4 <_svfiprintf_r+0x110>
 8007bba:	eba0 0308 	sub.w	r3, r0, r8
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	46a2      	mov	sl, r4
 8007bc8:	e7d2      	b.n	8007b70 <_svfiprintf_r+0x9c>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	425b      	neglt	r3, r3
 8007bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bdc:	9307      	strge	r3, [sp, #28]
 8007bde:	9307      	strlt	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	9204      	strlt	r2, [sp, #16]
 8007be4:	7823      	ldrb	r3, [r4, #0]
 8007be6:	2b2e      	cmp	r3, #46	; 0x2e
 8007be8:	d10c      	bne.n	8007c04 <_svfiprintf_r+0x130>
 8007bea:	7863      	ldrb	r3, [r4, #1]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d135      	bne.n	8007c5c <_svfiprintf_r+0x188>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9203      	str	r2, [sp, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfb8      	it	lt
 8007bfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c00:	3402      	adds	r4, #2
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd0 <_svfiprintf_r+0x1fc>
 8007c08:	7821      	ldrb	r1, [r4, #0]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f7f8 faf7 	bl	8000200 <memchr>
 8007c12:	b140      	cbz	r0, 8007c26 <_svfiprintf_r+0x152>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	eba0 000a 	sub.w	r0, r0, sl
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	4303      	orrs	r3, r0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4826      	ldr	r0, [pc, #152]	; (8007cc4 <_svfiprintf_r+0x1f0>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 fae5 	bl	8000200 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d038      	beq.n	8007cac <_svfiprintf_r+0x1d8>
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_svfiprintf_r+0x1f4>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_svfiprintf_r+0x1b2>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	4433      	add	r3, r6
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	e767      	b.n	8007b22 <_svfiprintf_r+0x4e>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a5      	b.n	8007ba8 <_svfiprintf_r+0xd4>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	; 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_svfiprintf_r+0x1a8>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c5      	beq.n	8007c04 <_svfiprintf_r+0x130>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c3      	b.n	8007c04 <_svfiprintf_r+0x130>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_svfiprintf_r+0x194>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4638      	mov	r0, r7
 8007c92:	f3af 8000 	nop.w
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	d1d6      	bne.n	8007c4a <_svfiprintf_r+0x176>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af2c 	bmi.w	8007afc <_svfiprintf_r+0x28>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	b01d      	add	sp, #116	; 0x74
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007cb4:	a904      	add	r1, sp, #16
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f000 f9d4 	bl	8008064 <_printf_i>
 8007cbc:	e7eb      	b.n	8007c96 <_svfiprintf_r+0x1c2>
 8007cbe:	bf00      	nop
 8007cc0:	0800a1e8 	.word	0x0800a1e8
 8007cc4:	0800a1f2 	.word	0x0800a1f2
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a1d 	.word	0x08007a1d
 8007cd0:	0800a1ee 	.word	0x0800a1ee

08007cd4 <__sfputc_r>:
 8007cd4:	6893      	ldr	r3, [r2, #8]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	b410      	push	{r4}
 8007cdc:	6093      	str	r3, [r2, #8]
 8007cde:	da08      	bge.n	8007cf2 <__sfputc_r+0x1e>
 8007ce0:	6994      	ldr	r4, [r2, #24]
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	db01      	blt.n	8007cea <__sfputc_r+0x16>
 8007ce6:	290a      	cmp	r1, #10
 8007ce8:	d103      	bne.n	8007cf2 <__sfputc_r+0x1e>
 8007cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cee:	f000 bb7b 	b.w	80083e8 <__swbuf_r>
 8007cf2:	6813      	ldr	r3, [r2, #0]
 8007cf4:	1c58      	adds	r0, r3, #1
 8007cf6:	6010      	str	r0, [r2, #0]
 8007cf8:	7019      	strb	r1, [r3, #0]
 8007cfa:	4608      	mov	r0, r1
 8007cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <__sfputs_r>:
 8007d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	4614      	mov	r4, r2
 8007d0a:	18d5      	adds	r5, r2, r3
 8007d0c:	42ac      	cmp	r4, r5
 8007d0e:	d101      	bne.n	8007d14 <__sfputs_r+0x12>
 8007d10:	2000      	movs	r0, #0
 8007d12:	e007      	b.n	8007d24 <__sfputs_r+0x22>
 8007d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d18:	463a      	mov	r2, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff ffda 	bl	8007cd4 <__sfputc_r>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d1f3      	bne.n	8007d0c <__sfputs_r+0xa>
 8007d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d28 <_vfiprintf_r>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	b09d      	sub	sp, #116	; 0x74
 8007d30:	4614      	mov	r4, r2
 8007d32:	4698      	mov	r8, r3
 8007d34:	4606      	mov	r6, r0
 8007d36:	b118      	cbz	r0, 8007d40 <_vfiprintf_r+0x18>
 8007d38:	6983      	ldr	r3, [r0, #24]
 8007d3a:	b90b      	cbnz	r3, 8007d40 <_vfiprintf_r+0x18>
 8007d3c:	f7ff fd3a 	bl	80077b4 <__sinit>
 8007d40:	4b89      	ldr	r3, [pc, #548]	; (8007f68 <_vfiprintf_r+0x240>)
 8007d42:	429d      	cmp	r5, r3
 8007d44:	d11b      	bne.n	8007d7e <_vfiprintf_r+0x56>
 8007d46:	6875      	ldr	r5, [r6, #4]
 8007d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4a:	07d9      	lsls	r1, r3, #31
 8007d4c:	d405      	bmi.n	8007d5a <_vfiprintf_r+0x32>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_vfiprintf_r+0x32>
 8007d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d56:	f7ff fdcb 	bl	80078f0 <__retarget_lock_acquire_recursive>
 8007d5a:	89ab      	ldrh	r3, [r5, #12]
 8007d5c:	071b      	lsls	r3, r3, #28
 8007d5e:	d501      	bpl.n	8007d64 <_vfiprintf_r+0x3c>
 8007d60:	692b      	ldr	r3, [r5, #16]
 8007d62:	b9eb      	cbnz	r3, 8007da0 <_vfiprintf_r+0x78>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 fba2 	bl	80084b0 <__swsetup_r>
 8007d6c:	b1c0      	cbz	r0, 8007da0 <_vfiprintf_r+0x78>
 8007d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d70:	07dc      	lsls	r4, r3, #31
 8007d72:	d50e      	bpl.n	8007d92 <_vfiprintf_r+0x6a>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	b01d      	add	sp, #116	; 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	4b7b      	ldr	r3, [pc, #492]	; (8007f6c <_vfiprintf_r+0x244>)
 8007d80:	429d      	cmp	r5, r3
 8007d82:	d101      	bne.n	8007d88 <_vfiprintf_r+0x60>
 8007d84:	68b5      	ldr	r5, [r6, #8]
 8007d86:	e7df      	b.n	8007d48 <_vfiprintf_r+0x20>
 8007d88:	4b79      	ldr	r3, [pc, #484]	; (8007f70 <_vfiprintf_r+0x248>)
 8007d8a:	429d      	cmp	r5, r3
 8007d8c:	bf08      	it	eq
 8007d8e:	68f5      	ldreq	r5, [r6, #12]
 8007d90:	e7da      	b.n	8007d48 <_vfiprintf_r+0x20>
 8007d92:	89ab      	ldrh	r3, [r5, #12]
 8007d94:	0598      	lsls	r0, r3, #22
 8007d96:	d4ed      	bmi.n	8007d74 <_vfiprintf_r+0x4c>
 8007d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9a:	f7ff fdaa 	bl	80078f2 <__retarget_lock_release_recursive>
 8007d9e:	e7e9      	b.n	8007d74 <_vfiprintf_r+0x4c>
 8007da0:	2300      	movs	r3, #0
 8007da2:	9309      	str	r3, [sp, #36]	; 0x24
 8007da4:	2320      	movs	r3, #32
 8007da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dae:	2330      	movs	r3, #48	; 0x30
 8007db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f74 <_vfiprintf_r+0x24c>
 8007db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007db8:	f04f 0901 	mov.w	r9, #1
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	469a      	mov	sl, r3
 8007dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc4:	b10a      	cbz	r2, 8007dca <_vfiprintf_r+0xa2>
 8007dc6:	2a25      	cmp	r2, #37	; 0x25
 8007dc8:	d1f9      	bne.n	8007dbe <_vfiprintf_r+0x96>
 8007dca:	ebba 0b04 	subs.w	fp, sl, r4
 8007dce:	d00b      	beq.n	8007de8 <_vfiprintf_r+0xc0>
 8007dd0:	465b      	mov	r3, fp
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f7ff ff93 	bl	8007d02 <__sfputs_r>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f000 80aa 	beq.w	8007f36 <_vfiprintf_r+0x20e>
 8007de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de4:	445a      	add	r2, fp
 8007de6:	9209      	str	r2, [sp, #36]	; 0x24
 8007de8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80a2 	beq.w	8007f36 <_vfiprintf_r+0x20e>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfc:	f10a 0a01 	add.w	sl, sl, #1
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	9307      	str	r3, [sp, #28]
 8007e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e08:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0a:	4654      	mov	r4, sl
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e12:	4858      	ldr	r0, [pc, #352]	; (8007f74 <_vfiprintf_r+0x24c>)
 8007e14:	f7f8 f9f4 	bl	8000200 <memchr>
 8007e18:	9a04      	ldr	r2, [sp, #16]
 8007e1a:	b9d8      	cbnz	r0, 8007e54 <_vfiprintf_r+0x12c>
 8007e1c:	06d1      	lsls	r1, r2, #27
 8007e1e:	bf44      	itt	mi
 8007e20:	2320      	movmi	r3, #32
 8007e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e26:	0713      	lsls	r3, r2, #28
 8007e28:	bf44      	itt	mi
 8007e2a:	232b      	movmi	r3, #43	; 0x2b
 8007e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e30:	f89a 3000 	ldrb.w	r3, [sl]
 8007e34:	2b2a      	cmp	r3, #42	; 0x2a
 8007e36:	d015      	beq.n	8007e64 <_vfiprintf_r+0x13c>
 8007e38:	9a07      	ldr	r2, [sp, #28]
 8007e3a:	4654      	mov	r4, sl
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	f04f 0c0a 	mov.w	ip, #10
 8007e42:	4621      	mov	r1, r4
 8007e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e48:	3b30      	subs	r3, #48	; 0x30
 8007e4a:	2b09      	cmp	r3, #9
 8007e4c:	d94e      	bls.n	8007eec <_vfiprintf_r+0x1c4>
 8007e4e:	b1b0      	cbz	r0, 8007e7e <_vfiprintf_r+0x156>
 8007e50:	9207      	str	r2, [sp, #28]
 8007e52:	e014      	b.n	8007e7e <_vfiprintf_r+0x156>
 8007e54:	eba0 0308 	sub.w	r3, r0, r8
 8007e58:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	46a2      	mov	sl, r4
 8007e62:	e7d2      	b.n	8007e0a <_vfiprintf_r+0xe2>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1d19      	adds	r1, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	9103      	str	r1, [sp, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfbb      	ittet	lt
 8007e70:	425b      	neglt	r3, r3
 8007e72:	f042 0202 	orrlt.w	r2, r2, #2
 8007e76:	9307      	strge	r3, [sp, #28]
 8007e78:	9307      	strlt	r3, [sp, #28]
 8007e7a:	bfb8      	it	lt
 8007e7c:	9204      	strlt	r2, [sp, #16]
 8007e7e:	7823      	ldrb	r3, [r4, #0]
 8007e80:	2b2e      	cmp	r3, #46	; 0x2e
 8007e82:	d10c      	bne.n	8007e9e <_vfiprintf_r+0x176>
 8007e84:	7863      	ldrb	r3, [r4, #1]
 8007e86:	2b2a      	cmp	r3, #42	; 0x2a
 8007e88:	d135      	bne.n	8007ef6 <_vfiprintf_r+0x1ce>
 8007e8a:	9b03      	ldr	r3, [sp, #12]
 8007e8c:	1d1a      	adds	r2, r3, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	9203      	str	r2, [sp, #12]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfb8      	it	lt
 8007e96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e9a:	3402      	adds	r4, #2
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f84 <_vfiprintf_r+0x25c>
 8007ea2:	7821      	ldrb	r1, [r4, #0]
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	4650      	mov	r0, sl
 8007ea8:	f7f8 f9aa 	bl	8000200 <memchr>
 8007eac:	b140      	cbz	r0, 8007ec0 <_vfiprintf_r+0x198>
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	eba0 000a 	sub.w	r0, r0, sl
 8007eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	4303      	orrs	r3, r0
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	482c      	ldr	r0, [pc, #176]	; (8007f78 <_vfiprintf_r+0x250>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f998 	bl	8000200 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d03f      	beq.n	8007f54 <_vfiprintf_r+0x22c>
 8007ed4:	4b29      	ldr	r3, [pc, #164]	; (8007f7c <_vfiprintf_r+0x254>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_vfiprintf_r+0x1f8>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	443b      	add	r3, r7
 8007ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eea:	e767      	b.n	8007dbc <_vfiprintf_r+0x94>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a5      	b.n	8007e42 <_vfiprintf_r+0x11a>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	; 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_vfiprintf_r+0x1ee>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c5      	beq.n	8007e9e <_vfiprintf_r+0x176>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c3      	b.n	8007e9e <_vfiprintf_r+0x176>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_vfiprintf_r+0x1da>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b16      	ldr	r3, [pc, #88]	; (8007f80 <_vfiprintf_r+0x258>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f3af 8000 	nop.w
 8007f30:	4607      	mov	r7, r0
 8007f32:	1c78      	adds	r0, r7, #1
 8007f34:	d1d6      	bne.n	8007ee4 <_vfiprintf_r+0x1bc>
 8007f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f38:	07d9      	lsls	r1, r3, #31
 8007f3a:	d405      	bmi.n	8007f48 <_vfiprintf_r+0x220>
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	059a      	lsls	r2, r3, #22
 8007f40:	d402      	bmi.n	8007f48 <_vfiprintf_r+0x220>
 8007f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f44:	f7ff fcd5 	bl	80078f2 <__retarget_lock_release_recursive>
 8007f48:	89ab      	ldrh	r3, [r5, #12]
 8007f4a:	065b      	lsls	r3, r3, #25
 8007f4c:	f53f af12 	bmi.w	8007d74 <_vfiprintf_r+0x4c>
 8007f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f52:	e711      	b.n	8007d78 <_vfiprintf_r+0x50>
 8007f54:	ab03      	add	r3, sp, #12
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	462a      	mov	r2, r5
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <_vfiprintf_r+0x258>)
 8007f5c:	a904      	add	r1, sp, #16
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f000 f880 	bl	8008064 <_printf_i>
 8007f64:	e7e4      	b.n	8007f30 <_vfiprintf_r+0x208>
 8007f66:	bf00      	nop
 8007f68:	0800a1a8 	.word	0x0800a1a8
 8007f6c:	0800a1c8 	.word	0x0800a1c8
 8007f70:	0800a188 	.word	0x0800a188
 8007f74:	0800a1e8 	.word	0x0800a1e8
 8007f78:	0800a1f2 	.word	0x0800a1f2
 8007f7c:	00000000 	.word	0x00000000
 8007f80:	08007d03 	.word	0x08007d03
 8007f84:	0800a1ee 	.word	0x0800a1ee

08007f88 <_printf_common>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	4699      	mov	r9, r3
 8007f90:	688a      	ldr	r2, [r1, #8]
 8007f92:	690b      	ldr	r3, [r1, #16]
 8007f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	bfb8      	it	lt
 8007f9c:	4613      	movlt	r3, r2
 8007f9e:	6033      	str	r3, [r6, #0]
 8007fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	b10a      	cbz	r2, 8007fae <_printf_common+0x26>
 8007faa:	3301      	adds	r3, #1
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	0699      	lsls	r1, r3, #26
 8007fb2:	bf42      	ittt	mi
 8007fb4:	6833      	ldrmi	r3, [r6, #0]
 8007fb6:	3302      	addmi	r3, #2
 8007fb8:	6033      	strmi	r3, [r6, #0]
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	f015 0506 	ands.w	r5, r5, #6
 8007fc0:	d106      	bne.n	8007fd0 <_printf_common+0x48>
 8007fc2:	f104 0a19 	add.w	sl, r4, #25
 8007fc6:	68e3      	ldr	r3, [r4, #12]
 8007fc8:	6832      	ldr	r2, [r6, #0]
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	42ab      	cmp	r3, r5
 8007fce:	dc26      	bgt.n	800801e <_printf_common+0x96>
 8007fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd4:	1e13      	subs	r3, r2, #0
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	bf18      	it	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	0692      	lsls	r2, r2, #26
 8007fde:	d42b      	bmi.n	8008038 <_printf_common+0xb0>
 8007fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	47c0      	blx	r8
 8007fea:	3001      	adds	r0, #1
 8007fec:	d01e      	beq.n	800802c <_printf_common+0xa4>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	68e5      	ldr	r5, [r4, #12]
 8007ff2:	6832      	ldr	r2, [r6, #0]
 8007ff4:	f003 0306 	and.w	r3, r3, #6
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	bf08      	it	eq
 8007ffc:	1aad      	subeq	r5, r5, r2
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	6922      	ldr	r2, [r4, #16]
 8008002:	bf0c      	ite	eq
 8008004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008008:	2500      	movne	r5, #0
 800800a:	4293      	cmp	r3, r2
 800800c:	bfc4      	itt	gt
 800800e:	1a9b      	subgt	r3, r3, r2
 8008010:	18ed      	addgt	r5, r5, r3
 8008012:	2600      	movs	r6, #0
 8008014:	341a      	adds	r4, #26
 8008016:	42b5      	cmp	r5, r6
 8008018:	d11a      	bne.n	8008050 <_printf_common+0xc8>
 800801a:	2000      	movs	r0, #0
 800801c:	e008      	b.n	8008030 <_printf_common+0xa8>
 800801e:	2301      	movs	r3, #1
 8008020:	4652      	mov	r2, sl
 8008022:	4649      	mov	r1, r9
 8008024:	4638      	mov	r0, r7
 8008026:	47c0      	blx	r8
 8008028:	3001      	adds	r0, #1
 800802a:	d103      	bne.n	8008034 <_printf_common+0xac>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008034:	3501      	adds	r5, #1
 8008036:	e7c6      	b.n	8007fc6 <_printf_common+0x3e>
 8008038:	18e1      	adds	r1, r4, r3
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	2030      	movs	r0, #48	; 0x30
 800803e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008042:	4422      	add	r2, r4
 8008044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800804c:	3302      	adds	r3, #2
 800804e:	e7c7      	b.n	8007fe0 <_printf_common+0x58>
 8008050:	2301      	movs	r3, #1
 8008052:	4622      	mov	r2, r4
 8008054:	4649      	mov	r1, r9
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	3001      	adds	r0, #1
 800805c:	d0e6      	beq.n	800802c <_printf_common+0xa4>
 800805e:	3601      	adds	r6, #1
 8008060:	e7d9      	b.n	8008016 <_printf_common+0x8e>
	...

08008064 <_printf_i>:
 8008064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	7e0f      	ldrb	r7, [r1, #24]
 800806a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800806c:	2f78      	cmp	r7, #120	; 0x78
 800806e:	4691      	mov	r9, r2
 8008070:	4680      	mov	r8, r0
 8008072:	460c      	mov	r4, r1
 8008074:	469a      	mov	sl, r3
 8008076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800807a:	d807      	bhi.n	800808c <_printf_i+0x28>
 800807c:	2f62      	cmp	r7, #98	; 0x62
 800807e:	d80a      	bhi.n	8008096 <_printf_i+0x32>
 8008080:	2f00      	cmp	r7, #0
 8008082:	f000 80d8 	beq.w	8008236 <_printf_i+0x1d2>
 8008086:	2f58      	cmp	r7, #88	; 0x58
 8008088:	f000 80a3 	beq.w	80081d2 <_printf_i+0x16e>
 800808c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008094:	e03a      	b.n	800810c <_printf_i+0xa8>
 8008096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800809a:	2b15      	cmp	r3, #21
 800809c:	d8f6      	bhi.n	800808c <_printf_i+0x28>
 800809e:	a101      	add	r1, pc, #4	; (adr r1, 80080a4 <_printf_i+0x40>)
 80080a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080a4:	080080fd 	.word	0x080080fd
 80080a8:	08008111 	.word	0x08008111
 80080ac:	0800808d 	.word	0x0800808d
 80080b0:	0800808d 	.word	0x0800808d
 80080b4:	0800808d 	.word	0x0800808d
 80080b8:	0800808d 	.word	0x0800808d
 80080bc:	08008111 	.word	0x08008111
 80080c0:	0800808d 	.word	0x0800808d
 80080c4:	0800808d 	.word	0x0800808d
 80080c8:	0800808d 	.word	0x0800808d
 80080cc:	0800808d 	.word	0x0800808d
 80080d0:	0800821d 	.word	0x0800821d
 80080d4:	08008141 	.word	0x08008141
 80080d8:	080081ff 	.word	0x080081ff
 80080dc:	0800808d 	.word	0x0800808d
 80080e0:	0800808d 	.word	0x0800808d
 80080e4:	0800823f 	.word	0x0800823f
 80080e8:	0800808d 	.word	0x0800808d
 80080ec:	08008141 	.word	0x08008141
 80080f0:	0800808d 	.word	0x0800808d
 80080f4:	0800808d 	.word	0x0800808d
 80080f8:	08008207 	.word	0x08008207
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	1d1a      	adds	r2, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	602a      	str	r2, [r5, #0]
 8008104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800810c:	2301      	movs	r3, #1
 800810e:	e0a3      	b.n	8008258 <_printf_i+0x1f4>
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	6829      	ldr	r1, [r5, #0]
 8008114:	0606      	lsls	r6, r0, #24
 8008116:	f101 0304 	add.w	r3, r1, #4
 800811a:	d50a      	bpl.n	8008132 <_printf_i+0xce>
 800811c:	680e      	ldr	r6, [r1, #0]
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	2e00      	cmp	r6, #0
 8008122:	da03      	bge.n	800812c <_printf_i+0xc8>
 8008124:	232d      	movs	r3, #45	; 0x2d
 8008126:	4276      	negs	r6, r6
 8008128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812c:	485e      	ldr	r0, [pc, #376]	; (80082a8 <_printf_i+0x244>)
 800812e:	230a      	movs	r3, #10
 8008130:	e019      	b.n	8008166 <_printf_i+0x102>
 8008132:	680e      	ldr	r6, [r1, #0]
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	f010 0f40 	tst.w	r0, #64	; 0x40
 800813a:	bf18      	it	ne
 800813c:	b236      	sxthne	r6, r6
 800813e:	e7ef      	b.n	8008120 <_printf_i+0xbc>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	6820      	ldr	r0, [r4, #0]
 8008144:	1d19      	adds	r1, r3, #4
 8008146:	6029      	str	r1, [r5, #0]
 8008148:	0601      	lsls	r1, r0, #24
 800814a:	d501      	bpl.n	8008150 <_printf_i+0xec>
 800814c:	681e      	ldr	r6, [r3, #0]
 800814e:	e002      	b.n	8008156 <_printf_i+0xf2>
 8008150:	0646      	lsls	r6, r0, #25
 8008152:	d5fb      	bpl.n	800814c <_printf_i+0xe8>
 8008154:	881e      	ldrh	r6, [r3, #0]
 8008156:	4854      	ldr	r0, [pc, #336]	; (80082a8 <_printf_i+0x244>)
 8008158:	2f6f      	cmp	r7, #111	; 0x6f
 800815a:	bf0c      	ite	eq
 800815c:	2308      	moveq	r3, #8
 800815e:	230a      	movne	r3, #10
 8008160:	2100      	movs	r1, #0
 8008162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008166:	6865      	ldr	r5, [r4, #4]
 8008168:	60a5      	str	r5, [r4, #8]
 800816a:	2d00      	cmp	r5, #0
 800816c:	bfa2      	ittt	ge
 800816e:	6821      	ldrge	r1, [r4, #0]
 8008170:	f021 0104 	bicge.w	r1, r1, #4
 8008174:	6021      	strge	r1, [r4, #0]
 8008176:	b90e      	cbnz	r6, 800817c <_printf_i+0x118>
 8008178:	2d00      	cmp	r5, #0
 800817a:	d04d      	beq.n	8008218 <_printf_i+0x1b4>
 800817c:	4615      	mov	r5, r2
 800817e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008182:	fb03 6711 	mls	r7, r3, r1, r6
 8008186:	5dc7      	ldrb	r7, [r0, r7]
 8008188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800818c:	4637      	mov	r7, r6
 800818e:	42bb      	cmp	r3, r7
 8008190:	460e      	mov	r6, r1
 8008192:	d9f4      	bls.n	800817e <_printf_i+0x11a>
 8008194:	2b08      	cmp	r3, #8
 8008196:	d10b      	bne.n	80081b0 <_printf_i+0x14c>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07de      	lsls	r6, r3, #31
 800819c:	d508      	bpl.n	80081b0 <_printf_i+0x14c>
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	4299      	cmp	r1, r3
 80081a4:	bfde      	ittt	le
 80081a6:	2330      	movle	r3, #48	; 0x30
 80081a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80081b0:	1b52      	subs	r2, r2, r5
 80081b2:	6122      	str	r2, [r4, #16]
 80081b4:	f8cd a000 	str.w	sl, [sp]
 80081b8:	464b      	mov	r3, r9
 80081ba:	aa03      	add	r2, sp, #12
 80081bc:	4621      	mov	r1, r4
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff fee2 	bl	8007f88 <_printf_common>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d14c      	bne.n	8008262 <_printf_i+0x1fe>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081cc:	b004      	add	sp, #16
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	4835      	ldr	r0, [pc, #212]	; (80082a8 <_printf_i+0x244>)
 80081d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081d8:	6829      	ldr	r1, [r5, #0]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80081e0:	6029      	str	r1, [r5, #0]
 80081e2:	061d      	lsls	r5, r3, #24
 80081e4:	d514      	bpl.n	8008210 <_printf_i+0x1ac>
 80081e6:	07df      	lsls	r7, r3, #31
 80081e8:	bf44      	itt	mi
 80081ea:	f043 0320 	orrmi.w	r3, r3, #32
 80081ee:	6023      	strmi	r3, [r4, #0]
 80081f0:	b91e      	cbnz	r6, 80081fa <_printf_i+0x196>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	f023 0320 	bic.w	r3, r3, #32
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	2310      	movs	r3, #16
 80081fc:	e7b0      	b.n	8008160 <_printf_i+0xfc>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	f043 0320 	orr.w	r3, r3, #32
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	2378      	movs	r3, #120	; 0x78
 8008208:	4828      	ldr	r0, [pc, #160]	; (80082ac <_printf_i+0x248>)
 800820a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800820e:	e7e3      	b.n	80081d8 <_printf_i+0x174>
 8008210:	0659      	lsls	r1, r3, #25
 8008212:	bf48      	it	mi
 8008214:	b2b6      	uxthmi	r6, r6
 8008216:	e7e6      	b.n	80081e6 <_printf_i+0x182>
 8008218:	4615      	mov	r5, r2
 800821a:	e7bb      	b.n	8008194 <_printf_i+0x130>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	6826      	ldr	r6, [r4, #0]
 8008220:	6961      	ldr	r1, [r4, #20]
 8008222:	1d18      	adds	r0, r3, #4
 8008224:	6028      	str	r0, [r5, #0]
 8008226:	0635      	lsls	r5, r6, #24
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	d501      	bpl.n	8008230 <_printf_i+0x1cc>
 800822c:	6019      	str	r1, [r3, #0]
 800822e:	e002      	b.n	8008236 <_printf_i+0x1d2>
 8008230:	0670      	lsls	r0, r6, #25
 8008232:	d5fb      	bpl.n	800822c <_printf_i+0x1c8>
 8008234:	8019      	strh	r1, [r3, #0]
 8008236:	2300      	movs	r3, #0
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	4615      	mov	r5, r2
 800823c:	e7ba      	b.n	80081b4 <_printf_i+0x150>
 800823e:	682b      	ldr	r3, [r5, #0]
 8008240:	1d1a      	adds	r2, r3, #4
 8008242:	602a      	str	r2, [r5, #0]
 8008244:	681d      	ldr	r5, [r3, #0]
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	2100      	movs	r1, #0
 800824a:	4628      	mov	r0, r5
 800824c:	f7f7 ffd8 	bl	8000200 <memchr>
 8008250:	b108      	cbz	r0, 8008256 <_printf_i+0x1f2>
 8008252:	1b40      	subs	r0, r0, r5
 8008254:	6060      	str	r0, [r4, #4]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	2300      	movs	r3, #0
 800825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008260:	e7a8      	b.n	80081b4 <_printf_i+0x150>
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	462a      	mov	r2, r5
 8008266:	4649      	mov	r1, r9
 8008268:	4640      	mov	r0, r8
 800826a:	47d0      	blx	sl
 800826c:	3001      	adds	r0, #1
 800826e:	d0ab      	beq.n	80081c8 <_printf_i+0x164>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	079b      	lsls	r3, r3, #30
 8008274:	d413      	bmi.n	800829e <_printf_i+0x23a>
 8008276:	68e0      	ldr	r0, [r4, #12]
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	4298      	cmp	r0, r3
 800827c:	bfb8      	it	lt
 800827e:	4618      	movlt	r0, r3
 8008280:	e7a4      	b.n	80081cc <_printf_i+0x168>
 8008282:	2301      	movs	r3, #1
 8008284:	4632      	mov	r2, r6
 8008286:	4649      	mov	r1, r9
 8008288:	4640      	mov	r0, r8
 800828a:	47d0      	blx	sl
 800828c:	3001      	adds	r0, #1
 800828e:	d09b      	beq.n	80081c8 <_printf_i+0x164>
 8008290:	3501      	adds	r5, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	9903      	ldr	r1, [sp, #12]
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	42ab      	cmp	r3, r5
 800829a:	dcf2      	bgt.n	8008282 <_printf_i+0x21e>
 800829c:	e7eb      	b.n	8008276 <_printf_i+0x212>
 800829e:	2500      	movs	r5, #0
 80082a0:	f104 0619 	add.w	r6, r4, #25
 80082a4:	e7f5      	b.n	8008292 <_printf_i+0x22e>
 80082a6:	bf00      	nop
 80082a8:	0800a1f9 	.word	0x0800a1f9
 80082ac:	0800a20a 	.word	0x0800a20a

080082b0 <_putc_r>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	460d      	mov	r5, r1
 80082b4:	4614      	mov	r4, r2
 80082b6:	4606      	mov	r6, r0
 80082b8:	b118      	cbz	r0, 80082c2 <_putc_r+0x12>
 80082ba:	6983      	ldr	r3, [r0, #24]
 80082bc:	b90b      	cbnz	r3, 80082c2 <_putc_r+0x12>
 80082be:	f7ff fa79 	bl	80077b4 <__sinit>
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <_putc_r+0x84>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d124      	bne.n	8008312 <_putc_r+0x62>
 80082c8:	6874      	ldr	r4, [r6, #4]
 80082ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082cc:	07d8      	lsls	r0, r3, #31
 80082ce:	d405      	bmi.n	80082dc <_putc_r+0x2c>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	0599      	lsls	r1, r3, #22
 80082d4:	d402      	bmi.n	80082dc <_putc_r+0x2c>
 80082d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d8:	f7ff fb0a 	bl	80078f0 <__retarget_lock_acquire_recursive>
 80082dc:	68a3      	ldr	r3, [r4, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	60a3      	str	r3, [r4, #8]
 80082e4:	da05      	bge.n	80082f2 <_putc_r+0x42>
 80082e6:	69a2      	ldr	r2, [r4, #24]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	db1c      	blt.n	8008326 <_putc_r+0x76>
 80082ec:	b2eb      	uxtb	r3, r5
 80082ee:	2b0a      	cmp	r3, #10
 80082f0:	d019      	beq.n	8008326 <_putc_r+0x76>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	6022      	str	r2, [r4, #0]
 80082f8:	701d      	strb	r5, [r3, #0]
 80082fa:	b2ed      	uxtb	r5, r5
 80082fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082fe:	07da      	lsls	r2, r3, #31
 8008300:	d405      	bmi.n	800830e <_putc_r+0x5e>
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	059b      	lsls	r3, r3, #22
 8008306:	d402      	bmi.n	800830e <_putc_r+0x5e>
 8008308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830a:	f7ff faf2 	bl	80078f2 <__retarget_lock_release_recursive>
 800830e:	4628      	mov	r0, r5
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	4b09      	ldr	r3, [pc, #36]	; (8008338 <_putc_r+0x88>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d101      	bne.n	800831c <_putc_r+0x6c>
 8008318:	68b4      	ldr	r4, [r6, #8]
 800831a:	e7d6      	b.n	80082ca <_putc_r+0x1a>
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <_putc_r+0x8c>)
 800831e:	429c      	cmp	r4, r3
 8008320:	bf08      	it	eq
 8008322:	68f4      	ldreq	r4, [r6, #12]
 8008324:	e7d1      	b.n	80082ca <_putc_r+0x1a>
 8008326:	4629      	mov	r1, r5
 8008328:	4622      	mov	r2, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f000 f85c 	bl	80083e8 <__swbuf_r>
 8008330:	4605      	mov	r5, r0
 8008332:	e7e3      	b.n	80082fc <_putc_r+0x4c>
 8008334:	0800a1a8 	.word	0x0800a1a8
 8008338:	0800a1c8 	.word	0x0800a1c8
 800833c:	0800a188 	.word	0x0800a188

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4d06      	ldr	r5, [pc, #24]	; (800835c <_sbrk_r+0x1c>)
 8008344:	2300      	movs	r3, #0
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f8 fc30 	bl	8000bb0 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20003d18 	.word	0x20003d18

08008360 <__sread>:
 8008360:	b510      	push	{r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008368:	f000 fae2 	bl	8008930 <_read_r>
 800836c:	2800      	cmp	r0, #0
 800836e:	bfab      	itete	ge
 8008370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008372:	89a3      	ldrhlt	r3, [r4, #12]
 8008374:	181b      	addge	r3, r3, r0
 8008376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800837a:	bfac      	ite	ge
 800837c:	6563      	strge	r3, [r4, #84]	; 0x54
 800837e:	81a3      	strhlt	r3, [r4, #12]
 8008380:	bd10      	pop	{r4, pc}

08008382 <__swrite>:
 8008382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008386:	461f      	mov	r7, r3
 8008388:	898b      	ldrh	r3, [r1, #12]
 800838a:	05db      	lsls	r3, r3, #23
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4616      	mov	r6, r2
 8008392:	d505      	bpl.n	80083a0 <__swrite+0x1e>
 8008394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008398:	2302      	movs	r3, #2
 800839a:	2200      	movs	r2, #0
 800839c:	f000 f9c8 	bl	8008730 <_lseek_r>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	4632      	mov	r2, r6
 80083ae:	463b      	mov	r3, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b6:	f000 b869 	b.w	800848c <_write_r>

080083ba <__sseek>:
 80083ba:	b510      	push	{r4, lr}
 80083bc:	460c      	mov	r4, r1
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 f9b5 	bl	8008730 <_lseek_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	bf15      	itete	ne
 80083cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083d6:	81a3      	strheq	r3, [r4, #12]
 80083d8:	bf18      	it	ne
 80083da:	81a3      	strhne	r3, [r4, #12]
 80083dc:	bd10      	pop	{r4, pc}

080083de <__sclose>:
 80083de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e2:	f000 b8d3 	b.w	800858c <_close_r>
	...

080083e8 <__swbuf_r>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	460e      	mov	r6, r1
 80083ec:	4614      	mov	r4, r2
 80083ee:	4605      	mov	r5, r0
 80083f0:	b118      	cbz	r0, 80083fa <__swbuf_r+0x12>
 80083f2:	6983      	ldr	r3, [r0, #24]
 80083f4:	b90b      	cbnz	r3, 80083fa <__swbuf_r+0x12>
 80083f6:	f7ff f9dd 	bl	80077b4 <__sinit>
 80083fa:	4b21      	ldr	r3, [pc, #132]	; (8008480 <__swbuf_r+0x98>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d12b      	bne.n	8008458 <__swbuf_r+0x70>
 8008400:	686c      	ldr	r4, [r5, #4]
 8008402:	69a3      	ldr	r3, [r4, #24]
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	071a      	lsls	r2, r3, #28
 800840a:	d52f      	bpl.n	800846c <__swbuf_r+0x84>
 800840c:	6923      	ldr	r3, [r4, #16]
 800840e:	b36b      	cbz	r3, 800846c <__swbuf_r+0x84>
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	6963      	ldr	r3, [r4, #20]
 8008418:	b2f6      	uxtb	r6, r6
 800841a:	4283      	cmp	r3, r0
 800841c:	4637      	mov	r7, r6
 800841e:	dc04      	bgt.n	800842a <__swbuf_r+0x42>
 8008420:	4621      	mov	r1, r4
 8008422:	4628      	mov	r0, r5
 8008424:	f000 f948 	bl	80086b8 <_fflush_r>
 8008428:	bb30      	cbnz	r0, 8008478 <__swbuf_r+0x90>
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	3b01      	subs	r3, #1
 800842e:	60a3      	str	r3, [r4, #8]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	701e      	strb	r6, [r3, #0]
 8008438:	6963      	ldr	r3, [r4, #20]
 800843a:	3001      	adds	r0, #1
 800843c:	4283      	cmp	r3, r0
 800843e:	d004      	beq.n	800844a <__swbuf_r+0x62>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	07db      	lsls	r3, r3, #31
 8008444:	d506      	bpl.n	8008454 <__swbuf_r+0x6c>
 8008446:	2e0a      	cmp	r6, #10
 8008448:	d104      	bne.n	8008454 <__swbuf_r+0x6c>
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f000 f933 	bl	80086b8 <_fflush_r>
 8008452:	b988      	cbnz	r0, 8008478 <__swbuf_r+0x90>
 8008454:	4638      	mov	r0, r7
 8008456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008458:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <__swbuf_r+0x9c>)
 800845a:	429c      	cmp	r4, r3
 800845c:	d101      	bne.n	8008462 <__swbuf_r+0x7a>
 800845e:	68ac      	ldr	r4, [r5, #8]
 8008460:	e7cf      	b.n	8008402 <__swbuf_r+0x1a>
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <__swbuf_r+0xa0>)
 8008464:	429c      	cmp	r4, r3
 8008466:	bf08      	it	eq
 8008468:	68ec      	ldreq	r4, [r5, #12]
 800846a:	e7ca      	b.n	8008402 <__swbuf_r+0x1a>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f81e 	bl	80084b0 <__swsetup_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0cb      	beq.n	8008410 <__swbuf_r+0x28>
 8008478:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800847c:	e7ea      	b.n	8008454 <__swbuf_r+0x6c>
 800847e:	bf00      	nop
 8008480:	0800a1a8 	.word	0x0800a1a8
 8008484:	0800a1c8 	.word	0x0800a1c8
 8008488:	0800a188 	.word	0x0800a188

0800848c <_write_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	; (80084ac <_write_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f8 fb37 	bl	8000b0e <_write>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_write_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_write_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20003d18 	.word	0x20003d18

080084b0 <__swsetup_r>:
 80084b0:	4b32      	ldr	r3, [pc, #200]	; (800857c <__swsetup_r+0xcc>)
 80084b2:	b570      	push	{r4, r5, r6, lr}
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	4606      	mov	r6, r0
 80084b8:	460c      	mov	r4, r1
 80084ba:	b125      	cbz	r5, 80084c6 <__swsetup_r+0x16>
 80084bc:	69ab      	ldr	r3, [r5, #24]
 80084be:	b913      	cbnz	r3, 80084c6 <__swsetup_r+0x16>
 80084c0:	4628      	mov	r0, r5
 80084c2:	f7ff f977 	bl	80077b4 <__sinit>
 80084c6:	4b2e      	ldr	r3, [pc, #184]	; (8008580 <__swsetup_r+0xd0>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d10f      	bne.n	80084ec <__swsetup_r+0x3c>
 80084cc:	686c      	ldr	r4, [r5, #4]
 80084ce:	89a3      	ldrh	r3, [r4, #12]
 80084d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084d4:	0719      	lsls	r1, r3, #28
 80084d6:	d42c      	bmi.n	8008532 <__swsetup_r+0x82>
 80084d8:	06dd      	lsls	r5, r3, #27
 80084da:	d411      	bmi.n	8008500 <__swsetup_r+0x50>
 80084dc:	2309      	movs	r3, #9
 80084de:	6033      	str	r3, [r6, #0]
 80084e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084e4:	81a3      	strh	r3, [r4, #12]
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ea:	e03e      	b.n	800856a <__swsetup_r+0xba>
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <__swsetup_r+0xd4>)
 80084ee:	429c      	cmp	r4, r3
 80084f0:	d101      	bne.n	80084f6 <__swsetup_r+0x46>
 80084f2:	68ac      	ldr	r4, [r5, #8]
 80084f4:	e7eb      	b.n	80084ce <__swsetup_r+0x1e>
 80084f6:	4b24      	ldr	r3, [pc, #144]	; (8008588 <__swsetup_r+0xd8>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	bf08      	it	eq
 80084fc:	68ec      	ldreq	r4, [r5, #12]
 80084fe:	e7e6      	b.n	80084ce <__swsetup_r+0x1e>
 8008500:	0758      	lsls	r0, r3, #29
 8008502:	d512      	bpl.n	800852a <__swsetup_r+0x7a>
 8008504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008506:	b141      	cbz	r1, 800851a <__swsetup_r+0x6a>
 8008508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800850c:	4299      	cmp	r1, r3
 800850e:	d002      	beq.n	8008516 <__swsetup_r+0x66>
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f991 	bl	8008838 <_free_r>
 8008516:	2300      	movs	r3, #0
 8008518:	6363      	str	r3, [r4, #52]	; 0x34
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	2300      	movs	r3, #0
 8008524:	6063      	str	r3, [r4, #4]
 8008526:	6923      	ldr	r3, [r4, #16]
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f043 0308 	orr.w	r3, r3, #8
 8008530:	81a3      	strh	r3, [r4, #12]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	b94b      	cbnz	r3, 800854a <__swsetup_r+0x9a>
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800853c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008540:	d003      	beq.n	800854a <__swsetup_r+0x9a>
 8008542:	4621      	mov	r1, r4
 8008544:	4630      	mov	r0, r6
 8008546:	f000 f92b 	bl	80087a0 <__smakebuf_r>
 800854a:	89a0      	ldrh	r0, [r4, #12]
 800854c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008550:	f010 0301 	ands.w	r3, r0, #1
 8008554:	d00a      	beq.n	800856c <__swsetup_r+0xbc>
 8008556:	2300      	movs	r3, #0
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	6963      	ldr	r3, [r4, #20]
 800855c:	425b      	negs	r3, r3
 800855e:	61a3      	str	r3, [r4, #24]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b943      	cbnz	r3, 8008576 <__swsetup_r+0xc6>
 8008564:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008568:	d1ba      	bne.n	80084e0 <__swsetup_r+0x30>
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	0781      	lsls	r1, r0, #30
 800856e:	bf58      	it	pl
 8008570:	6963      	ldrpl	r3, [r4, #20]
 8008572:	60a3      	str	r3, [r4, #8]
 8008574:	e7f4      	b.n	8008560 <__swsetup_r+0xb0>
 8008576:	2000      	movs	r0, #0
 8008578:	e7f7      	b.n	800856a <__swsetup_r+0xba>
 800857a:	bf00      	nop
 800857c:	20000170 	.word	0x20000170
 8008580:	0800a1a8 	.word	0x0800a1a8
 8008584:	0800a1c8 	.word	0x0800a1c8
 8008588:	0800a188 	.word	0x0800a188

0800858c <_close_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d06      	ldr	r5, [pc, #24]	; (80085a8 <_close_r+0x1c>)
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	602b      	str	r3, [r5, #0]
 8008598:	f7f8 fad5 	bl	8000b46 <_close>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_close_r+0x1a>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_close_r+0x1a>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	20003d18 	.word	0x20003d18

080085ac <__sflush_r>:
 80085ac:	898a      	ldrh	r2, [r1, #12]
 80085ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b2:	4605      	mov	r5, r0
 80085b4:	0710      	lsls	r0, r2, #28
 80085b6:	460c      	mov	r4, r1
 80085b8:	d458      	bmi.n	800866c <__sflush_r+0xc0>
 80085ba:	684b      	ldr	r3, [r1, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dc05      	bgt.n	80085cc <__sflush_r+0x20>
 80085c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dc02      	bgt.n	80085cc <__sflush_r+0x20>
 80085c6:	2000      	movs	r0, #0
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	d0f9      	beq.n	80085c6 <__sflush_r+0x1a>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085d8:	682f      	ldr	r7, [r5, #0]
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	d032      	beq.n	8008644 <__sflush_r+0x98>
 80085de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	075a      	lsls	r2, r3, #29
 80085e4:	d505      	bpl.n	80085f2 <__sflush_r+0x46>
 80085e6:	6863      	ldr	r3, [r4, #4]
 80085e8:	1ac0      	subs	r0, r0, r3
 80085ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085ec:	b10b      	cbz	r3, 80085f2 <__sflush_r+0x46>
 80085ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085f0:	1ac0      	subs	r0, r0, r3
 80085f2:	2300      	movs	r3, #0
 80085f4:	4602      	mov	r2, r0
 80085f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085f8:	6a21      	ldr	r1, [r4, #32]
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b0      	blx	r6
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	d106      	bne.n	8008612 <__sflush_r+0x66>
 8008604:	6829      	ldr	r1, [r5, #0]
 8008606:	291d      	cmp	r1, #29
 8008608:	d82c      	bhi.n	8008664 <__sflush_r+0xb8>
 800860a:	4a2a      	ldr	r2, [pc, #168]	; (80086b4 <__sflush_r+0x108>)
 800860c:	40ca      	lsrs	r2, r1
 800860e:	07d6      	lsls	r6, r2, #31
 8008610:	d528      	bpl.n	8008664 <__sflush_r+0xb8>
 8008612:	2200      	movs	r2, #0
 8008614:	6062      	str	r2, [r4, #4]
 8008616:	04d9      	lsls	r1, r3, #19
 8008618:	6922      	ldr	r2, [r4, #16]
 800861a:	6022      	str	r2, [r4, #0]
 800861c:	d504      	bpl.n	8008628 <__sflush_r+0x7c>
 800861e:	1c42      	adds	r2, r0, #1
 8008620:	d101      	bne.n	8008626 <__sflush_r+0x7a>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	b903      	cbnz	r3, 8008628 <__sflush_r+0x7c>
 8008626:	6560      	str	r0, [r4, #84]	; 0x54
 8008628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800862a:	602f      	str	r7, [r5, #0]
 800862c:	2900      	cmp	r1, #0
 800862e:	d0ca      	beq.n	80085c6 <__sflush_r+0x1a>
 8008630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008634:	4299      	cmp	r1, r3
 8008636:	d002      	beq.n	800863e <__sflush_r+0x92>
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f8fd 	bl	8008838 <_free_r>
 800863e:	2000      	movs	r0, #0
 8008640:	6360      	str	r0, [r4, #52]	; 0x34
 8008642:	e7c1      	b.n	80085c8 <__sflush_r+0x1c>
 8008644:	6a21      	ldr	r1, [r4, #32]
 8008646:	2301      	movs	r3, #1
 8008648:	4628      	mov	r0, r5
 800864a:	47b0      	blx	r6
 800864c:	1c41      	adds	r1, r0, #1
 800864e:	d1c7      	bne.n	80085e0 <__sflush_r+0x34>
 8008650:	682b      	ldr	r3, [r5, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0c4      	beq.n	80085e0 <__sflush_r+0x34>
 8008656:	2b1d      	cmp	r3, #29
 8008658:	d001      	beq.n	800865e <__sflush_r+0xb2>
 800865a:	2b16      	cmp	r3, #22
 800865c:	d101      	bne.n	8008662 <__sflush_r+0xb6>
 800865e:	602f      	str	r7, [r5, #0]
 8008660:	e7b1      	b.n	80085c6 <__sflush_r+0x1a>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	e7ad      	b.n	80085c8 <__sflush_r+0x1c>
 800866c:	690f      	ldr	r7, [r1, #16]
 800866e:	2f00      	cmp	r7, #0
 8008670:	d0a9      	beq.n	80085c6 <__sflush_r+0x1a>
 8008672:	0793      	lsls	r3, r2, #30
 8008674:	680e      	ldr	r6, [r1, #0]
 8008676:	bf08      	it	eq
 8008678:	694b      	ldreq	r3, [r1, #20]
 800867a:	600f      	str	r7, [r1, #0]
 800867c:	bf18      	it	ne
 800867e:	2300      	movne	r3, #0
 8008680:	eba6 0807 	sub.w	r8, r6, r7
 8008684:	608b      	str	r3, [r1, #8]
 8008686:	f1b8 0f00 	cmp.w	r8, #0
 800868a:	dd9c      	ble.n	80085c6 <__sflush_r+0x1a>
 800868c:	6a21      	ldr	r1, [r4, #32]
 800868e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008690:	4643      	mov	r3, r8
 8008692:	463a      	mov	r2, r7
 8008694:	4628      	mov	r0, r5
 8008696:	47b0      	blx	r6
 8008698:	2800      	cmp	r0, #0
 800869a:	dc06      	bgt.n	80086aa <__sflush_r+0xfe>
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a8:	e78e      	b.n	80085c8 <__sflush_r+0x1c>
 80086aa:	4407      	add	r7, r0
 80086ac:	eba8 0800 	sub.w	r8, r8, r0
 80086b0:	e7e9      	b.n	8008686 <__sflush_r+0xda>
 80086b2:	bf00      	nop
 80086b4:	20400001 	.word	0x20400001

080086b8 <_fflush_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	690b      	ldr	r3, [r1, #16]
 80086bc:	4605      	mov	r5, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b913      	cbnz	r3, 80086c8 <_fflush_r+0x10>
 80086c2:	2500      	movs	r5, #0
 80086c4:	4628      	mov	r0, r5
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	b118      	cbz	r0, 80086d2 <_fflush_r+0x1a>
 80086ca:	6983      	ldr	r3, [r0, #24]
 80086cc:	b90b      	cbnz	r3, 80086d2 <_fflush_r+0x1a>
 80086ce:	f7ff f871 	bl	80077b4 <__sinit>
 80086d2:	4b14      	ldr	r3, [pc, #80]	; (8008724 <_fflush_r+0x6c>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d11b      	bne.n	8008710 <_fflush_r+0x58>
 80086d8:	686c      	ldr	r4, [r5, #4]
 80086da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0ef      	beq.n	80086c2 <_fflush_r+0xa>
 80086e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086e4:	07d0      	lsls	r0, r2, #31
 80086e6:	d404      	bmi.n	80086f2 <_fflush_r+0x3a>
 80086e8:	0599      	lsls	r1, r3, #22
 80086ea:	d402      	bmi.n	80086f2 <_fflush_r+0x3a>
 80086ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ee:	f7ff f8ff 	bl	80078f0 <__retarget_lock_acquire_recursive>
 80086f2:	4628      	mov	r0, r5
 80086f4:	4621      	mov	r1, r4
 80086f6:	f7ff ff59 	bl	80085ac <__sflush_r>
 80086fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086fc:	07da      	lsls	r2, r3, #31
 80086fe:	4605      	mov	r5, r0
 8008700:	d4e0      	bmi.n	80086c4 <_fflush_r+0xc>
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	059b      	lsls	r3, r3, #22
 8008706:	d4dd      	bmi.n	80086c4 <_fflush_r+0xc>
 8008708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870a:	f7ff f8f2 	bl	80078f2 <__retarget_lock_release_recursive>
 800870e:	e7d9      	b.n	80086c4 <_fflush_r+0xc>
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <_fflush_r+0x70>)
 8008712:	429c      	cmp	r4, r3
 8008714:	d101      	bne.n	800871a <_fflush_r+0x62>
 8008716:	68ac      	ldr	r4, [r5, #8]
 8008718:	e7df      	b.n	80086da <_fflush_r+0x22>
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <_fflush_r+0x74>)
 800871c:	429c      	cmp	r4, r3
 800871e:	bf08      	it	eq
 8008720:	68ec      	ldreq	r4, [r5, #12]
 8008722:	e7da      	b.n	80086da <_fflush_r+0x22>
 8008724:	0800a1a8 	.word	0x0800a1a8
 8008728:	0800a1c8 	.word	0x0800a1c8
 800872c:	0800a188 	.word	0x0800a188

08008730 <_lseek_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	; (8008750 <_lseek_r+0x20>)
 8008734:	4604      	mov	r4, r0
 8008736:	4608      	mov	r0, r1
 8008738:	4611      	mov	r1, r2
 800873a:	2200      	movs	r2, #0
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f7f8 fa28 	bl	8000b94 <_lseek>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_lseek_r+0x1e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_lseek_r+0x1e>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20003d18 	.word	0x20003d18

08008754 <__swhatbuf_r>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	460e      	mov	r6, r1
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	2900      	cmp	r1, #0
 800875e:	b096      	sub	sp, #88	; 0x58
 8008760:	4614      	mov	r4, r2
 8008762:	461d      	mov	r5, r3
 8008764:	da08      	bge.n	8008778 <__swhatbuf_r+0x24>
 8008766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	602a      	str	r2, [r5, #0]
 800876e:	061a      	lsls	r2, r3, #24
 8008770:	d410      	bmi.n	8008794 <__swhatbuf_r+0x40>
 8008772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008776:	e00e      	b.n	8008796 <__swhatbuf_r+0x42>
 8008778:	466a      	mov	r2, sp
 800877a:	f000 f8eb 	bl	8008954 <_fstat_r>
 800877e:	2800      	cmp	r0, #0
 8008780:	dbf1      	blt.n	8008766 <__swhatbuf_r+0x12>
 8008782:	9a01      	ldr	r2, [sp, #4]
 8008784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800878c:	425a      	negs	r2, r3
 800878e:	415a      	adcs	r2, r3
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	e7ee      	b.n	8008772 <__swhatbuf_r+0x1e>
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	2000      	movs	r0, #0
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	b016      	add	sp, #88	; 0x58
 800879c:	bd70      	pop	{r4, r5, r6, pc}
	...

080087a0 <__smakebuf_r>:
 80087a0:	898b      	ldrh	r3, [r1, #12]
 80087a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087a4:	079d      	lsls	r5, r3, #30
 80087a6:	4606      	mov	r6, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	d507      	bpl.n	80087bc <__smakebuf_r+0x1c>
 80087ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	2301      	movs	r3, #1
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	b002      	add	sp, #8
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	ab01      	add	r3, sp, #4
 80087be:	466a      	mov	r2, sp
 80087c0:	f7ff ffc8 	bl	8008754 <__swhatbuf_r>
 80087c4:	9900      	ldr	r1, [sp, #0]
 80087c6:	4605      	mov	r5, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff f8b3 	bl	8007934 <_malloc_r>
 80087ce:	b948      	cbnz	r0, 80087e4 <__smakebuf_r+0x44>
 80087d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d4ef      	bmi.n	80087b8 <__smakebuf_r+0x18>
 80087d8:	f023 0303 	bic.w	r3, r3, #3
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	e7e3      	b.n	80087ac <__smakebuf_r+0xc>
 80087e4:	4b0d      	ldr	r3, [pc, #52]	; (800881c <__smakebuf_r+0x7c>)
 80087e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	6020      	str	r0, [r4, #0]
 80087ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	6163      	str	r3, [r4, #20]
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	6120      	str	r0, [r4, #16]
 80087fa:	b15b      	cbz	r3, 8008814 <__smakebuf_r+0x74>
 80087fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008800:	4630      	mov	r0, r6
 8008802:	f000 f8b9 	bl	8008978 <_isatty_r>
 8008806:	b128      	cbz	r0, 8008814 <__smakebuf_r+0x74>
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	f023 0303 	bic.w	r3, r3, #3
 800880e:	f043 0301 	orr.w	r3, r3, #1
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	89a0      	ldrh	r0, [r4, #12]
 8008816:	4305      	orrs	r5, r0
 8008818:	81a5      	strh	r5, [r4, #12]
 800881a:	e7cd      	b.n	80087b8 <__smakebuf_r+0x18>
 800881c:	0800774d 	.word	0x0800774d

08008820 <__malloc_lock>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__malloc_lock+0x8>)
 8008822:	f7ff b865 	b.w	80078f0 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	20003d0c 	.word	0x20003d0c

0800882c <__malloc_unlock>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__malloc_unlock+0x8>)
 800882e:	f7ff b860 	b.w	80078f2 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	20003d0c 	.word	0x20003d0c

08008838 <_free_r>:
 8008838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800883a:	2900      	cmp	r1, #0
 800883c:	d044      	beq.n	80088c8 <_free_r+0x90>
 800883e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008842:	9001      	str	r0, [sp, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f1a1 0404 	sub.w	r4, r1, #4
 800884a:	bfb8      	it	lt
 800884c:	18e4      	addlt	r4, r4, r3
 800884e:	f7ff ffe7 	bl	8008820 <__malloc_lock>
 8008852:	4a1e      	ldr	r2, [pc, #120]	; (80088cc <_free_r+0x94>)
 8008854:	9801      	ldr	r0, [sp, #4]
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	b933      	cbnz	r3, 8008868 <_free_r+0x30>
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	6014      	str	r4, [r2, #0]
 800885e:	b003      	add	sp, #12
 8008860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008864:	f7ff bfe2 	b.w	800882c <__malloc_unlock>
 8008868:	42a3      	cmp	r3, r4
 800886a:	d908      	bls.n	800887e <_free_r+0x46>
 800886c:	6825      	ldr	r5, [r4, #0]
 800886e:	1961      	adds	r1, r4, r5
 8008870:	428b      	cmp	r3, r1
 8008872:	bf01      	itttt	eq
 8008874:	6819      	ldreq	r1, [r3, #0]
 8008876:	685b      	ldreq	r3, [r3, #4]
 8008878:	1949      	addeq	r1, r1, r5
 800887a:	6021      	streq	r1, [r4, #0]
 800887c:	e7ed      	b.n	800885a <_free_r+0x22>
 800887e:	461a      	mov	r2, r3
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	b10b      	cbz	r3, 8008888 <_free_r+0x50>
 8008884:	42a3      	cmp	r3, r4
 8008886:	d9fa      	bls.n	800887e <_free_r+0x46>
 8008888:	6811      	ldr	r1, [r2, #0]
 800888a:	1855      	adds	r5, r2, r1
 800888c:	42a5      	cmp	r5, r4
 800888e:	d10b      	bne.n	80088a8 <_free_r+0x70>
 8008890:	6824      	ldr	r4, [r4, #0]
 8008892:	4421      	add	r1, r4
 8008894:	1854      	adds	r4, r2, r1
 8008896:	42a3      	cmp	r3, r4
 8008898:	6011      	str	r1, [r2, #0]
 800889a:	d1e0      	bne.n	800885e <_free_r+0x26>
 800889c:	681c      	ldr	r4, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	6053      	str	r3, [r2, #4]
 80088a2:	4421      	add	r1, r4
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	e7da      	b.n	800885e <_free_r+0x26>
 80088a8:	d902      	bls.n	80088b0 <_free_r+0x78>
 80088aa:	230c      	movs	r3, #12
 80088ac:	6003      	str	r3, [r0, #0]
 80088ae:	e7d6      	b.n	800885e <_free_r+0x26>
 80088b0:	6825      	ldr	r5, [r4, #0]
 80088b2:	1961      	adds	r1, r4, r5
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf04      	itt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	bf04      	itt	eq
 80088c0:	1949      	addeq	r1, r1, r5
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	6054      	str	r4, [r2, #4]
 80088c6:	e7ca      	b.n	800885e <_free_r+0x26>
 80088c8:	b003      	add	sp, #12
 80088ca:	bd30      	pop	{r4, r5, pc}
 80088cc:	20003d10 	.word	0x20003d10

080088d0 <_realloc_r>:
 80088d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	4680      	mov	r8, r0
 80088d6:	4614      	mov	r4, r2
 80088d8:	460e      	mov	r6, r1
 80088da:	b921      	cbnz	r1, 80088e6 <_realloc_r+0x16>
 80088dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e0:	4611      	mov	r1, r2
 80088e2:	f7ff b827 	b.w	8007934 <_malloc_r>
 80088e6:	b92a      	cbnz	r2, 80088f4 <_realloc_r+0x24>
 80088e8:	f7ff ffa6 	bl	8008838 <_free_r>
 80088ec:	4625      	mov	r5, r4
 80088ee:	4628      	mov	r0, r5
 80088f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f4:	f000 f850 	bl	8008998 <_malloc_usable_size_r>
 80088f8:	4284      	cmp	r4, r0
 80088fa:	4607      	mov	r7, r0
 80088fc:	d802      	bhi.n	8008904 <_realloc_r+0x34>
 80088fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008902:	d812      	bhi.n	800892a <_realloc_r+0x5a>
 8008904:	4621      	mov	r1, r4
 8008906:	4640      	mov	r0, r8
 8008908:	f7ff f814 	bl	8007934 <_malloc_r>
 800890c:	4605      	mov	r5, r0
 800890e:	2800      	cmp	r0, #0
 8008910:	d0ed      	beq.n	80088ee <_realloc_r+0x1e>
 8008912:	42bc      	cmp	r4, r7
 8008914:	4622      	mov	r2, r4
 8008916:	4631      	mov	r1, r6
 8008918:	bf28      	it	cs
 800891a:	463a      	movcs	r2, r7
 800891c:	f7fe fdb4 	bl	8007488 <memcpy>
 8008920:	4631      	mov	r1, r6
 8008922:	4640      	mov	r0, r8
 8008924:	f7ff ff88 	bl	8008838 <_free_r>
 8008928:	e7e1      	b.n	80088ee <_realloc_r+0x1e>
 800892a:	4635      	mov	r5, r6
 800892c:	e7df      	b.n	80088ee <_realloc_r+0x1e>
	...

08008930 <_read_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d07      	ldr	r5, [pc, #28]	; (8008950 <_read_r+0x20>)
 8008934:	4604      	mov	r4, r0
 8008936:	4608      	mov	r0, r1
 8008938:	4611      	mov	r1, r2
 800893a:	2200      	movs	r2, #0
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	f7f8 f8c8 	bl	8000ad4 <_read>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_read_r+0x1e>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_read_r+0x1e>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20003d18 	.word	0x20003d18

08008954 <_fstat_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_fstat_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 f8fc 	bl	8000b5e <_fstat>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_fstat_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_fstat_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	20003d18 	.word	0x20003d18

08008978 <_isatty_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d06      	ldr	r5, [pc, #24]	; (8008994 <_isatty_r+0x1c>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f8 f8fb 	bl	8000b7e <_isatty>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_isatty_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_isatty_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20003d18 	.word	0x20003d18

08008998 <_malloc_usable_size_r>:
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f18      	subs	r0, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfbc      	itt	lt
 80089a2:	580b      	ldrlt	r3, [r1, r0]
 80089a4:	18c0      	addlt	r0, r0, r3
 80089a6:	4770      	bx	lr

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
