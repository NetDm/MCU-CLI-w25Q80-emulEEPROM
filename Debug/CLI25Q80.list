
CLI25Q80.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080065a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002244  20000104  080066a4  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20002348  080066a4  00022348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff0e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2a  00000000  00000000  00030042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00032c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00033a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ff1  00000000  00000000  000346f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bd4  00000000  00000000  0005c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1ce  00000000  00000000  0006f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  0015e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061d4 	.word	0x080061d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	080061d4 	.word	0x080061d4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_DMA_Init+0x38>)
 80005ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ae:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <MX_DMA_Init+0x38>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6493      	str	r3, [r2, #72]	; 0x48
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_DMA_Init+0x38>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2010      	movs	r0, #16
 80005c8:	f000 fc8d 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005cc:	2010      	movs	r0, #16
 80005ce:	f000 fca6 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <MX_GPIO_Init+0x118>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a3f      	ldr	r2, [pc, #252]	; (80006f8 <MX_GPIO_Init+0x118>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b3d      	ldr	r3, [pc, #244]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a39      	ldr	r2, [pc, #228]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <MX_GPIO_Init+0x118>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <MX_GPIO_Init+0x118>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <MX_GPIO_Init+0x118>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <MX_GPIO_Init+0x118>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_GPIO_Port, BLINK_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f001 f81b 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_FLASH_CS_GPIO_Port, SPI_FLASH_CS_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f001 f814 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_FLASH_WP_UP_GPIO_Port, SPI_FLASH_WP_UP_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2104      	movs	r1, #4
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <MX_GPIO_Init+0x11c>)
 8000676:	f001 f80f 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000680:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	481b      	ldr	r0, [pc, #108]	; (8000700 <MX_GPIO_Init+0x120>)
 8000692:	f000 fe57 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLINK_Pin;
 8000696:	2320      	movs	r3, #32
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLINK_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fe48 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_FLASH_CS_Pin;
 80006b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 fe38 	bl	8001344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_FLASH_WP_UP_Pin;
 80006d4:	2304      	movs	r3, #4
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006d8:	2311      	movs	r3, #17
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_FLASH_WP_UP_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_GPIO_Init+0x11c>)
 80006ec:	f000 fe2a 	bl	8001344 <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000c00 	.word	0x48000c00
 8000700:	48000800 	.word	0x48000800

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fa72 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f813 	bl	8000736 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff66 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000714:	f7ff ff46 	bl	80005a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000718:	f000 f986 	bl	8000a28 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800071c:	f000 f862 	bl	80007e4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  userApp();
 8000720:	f004 f85c 	bl	80047dc <userApp>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000724:	2120      	movs	r1, #32
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 ffcd 	bl	80016c8 <HAL_GPIO_TogglePin>
	  HAL_Delay(150);
 800072e:	2096      	movs	r0, #150	; 0x96
 8000730:	f000 fada 	bl	8000ce8 <HAL_Delay>
	  HAL_GPIO_TogglePin(fromMX(BLINK));
 8000734:	e7f6      	b.n	8000724 <main+0x20>

08000736 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b096      	sub	sp, #88	; 0x58
 800073a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2244      	movs	r2, #68	; 0x44
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f005 f8c3 	bl	80058d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000758:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075c:	f000 ffdc 	bl	8001718 <HAL_PWREx_ControlVoltageScaling>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000766:	f000 f837 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000788:	2307      	movs	r3, #7
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f813 	bl	80017c4 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007a4:	f000 f818 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2303      	movs	r3, #3
 80007ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80007b0:	23b0      	movs	r3, #176	; 0xb0
 80007b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fbdb 	bl	8001f7c <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007cc:	f000 f804 	bl	80007d8 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3758      	adds	r7, #88	; 0x58
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_SPI3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_SPI3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_SPI3_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI3_Init+0x74>)
 80007fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000802:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI3_Init+0x74>)
 8000806:	2202      	movs	r2, #2
 8000808:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_SPI3_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI3_Init+0x74>)
 8000812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000816:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI3_Init+0x74>)
 800081a:	2210      	movs	r2, #16
 800081c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI3_Init+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI3_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_SPI3_Init+0x74>)
 8000844:	f002 fa7a 	bl	8002d3c <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800084e:	f7ff ffc3 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000120 	.word	0x20000120
 800085c:	40003c00 	.word	0x40003c00

08000860 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_SPI_MspInit+0x7c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d128      	bne.n	80008d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 8000888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_SPI_MspInit+0x80>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c4:	2306      	movs	r3, #6
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_SPI_MspInit+0x84>)
 80008d0:	f000 fd38 	bl	8001344 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40003c00 	.word	0x40003c00
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_MspInit+0x44>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	; 0x60
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_MspInit+0x44>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x44>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x44>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f994 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <DMA1_Channel6_IRQHandler+0x10>)
 800098a:	f000 fbfb 	bl	8001184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000020c 	.word	0x2000020c

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f004 ff30 	bl	800582c <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20018000 	.word	0x20018000
 80009f8:	00002000 	.word	0x00002000
 80009fc:	20000184 	.word	0x20000184
 8000a00:	20002348 	.word	0x20002348

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f002 fd8e 	bl	800358c <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff feaf 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000188 	.word	0x20000188
 8000a84:	40004400 	.word	0x40004400

08000a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ac      	sub	sp, #176	; 0xb0
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2288      	movs	r2, #136	; 0x88
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f004 ff11 	bl	80058d0 <memset>
  if(uartHandle->Instance==USART2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a36      	ldr	r2, [pc, #216]	; (8000b8c <HAL_UART_MspInit+0x104>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d165      	bne.n	8000b84 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fc7d 	bl	80023c4 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff fe82 	bl	80007d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ade:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae0:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_UART_MspInit+0x108>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b04:	230c      	movs	r3, #12
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 fc0a 	bl	8001344 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_UART_MspInit+0x110>)
 8000b34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b6a:	f000 f9f3 	bl	8000f54 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000b74:	f7ff fe30 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b7c:	671a      	str	r2, [r3, #112]	; 0x70
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0x10c>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b84:	bf00      	nop
 8000b86:	37b0      	adds	r7, #176	; 0xb0
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	2000020c 	.word	0x2000020c
 8000b98:	4002006c 	.word	0x4002006c

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ff30 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 fe35 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fd99 	bl	8000704 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000be0:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 8000be4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000be8:	20002348 	.word	0x20002348

08000bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_2_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_Init+0x3c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_Init+0x3c>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 f962 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 f80f 	bl	8000c30 <HAL_InitTick>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	e001      	b.n	8000c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c1e:	f7ff fe63 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d023      	beq.n	8000c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_InitTick+0x70>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x6c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f96d 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10f      	bne.n	8000c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d809      	bhi.n	8000c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	f000 f937 	bl	8000ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0x74>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e007      	b.n	8000c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e004      	b.n	8000c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e001      	b.n	8000c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000254 	.word	0x20000254

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000254 	.word	0x20000254

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e098      	b.n	8001098 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	; (80010a4 <HAL_DMA_Init+0x150>)
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d80f      	bhi.n	8000f92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_DMA_Init+0x154>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_DMA_Init+0x158>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	009a      	lsls	r2, r3, #2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_DMA_Init+0x15c>)
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f90:	e00e      	b.n	8000fb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <HAL_DMA_Init+0x160>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a43      	ldr	r2, [pc, #268]	; (80010ac <HAL_DMA_Init+0x158>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	009a      	lsls	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a42      	ldr	r2, [pc, #264]	; (80010b8 <HAL_DMA_Init+0x164>)
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800100a:	d039      	beq.n	8001080 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <HAL_DMA_Init+0x15c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d11a      	bne.n	800104c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_DMA_Init+0x168>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 031c 	and.w	r3, r3, #28
 8001022:	210f      	movs	r1, #15
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	4924      	ldr	r1, [pc, #144]	; (80010bc <HAL_DMA_Init+0x168>)
 800102c:	4013      	ands	r3, r2
 800102e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_DMA_Init+0x168>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	f003 031c 	and.w	r3, r3, #28
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	491d      	ldr	r1, [pc, #116]	; (80010bc <HAL_DMA_Init+0x168>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
 800104a:	e019      	b.n	8001080 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_DMA_Init+0x16c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f003 031c 	and.w	r3, r3, #28
 8001058:	210f      	movs	r1, #15
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	4917      	ldr	r1, [pc, #92]	; (80010c0 <HAL_DMA_Init+0x16c>)
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_DMA_Init+0x16c>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6859      	ldr	r1, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f003 031c 	and.w	r3, r3, #28
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	4911      	ldr	r1, [pc, #68]	; (80010c0 <HAL_DMA_Init+0x16c>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40020407 	.word	0x40020407
 80010a8:	bffdfff8 	.word	0xbffdfff8
 80010ac:	cccccccd 	.word	0xcccccccd
 80010b0:	40020000 	.word	0x40020000
 80010b4:	bffdfbf8 	.word	0xbffdfbf8
 80010b8:	40020400 	.word	0x40020400
 80010bc:	400200a8 	.word	0x400200a8
 80010c0:	400204a8 	.word	0x400204a8

080010c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_DMA_Start_IT+0x20>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e04b      	b.n	800117c <HAL_DMA_Start_IT+0xb8>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d13a      	bne.n	800116e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2202      	movs	r2, #2
 80010fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2200      	movs	r2, #0
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 f8e0 	bl	80012e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 020e 	orr.w	r2, r2, #14
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e00f      	b.n	800115c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0204 	bic.w	r2, r2, #4
 800114a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 020a 	orr.w	r2, r2, #10
 800115a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e005      	b.n	800117a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001176:	2302      	movs	r3, #2
 8001178:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800117a:	7dfb      	ldrb	r3, [r7, #23]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 031c 	and.w	r3, r3, #28
 80011a4:	2204      	movs	r2, #4
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d026      	beq.n	80011fe <HAL_DMA_IRQHandler+0x7a>
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d021      	beq.n	80011fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d107      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 021c 	and.w	r2, r3, #28
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	2104      	movs	r1, #4
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d071      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011fc:	e06c      	b.n	80012d8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	2202      	movs	r2, #2
 8001208:	409a      	lsls	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d02e      	beq.n	8001270 <HAL_DMA_IRQHandler+0xec>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d029      	beq.n	8001270 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10b      	bne.n	8001242 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 020a 	bic.w	r2, r2, #10
 8001238:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2102      	movs	r1, #2
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2b00      	cmp	r3, #0
 8001264:	d038      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800126e:	e033      	b.n	80012d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f003 031c 	and.w	r3, r3, #28
 8001278:	2208      	movs	r2, #8
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02a      	beq.n	80012da <HAL_DMA_IRQHandler+0x156>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d025      	beq.n	80012da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 021c 	and.w	r2, r3, #28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
}
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f4:	f003 021c 	and.w	r2, r3, #28
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b10      	cmp	r3, #16
 8001312:	d108      	bne.n	8001326 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001324:	e007      	b.n	8001336 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	e17f      	b.n	8001654 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8171 	beq.w	800164e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d005      	beq.n	8001384 <HAL_GPIO_Init+0x40>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d130      	bne.n	80013e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d118      	bne.n	8001424 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013f8:	2201      	movs	r2, #1
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f003 0201 	and.w	r2, r3, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b03      	cmp	r3, #3
 800142e:	d017      	beq.n	8001460 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d123      	bne.n	80014b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	08da      	lsrs	r2, r3, #3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3208      	adds	r2, #8
 8001474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3208      	adds	r2, #8
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0203 	and.w	r2, r3, #3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80ac 	beq.w	800164e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_GPIO_Init+0x330>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	4a5e      	ldr	r2, [pc, #376]	; (8001674 <HAL_GPIO_Init+0x330>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	; 0x60
 8001502:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_GPIO_Init+0x330>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150e:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_GPIO_Init+0x334>)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x242>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_GPIO_Init+0x338>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x23e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4e      	ldr	r2, [pc, #312]	; (8001680 <HAL_GPIO_Init+0x33c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x23a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <HAL_GPIO_Init+0x340>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x236>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4c      	ldr	r2, [pc, #304]	; (8001688 <HAL_GPIO_Init+0x344>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x232>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4b      	ldr	r2, [pc, #300]	; (800168c <HAL_GPIO_Init+0x348>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x22e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_GPIO_Init+0x34c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x22a>
 800156a:	2306      	movs	r3, #6
 800156c:	e00c      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800156e:	2307      	movs	r3, #7
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001572:	2305      	movs	r3, #5
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x244>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x244>
 8001586:	2300      	movs	r3, #0
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	f002 0203 	and.w	r2, r2, #3
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001598:	4937      	ldr	r1, [pc, #220]	; (8001678 <HAL_GPIO_Init+0x334>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_GPIO_Init+0x350>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_GPIO_Init+0x350>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_GPIO_Init+0x350>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_GPIO_Init+0x350>)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_GPIO_Init+0x350>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_GPIO_Init+0x350>)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_GPIO_Init+0x350>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_GPIO_Init+0x350>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae78 	bne.w	8001354 <HAL_GPIO_Init+0x10>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	48000c00 	.word	0x48000c00
 8001688:	48001000 	.word	0x48001000
 800168c:	48001400 	.word	0x48001400
 8001690:	48001800 	.word	0x48001800
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43d9      	mvns	r1, r3
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	400b      	ands	r3, r1
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <HAL_PWREx_GetVoltageRange+0x18>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40007000 	.word	0x40007000

08001718 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001726:	d130      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001734:	d038      	beq.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800173e:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2232      	movs	r2, #50	; 0x32
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	3301      	adds	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175c:	e002      	b.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3b01      	subs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001770:	d102      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f2      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001784:	d110      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e00f      	b.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001796:	d007      	beq.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a0:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40007000 	.word	0x40007000
 80017bc:	20000000 	.word	0x20000000
 80017c0:	431bde83 	.word	0x431bde83

080017c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e3ca      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d6:	4b97      	ldr	r3, [pc, #604]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e0:	4b94      	ldr	r3, [pc, #592]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80e4 	beq.w	80019c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_RCC_OscConfig+0x4a>
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	f040 808b 	bne.w	800191c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b01      	cmp	r3, #1
 800180a:	f040 8087 	bne.w	800191c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800180e:	4b89      	ldr	r3, [pc, #548]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x62>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e3a2      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1a      	ldr	r2, [r3, #32]
 800182a:	4b82      	ldr	r3, [pc, #520]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_RCC_OscConfig+0x7c>
 8001836:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183e:	e005      	b.n	800184c <HAL_RCC_OscConfig+0x88>
 8001840:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184c:	4293      	cmp	r3, r2
 800184e:	d223      	bcs.n	8001898 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fd55 	bl	8002304 <RCC_SetFlashLatencyFromMSIRange>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e383      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001864:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a72      	ldr	r2, [pc, #456]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	496d      	ldr	r1, [pc, #436]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001882:	4b6c      	ldr	r3, [pc, #432]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	4968      	ldr	r1, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e025      	b.n	80018e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001898:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a65      	ldr	r2, [pc, #404]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4960      	ldr	r1, [pc, #384]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	495b      	ldr	r1, [pc, #364]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fd15 	bl	8002304 <RCC_SetFlashLatencyFromMSIRange>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e343      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018e4:	f000 fc4a 	bl	800217c <HAL_RCC_GetSysClockFreq>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	4950      	ldr	r1, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018f6:	5ccb      	ldrb	r3, [r1, r3]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	4a4e      	ldr	r2, [pc, #312]	; (8001a3c <HAL_RCC_OscConfig+0x278>)
 8001902:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_RCC_OscConfig+0x27c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f991 	bl	8000c30 <HAL_InitTick>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d052      	beq.n	80019be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	e327      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d032      	beq.n	800198a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001930:	f7ff f9ce 	bl	8000cd0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001938:	f7ff f9ca 	bl	8000cd0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e310      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a36      	ldr	r2, [pc, #216]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4931      	ldr	r1, [pc, #196]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001974:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	492c      	ldr	r1, [pc, #176]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e01a      	b.n	80019c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001996:	f7ff f99b 	bl	8000cd0 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199e:	f7ff f997 	bl	8000cd0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e2dd      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x1da>
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d074      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x21a>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d10e      	bne.n	80019f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d064      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d160      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e2ba      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x24a>
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e026      	b.n	8001a5c <HAL_RCC_OscConfig+0x298>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a16:	d115      	bne.n	8001a44 <HAL_RCC_OscConfig+0x280>
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a02      	ldr	r2, [pc, #8]	; (8001a34 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x298>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08006514 	.word	0x08006514
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004
 8001a44:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a9f      	ldr	r2, [pc, #636]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a9c      	ldr	r2, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f934 	bl	8000cd0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f930 	bl	8000cd0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e276      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x2a8>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f920 	bl	8000cd0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f91c 	bl	8000cd0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e262      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x2d0>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d060      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x310>
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d119      	bne.n	8001b02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d116      	bne.n	8001b02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	4b7c      	ldr	r3, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_OscConfig+0x328>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e23f      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	4973      	ldr	r1, [pc, #460]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b00:	e040      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d023      	beq.n	8001b52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0a:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f8db 	bl	8000cd0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f8d7 	bl	8000cd0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e21d      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b30:	4b65      	ldr	r3, [pc, #404]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	495f      	ldr	r1, [pc, #380]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e018      	b.n	8001b84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5c      	ldr	r2, [pc, #368]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f8b7 	bl	8000cd0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff f8b3 	bl	8000cd0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1f9      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d03c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01c      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b98:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9e:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f892 	bl	8000cd0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f88e 	bl	8000cd0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1d4      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc2:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ef      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x3ec>
 8001bd0:	e01b      	b.n	8001c0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f875 	bl	8000cd0 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bea:	f7ff f871 	bl	8000cd0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1b7      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ef      	bne.n	8001bea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80a6 	beq.w	8001d64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10d      	bne.n	8001c44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	; 0x58
 8001c34:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x508>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d118      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_OscConfig+0x508>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x508>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f838 	bl	8000cd0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c64:	f7ff f834 	bl	8000cd0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e17a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x508>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4d8>
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c9a:	e029      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d115      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x50c>
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc4:	e014      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a9b      	ldr	r2, [pc, #620]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce0:	4b98      	ldr	r3, [pc, #608]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a97      	ldr	r2, [pc, #604]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d016      	beq.n	8001d26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7fe ffea 	bl	8000cd0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ffe6 	bl	8000cd0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e12a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d16:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ed      	beq.n	8001d00 <HAL_RCC_OscConfig+0x53c>
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7fe ffd3 	bl	8000cd0 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7fe ffcf 	bl	8000cd0 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e113      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d44:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ed      	bne.n	8001d2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b7a      	ldr	r3, [pc, #488]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80fe 	beq.w	8001f6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	f040 80d0 	bne.w	8001f18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d78:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d130      	bne.n	8001dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	3b01      	subs	r3, #1
 8001d98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d127      	bne.n	8001dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d11f      	bne.n	8001dee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001db8:	2a07      	cmp	r2, #7
 8001dba:	bf14      	ite	ne
 8001dbc:	2201      	movne	r2, #1
 8001dbe:	2200      	moveq	r2, #0
 8001dc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d113      	bne.n	8001dee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d06e      	beq.n	8001ecc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d069      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ad      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e1c:	f7fe ff58 	bl	8000cd0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7fe ff54 	bl	8000cd0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e09a      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x784>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5c:	0212      	lsls	r2, r2, #8
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e64:	0852      	lsrs	r2, r2, #1
 8001e66:	3a01      	subs	r2, #1
 8001e68:	0552      	lsls	r2, r2, #21
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e70:	0852      	lsrs	r2, r2, #1
 8001e72:	3a01      	subs	r2, #1
 8001e74:	0652      	lsls	r2, r2, #25
 8001e76:	4311      	orrs	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e7c:	0912      	lsrs	r2, r2, #4
 8001e7e:	0452      	lsls	r2, r2, #17
 8001e80:	430a      	orrs	r2, r1
 8001e82:	4930      	ldr	r1, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea0:	f7fe ff16 	bl	8000cd0 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ff12 	bl	8000cd0 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e058      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec6:	e050      	b.n	8001f6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e04f      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d148      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef0:	f7fe feee 	bl	8000cd0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe feea 	bl	8000cd0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e030      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x734>
 8001f16:	e028      	b.n	8001f6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d023      	beq.n	8001f66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x780>)
 8001f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fed1 	bl	8000cd0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f30:	e00c      	b.n	8001f4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe fecd 	bl	8000cd0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d905      	bls.n	8001f4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
 8001f44:	40021000 	.word	0x40021000
 8001f48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x7b0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1ec      	bne.n	8001f32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x7b0>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4905      	ldr	r1, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0x7b0>)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x7b4>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e001      	b.n	8001f6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	feeefffc 	.word	0xfeeefffc

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0e7      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b75      	ldr	r3, [pc, #468]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4970      	ldr	r1, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0cf      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4960      	ldr	r1, [pc, #384]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d04c      	beq.n	8002094 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d121      	bne.n	8002052 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0a6      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e09a      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002032:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e08e      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e086      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4943      	ldr	r1, [pc, #268]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002064:	f7fe fe34 	bl	8000cd0 <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7fe fe30 	bl	8000cd0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e06e      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d208      	bcs.n	80020c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	492b      	ldr	r1, [pc, #172]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d210      	bcs.n	80020f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f023 0207 	bic.w	r2, r3, #7
 80020d8:	4923      	ldr	r1, [pc, #140]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_RCC_ClockConfig+0x1ec>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e036      	b.n	8002160 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4918      	ldr	r1, [pc, #96]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4910      	ldr	r1, [pc, #64]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002130:	f000 f824 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	490b      	ldr	r1, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x1f4>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1f8>)
 800214e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1fc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fd6b 	bl	8000c30 <HAL_InitTick>
 800215a:	4603      	mov	r3, r0
 800215c:	72fb      	strb	r3, [r7, #11]

  return status;
 800215e:	7afb      	ldrb	r3, [r7, #11]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
 8002170:	08006514 	.word	0x08006514
 8002174:	20000000 	.word	0x20000000
 8002178:	20000004 	.word	0x20000004

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d121      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d11e      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021b0:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021cc:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021d8:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10d      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_RCC_GetSysClockFreq+0x110>)
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e004      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002200:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_RCC_GetSysClockFreq+0x114>)
 8002202:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d134      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0xa6>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d003      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0xac>
 8002220:	e005      	b.n	800222e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_GetSysClockFreq+0x110>)
 8002224:	617b      	str	r3, [r7, #20]
      break;
 8002226:	e005      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_GetSysClockFreq+0x114>)
 800222a:	617b      	str	r3, [r7, #20]
      break;
 800222c:	e002      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	617b      	str	r3, [r7, #20]
      break;
 8002232:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	fb03 f202 	mul.w	r2, r3, r2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCC_GetSysClockFreq+0x108>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	0e5b      	lsrs	r3, r3, #25
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	3301      	adds	r3, #1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002274:	69bb      	ldr	r3, [r7, #24]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	0800652c 	.word	0x0800652c
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200

08002294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022b0:	f7ff fff0 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08006524 	.word	0x08006524

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022dc:	f7ff ffda 	bl	8002294 <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	08006524 	.word	0x08006524

08002304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800231c:	f7ff f9ee 	bl	80016fc <HAL_PWREx_GetVoltageRange>
 8002320:	6178      	str	r0, [r7, #20]
 8002322:	e014      	b.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6593      	str	r3, [r2, #88]	; 0x58
 8002330:	4b22      	ldr	r3, [pc, #136]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800233c:	f7ff f9de 	bl	80016fc <HAL_PWREx_GetVoltageRange>
 8002340:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	d10b      	bne.n	800236e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b80      	cmp	r3, #128	; 0x80
 800235a:	d919      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2ba0      	cmp	r3, #160	; 0xa0
 8002360:	d902      	bls.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002362:	2302      	movs	r3, #2
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e013      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002368:	2301      	movs	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	e010      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d902      	bls.n	800237a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002374:	2303      	movs	r3, #3
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	e00a      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b80      	cmp	r3, #128	; 0x80
 800237e:	d102      	bne.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002380:	2302      	movs	r3, #2
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e004      	b.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d101      	bne.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 0207 	bic.w	r2, r3, #7
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023cc:	2300      	movs	r3, #0
 80023ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d0:	2300      	movs	r3, #0
 80023d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d041      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023e8:	d02a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023ee:	d824      	bhi.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023f4:	d008      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023fa:	d81e      	bhi.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002404:	d010      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002406:	e018      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002408:	4b86      	ldr	r3, [pc, #536]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a85      	ldr	r2, [pc, #532]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002414:	e015      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fabb 	bl	8002998 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002426:	e00c      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3320      	adds	r3, #32
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fba6 	bl	8002b80 <RCCEx_PLLSAI2_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002438:	e003      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	74fb      	strb	r3, [r7, #19]
      break;
 800243e:	e000      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002448:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002456:	4973      	ldr	r1, [pc, #460]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800245e:	e001      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d041      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002474:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002478:	d02a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800247a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800247e:	d824      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800248a:	d81e      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d010      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002496:	e018      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002498:	4b62      	ldr	r3, [pc, #392]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a4:	e015      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fa73 	bl	8002998 <RCCEx_PLLSAI1_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b6:	e00c      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3320      	adds	r3, #32
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fb5e 	bl	8002b80 <RCCEx_PLLSAI2_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c8:	e003      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	74fb      	strb	r3, [r7, #19]
      break;
 80024ce:	e000      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024d8:	4b52      	ldr	r3, [pc, #328]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e6:	494f      	ldr	r1, [pc, #316]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ee:	e001      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a0 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002516:	2300      	movs	r3, #0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
 8002528:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002534:	2301      	movs	r3, #1
 8002536:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800253e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002544:	f7fe fbc4 	bl	8000cd0 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800254a:	e009      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254c:	f7fe fbc0 	bl	8000cd0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	74fb      	strb	r3, [r7, #19]
        break;
 800255e:	e005      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ef      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d15c      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	d019      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fb7f 	bl	8000cd0 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d4:	e00b      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fb7b 	bl	8000cd0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d902      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	74fb      	strb	r3, [r7, #19]
            break;
 80025ec:	e006      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ec      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002612:	4904      	ldr	r1, [pc, #16]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800261a:	e009      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
 8002620:	e006      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002630:	7c7b      	ldrb	r3, [r7, #17]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a9d      	ldr	r2, [pc, #628]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264e:	4b98      	ldr	r3, [pc, #608]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 0203 	bic.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265c:	4994      	ldr	r1, [pc, #592]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002670:	4b8f      	ldr	r3, [pc, #572]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f023 020c 	bic.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	498c      	ldr	r1, [pc, #560]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002692:	4b87      	ldr	r3, [pc, #540]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4983      	ldr	r1, [pc, #524]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026b4:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	497b      	ldr	r1, [pc, #492]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e4:	4972      	ldr	r1, [pc, #456]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	496a      	ldr	r1, [pc, #424]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	4961      	ldr	r1, [pc, #388]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800273c:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	4959      	ldr	r1, [pc, #356]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	4950      	ldr	r1, [pc, #320]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	4948      	ldr	r1, [pc, #288]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a2:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	493f      	ldr	r1, [pc, #252]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d028      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d2:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e4:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ee:	60d3      	str	r3, [r2, #12]
 80027f0:	e011      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fa:	d10c      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f8c8 	bl	8002998 <RCCEx_PLLSAI1_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d028      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	491f      	ldr	r1, [pc, #124]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002840:	d106      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284c:	60d3      	str	r3, [r2, #12]
 800284e:	e011      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002858:	d10c      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2101      	movs	r1, #1
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f899 	bl	8002998 <RCCEx_PLLSAI1_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d02b      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288e:	4908      	ldr	r1, [pc, #32]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289e:	d109      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a02      	ldr	r2, [pc, #8]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
 80028ac:	e014      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f867 	bl	8002998 <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02f      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f2:	4928      	ldr	r1, [pc, #160]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002902:	d10d      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	2102      	movs	r1, #2
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f844 	bl	8002998 <RCCEx_PLLSAI1_Config>
 8002910:	4603      	mov	r3, r0
 8002912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d014      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	74bb      	strb	r3, [r7, #18]
 800291e:	e011      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002928:	d10c      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3320      	adds	r3, #32
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f925 	bl	8002b80 <RCCEx_PLLSAI2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295e:	490d      	ldr	r1, [pc, #52]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002982:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800298a:	7cbb      	ldrb	r3, [r7, #18]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000

08002998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a6:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d018      	beq.n	80029e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029b2:	4b72      	ldr	r3, [pc, #456]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d10d      	bne.n	80029de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
       ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ca:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
       ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d047      	beq.n	8002a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e044      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d018      	beq.n	8002a1e <RCCEx_PLLSAI1_Config+0x86>
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d825      	bhi.n	8002a3c <RCCEx_PLLSAI1_Config+0xa4>
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x62>
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d009      	beq.n	8002a0c <RCCEx_PLLSAI1_Config+0x74>
 80029f8:	e020      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029fa:	4b60      	ldr	r3, [pc, #384]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0a:	e01a      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a0c:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1c:	e013      	b.n	8002a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1e:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a3a:	e006      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e004      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	430b      	orrs	r3, r1
 8002a68:	4944      	ldr	r1, [pc, #272]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d17d      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a74:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a40      	ldr	r2, [pc, #256]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a80:	f7fe f926 	bl	8000cd0 <HAL_GetTick>
 8002a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a86:	e009      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a88:	f7fe f922 	bl	8000cd0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d902      	bls.n	8002a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	73fb      	strb	r3, [r7, #15]
        break;
 8002a9a:	e005      	b.n	8002aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a9c:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ef      	bne.n	8002a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d160      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d111      	bne.n	8002ad8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab4:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	0211      	lsls	r1, r2, #8
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68d2      	ldr	r2, [r2, #12]
 8002aca:	0912      	lsrs	r2, r2, #4
 8002acc:	0452      	lsls	r2, r2, #17
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	492a      	ldr	r1, [pc, #168]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	610b      	str	r3, [r1, #16]
 8002ad6:	e027      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d112      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ae6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	0211      	lsls	r1, r2, #8
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6912      	ldr	r2, [r2, #16]
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0552      	lsls	r2, r2, #21
 8002afa:	430a      	orrs	r2, r1
 8002afc:	491f      	ldr	r1, [pc, #124]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	610b      	str	r3, [r1, #16]
 8002b02:	e011      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6892      	ldr	r2, [r2, #8]
 8002b14:	0211      	lsls	r1, r2, #8
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6952      	ldr	r2, [r2, #20]
 8002b1a:	0852      	lsrs	r2, r2, #1
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0652      	lsls	r2, r2, #25
 8002b20:	430a      	orrs	r2, r1
 8002b22:	4916      	ldr	r1, [pc, #88]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe f8cc 	bl	8000cd0 <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b3a:	e009      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3c:	f7fe f8c8 	bl	8000cd0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4e:	e005      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ef      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	4904      	ldr	r1, [pc, #16]	; (8002b7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000

08002b80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8e:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b9a:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d10d      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
       ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bb2:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d047      	beq.n	8002c56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e044      	b.n	8002c56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d018      	beq.n	8002c06 <RCCEx_PLLSAI2_Config+0x86>
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d825      	bhi.n	8002c24 <RCCEx_PLLSAI2_Config+0xa4>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d002      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x62>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d009      	beq.n	8002bf4 <RCCEx_PLLSAI2_Config+0x74>
 8002be0:	e020      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002be2:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11d      	bne.n	8002c2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf2:	e01a      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e013      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c22:	e006      	b.n	8002c32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e004      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d167      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a35      	ldr	r2, [pc, #212]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7fe f832 	bl	8000cd0 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c70:	f7fe f82e 	bl	8000cd0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
        break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ef      	bne.n	8002c70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d14a      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d111      	bne.n	8002cc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6892      	ldr	r2, [r2, #8]
 8002cac:	0211      	lsls	r1, r2, #8
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	0912      	lsrs	r2, r2, #4
 8002cb4:	0452      	lsls	r2, r2, #17
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	491f      	ldr	r1, [pc, #124]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	614b      	str	r3, [r1, #20]
 8002cbe:	e011      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6912      	ldr	r2, [r2, #16]
 8002cd6:	0852      	lsrs	r2, r2, #1
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0652      	lsls	r2, r2, #25
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4916      	ldr	r1, [pc, #88]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ce4:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fd ffee 	bl	8000cd0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cf6:	e009      	b.n	8002d0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cf8:	f7fd ffea 	bl	8000cd0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	73fb      	strb	r3, [r7, #15]
          break;
 8002d0a:	e005      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4904      	ldr	r1, [pc, #16]	; (8002d38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e095      	b.n	8002e7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5e:	d009      	beq.n	8002d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7fd fd66 	bl	8000860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002daa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db4:	d902      	bls.n	8002dbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e002      	b.n	8002dc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002dca:	d007      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	ea42 0103 	orr.w	r1, r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	f003 0204 	and.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	; 0x28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_SPI_TransmitReceive+0x26>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e1fb      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x41e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb0:	f7fd ff0e 	bl	8000cd0 <HAL_GetTick>
 8002eb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ebc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ecc:	7efb      	ldrb	r3, [r7, #27]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x6e>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed8:	d106      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x66>
 8002ee2:	7efb      	ldrb	r3, [r7, #27]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d003      	beq.n	8002ef0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002eee:	e1cd      	b.n	800328c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x80>
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f08:	e1c0      	b.n	800328c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2205      	movs	r2, #5
 8002f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	887a      	ldrh	r2, [r7, #2]
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f60:	d802      	bhi.n	8002f68 <HAL_SPI_TransmitReceive+0xe6>
 8002f62:	8a3b      	ldrh	r3, [r7, #16]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d908      	bls.n	8002f7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	e007      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb0:	d97c      	bls.n	80030ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_TransmitReceive+0x13e>
 8002fba:	8a7b      	ldrh	r3, [r7, #18]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d169      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe4:	e056      	b.n	8003094 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d11b      	bne.n	800302c <HAL_SPI_TransmitReceive+0x1aa>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_SPI_TransmitReceive+0x1aa>
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d113      	bne.n	800302c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d11c      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x1f2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	b292      	uxth	r2, r2
 8003052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003074:	f7fd fe2c 	bl	8000cd0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	429a      	cmp	r2, r3
 8003082:	d807      	bhi.n	8003094 <HAL_SPI_TransmitReceive+0x212>
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800308a:	d003      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003092:	e0fb      	b.n	800328c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1a3      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x164>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d19d      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x164>
 80030aa:	e0df      	b.n	800326c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x23a>
 80030b4:	8a7b      	ldrh	r3, [r7, #18]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 80cb 	bne.w	8003252 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d912      	bls.n	80030ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	881a      	ldrh	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	1c9a      	adds	r2, r3, #2
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b02      	subs	r3, #2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030ea:	e0b2      	b.n	8003252 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003112:	e09e      	b.n	8003252 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d134      	bne.n	800318c <HAL_SPI_TransmitReceive+0x30a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02f      	beq.n	800318c <HAL_SPI_TransmitReceive+0x30a>
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	2b01      	cmp	r3, #1
 8003130:	d12c      	bne.n	800318c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d912      	bls.n	8003162 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b02      	subs	r3, #2
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003160:	e012      	b.n	8003188 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b01      	cmp	r3, #1
 8003198:	d148      	bne.n	800322c <HAL_SPI_TransmitReceive+0x3aa>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d042      	beq.n	800322c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d923      	bls.n	80031fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	b292      	uxth	r2, r2
 80031be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	1c9a      	adds	r2, r3, #2
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b02      	subs	r3, #2
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d81f      	bhi.n	8003228 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	e016      	b.n	8003228 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f103 020c 	add.w	r2, r3, #12
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003228:	2301      	movs	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800322c:	f7fd fd50 	bl	8000cd0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003238:	429a      	cmp	r2, r3
 800323a:	d803      	bhi.n	8003244 <HAL_SPI_TransmitReceive+0x3c2>
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003242:	d102      	bne.n	800324a <HAL_SPI_TransmitReceive+0x3c8>
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003250:	e01c      	b.n	800328c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f af5b 	bne.w	8003114 <HAL_SPI_TransmitReceive+0x292>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f af54 	bne.w	8003114 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f945 	bl	8003500 <SPI_EndRxTxTransaction>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	661a      	str	r2, [r3, #96]	; 0x60
 8003288:	e000      	b.n	800328c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800328a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800329c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032b6:	b2db      	uxtb	r3, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d4:	f7fd fcfc 	bl	8000cd0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032e4:	f7fd fcf4 	bl	8000cd0 <HAL_GetTick>
 80032e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	0d1b      	lsrs	r3, r3, #20
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032fa:	e054      	b.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003302:	d050      	beq.n	80033a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003304:	f7fd fce4 	bl	8000cd0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d13d      	bne.n	8003396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003332:	d111      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333c:	d004      	beq.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003346:	d107      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003360:	d10f      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e017      	b.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d19b      	bne.n	80032fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033e6:	f7fd fc73 	bl	8000cd0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033f6:	f7fd fc6b 	bl	8000cd0 <HAL_GetTick>
 80033fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003404:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	00da      	lsls	r2, r3, #3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	0d1b      	lsrs	r3, r3, #20
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800341c:	e060      	b.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003424:	d107      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003434:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343c:	d050      	beq.n	80034e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800343e:	f7fd fc47 	bl	8000cd0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	d902      	bls.n	8003454 <SPI_WaitFifoStateUntilTimeout+0x80>
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	d13d      	bne.n	80034d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003462:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800346c:	d111      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003476:	d004      	beq.n	8003482 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003480:	d107      	bne.n	8003492 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	d10f      	bne.n	80034bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e010      	b.n	80034f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3b01      	subs	r3, #1
 80034de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d196      	bne.n	800341e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000000 	.word	0x20000000

08003500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff ff5b 	bl	80033d4 <SPI_WaitFifoStateUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	f043 0220 	orr.w	r2, r3, #32
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e027      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fec0 	bl	80032c4 <SPI_WaitFlagStateUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354e:	f043 0220 	orr.w	r2, r3, #32
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e014      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff34 	bl	80033d4 <SPI_WaitFifoStateUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003576:	f043 0220 	orr.w	r2, r3, #32
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e000      	b.n	8003584 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e040      	b.n	8003620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fa6a 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f940 	bl	8003850 <UART_SetConfig>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e022      	b.n	8003620 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fbec 	bl	8003dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fc73 	bl	8003f04 <UART_CheckIdleState>
 800361e:	4603      	mov	r3, r0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363c:	2b20      	cmp	r3, #32
 800363e:	f040 8082 	bne.w	8003746 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit+0x26>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07a      	b.n	8003748 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x38>
 800365c:	2302      	movs	r3, #2
 800365e:	e073      	b.n	8003748 <HAL_UART_Transmit+0x120>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2221      	movs	r2, #33	; 0x21
 8003674:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003676:	f7fd fb2b 	bl	8000cd0 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003694:	d108      	bne.n	80036a8 <HAL_UART_Transmit+0x80>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e003      	b.n	80036b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80036b8:	e02d      	b.n	8003716 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fc66 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e039      	b.n	8003748 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e6:	b292      	uxth	r2, r2
 80036e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3302      	adds	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e008      	b.n	8003704 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b292      	uxth	r2, r2
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1cb      	bne.n	80036ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fc32 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e005      	b.n	8003748 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003762:	2b20      	cmp	r3, #32
 8003764:	d142      	bne.n	80037ec <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_Receive_DMA+0x22>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e03b      	b.n	80037ee <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UART_Receive_DMA+0x34>
 8003780:	2302      	movs	r3, #2
 8003782:	e034      	b.n	80037ee <HAL_UART_Receive_DMA+0x9e>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_UART_Receive_DMA+0xa8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d01f      	beq.n	80037dc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	69f9      	ldr	r1, [r7, #28]
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e6      	bne.n	80037aa <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	461a      	mov	r2, r3
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fc9c 	bl	8004120 <UART_Start_Receive_DMA>
 80037e8:	4603      	mov	r3, r0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3728      	adds	r7, #40	; 0x28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40008000 	.word	0x40008000

080037fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b08a      	sub	sp, #40	; 0x28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	431a      	orrs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4313      	orrs	r3, r2
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4ba4      	ldr	r3, [pc, #656]	; (8003b10 <UART_SetConfig+0x2c0>)
 8003880:	4013      	ands	r3, r2
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003888:	430b      	orrs	r3, r1
 800388a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a99      	ldr	r2, [pc, #612]	; (8003b14 <UART_SetConfig+0x2c4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b8:	4313      	orrs	r3, r2
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <UART_SetConfig+0x2c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d126      	bne.n	8003928 <UART_SetConfig+0xd8>
 80038da:	4b90      	ldr	r3, [pc, #576]	; (8003b1c <UART_SetConfig+0x2cc>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d81b      	bhi.n	8003920 <UART_SetConfig+0xd0>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0xa0>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003911 	.word	0x08003911
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003919 	.word	0x08003919
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e116      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003908:	2302      	movs	r3, #2
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e112      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003910:	2304      	movs	r3, #4
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e10e      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003918:	2308      	movs	r3, #8
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e10a      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003920:	2310      	movs	r3, #16
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e106      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a7c      	ldr	r2, [pc, #496]	; (8003b20 <UART_SetConfig+0x2d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d138      	bne.n	80039a4 <UART_SetConfig+0x154>
 8003932:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <UART_SetConfig+0x2cc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d82d      	bhi.n	800399c <UART_SetConfig+0x14c>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0xf8>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800397d 	.word	0x0800397d
 800394c:	0800399d 	.word	0x0800399d
 8003950:	0800399d 	.word	0x0800399d
 8003954:	0800399d 	.word	0x0800399d
 8003958:	0800398d 	.word	0x0800398d
 800395c:	0800399d 	.word	0x0800399d
 8003960:	0800399d 	.word	0x0800399d
 8003964:	0800399d 	.word	0x0800399d
 8003968:	08003985 	.word	0x08003985
 800396c:	0800399d 	.word	0x0800399d
 8003970:	0800399d 	.word	0x0800399d
 8003974:	0800399d 	.word	0x0800399d
 8003978:	08003995 	.word	0x08003995
 800397c:	2300      	movs	r3, #0
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e0d8      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003984:	2302      	movs	r3, #2
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e0d4      	b.n	8003b36 <UART_SetConfig+0x2e6>
 800398c:	2304      	movs	r3, #4
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e0d0      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003994:	2308      	movs	r3, #8
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e0cc      	b.n	8003b36 <UART_SetConfig+0x2e6>
 800399c:	2310      	movs	r3, #16
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e0c8      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5e      	ldr	r2, [pc, #376]	; (8003b24 <UART_SetConfig+0x2d4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d125      	bne.n	80039fa <UART_SetConfig+0x1aa>
 80039ae:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <UART_SetConfig+0x2cc>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d016      	beq.n	80039ea <UART_SetConfig+0x19a>
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d818      	bhi.n	80039f2 <UART_SetConfig+0x1a2>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d00a      	beq.n	80039da <UART_SetConfig+0x18a>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d814      	bhi.n	80039f2 <UART_SetConfig+0x1a2>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <UART_SetConfig+0x182>
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d008      	beq.n	80039e2 <UART_SetConfig+0x192>
 80039d0:	e00f      	b.n	80039f2 <UART_SetConfig+0x1a2>
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d8:	e0ad      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039da:	2302      	movs	r3, #2
 80039dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e0:	e0a9      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039e2:	2304      	movs	r3, #4
 80039e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e8:	e0a5      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039ea:	2308      	movs	r3, #8
 80039ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f0:	e0a1      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039f2:	2310      	movs	r3, #16
 80039f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f8:	e09d      	b.n	8003b36 <UART_SetConfig+0x2e6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <UART_SetConfig+0x2d8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d125      	bne.n	8003a50 <UART_SetConfig+0x200>
 8003a04:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <UART_SetConfig+0x2cc>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a10:	d016      	beq.n	8003a40 <UART_SetConfig+0x1f0>
 8003a12:	2bc0      	cmp	r3, #192	; 0xc0
 8003a14:	d818      	bhi.n	8003a48 <UART_SetConfig+0x1f8>
 8003a16:	2b80      	cmp	r3, #128	; 0x80
 8003a18:	d00a      	beq.n	8003a30 <UART_SetConfig+0x1e0>
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d814      	bhi.n	8003a48 <UART_SetConfig+0x1f8>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <UART_SetConfig+0x1d8>
 8003a22:	2b40      	cmp	r3, #64	; 0x40
 8003a24:	d008      	beq.n	8003a38 <UART_SetConfig+0x1e8>
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x1f8>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e082      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a30:	2302      	movs	r3, #2
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e07e      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e07a      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a40:	2308      	movs	r3, #8
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e076      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4e:	e072      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <UART_SetConfig+0x2dc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12a      	bne.n	8003ab0 <UART_SetConfig+0x260>
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <UART_SetConfig+0x2cc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a68:	d01a      	beq.n	8003aa0 <UART_SetConfig+0x250>
 8003a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6e:	d81b      	bhi.n	8003aa8 <UART_SetConfig+0x258>
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d00c      	beq.n	8003a90 <UART_SetConfig+0x240>
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7a:	d815      	bhi.n	8003aa8 <UART_SetConfig+0x258>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <UART_SetConfig+0x238>
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a84:	d008      	beq.n	8003a98 <UART_SetConfig+0x248>
 8003a86:	e00f      	b.n	8003aa8 <UART_SetConfig+0x258>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e052      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a90:	2302      	movs	r3, #2
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e04e      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e04a      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003aa0:	2308      	movs	r3, #8
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e046      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aae:	e042      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <UART_SetConfig+0x2c4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d13a      	bne.n	8003b30 <UART_SetConfig+0x2e0>
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <UART_SetConfig+0x2cc>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac8:	d01a      	beq.n	8003b00 <UART_SetConfig+0x2b0>
 8003aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ace:	d81b      	bhi.n	8003b08 <UART_SetConfig+0x2b8>
 8003ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad4:	d00c      	beq.n	8003af0 <UART_SetConfig+0x2a0>
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d815      	bhi.n	8003b08 <UART_SetConfig+0x2b8>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <UART_SetConfig+0x298>
 8003ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae4:	d008      	beq.n	8003af8 <UART_SetConfig+0x2a8>
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x2b8>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e022      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e01e      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e01a      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e016      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e012      	b.n	8003b36 <UART_SetConfig+0x2e6>
 8003b10:	efff69f3 	.word	0xefff69f3
 8003b14:	40008000 	.word	0x40008000
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40004400 	.word	0x40004400
 8003b24:	40004800 	.word	0x40004800
 8003b28:	40004c00 	.word	0x40004c00
 8003b2c:	40005000 	.word	0x40005000
 8003b30:	2310      	movs	r3, #16
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a9f      	ldr	r2, [pc, #636]	; (8003db8 <UART_SetConfig+0x568>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d17a      	bne.n	8003c36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d824      	bhi.n	8003b92 <UART_SetConfig+0x342>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x300>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b93 	.word	0x08003b93
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b93 	.word	0x08003b93
 8003b60:	08003b83 	.word	0x08003b83
 8003b64:	08003b93 	.word	0x08003b93
 8003b68:	08003b93 	.word	0x08003b93
 8003b6c:	08003b93 	.word	0x08003b93
 8003b70:	08003b8b 	.word	0x08003b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fb9a 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8003b78:	61f8      	str	r0, [r7, #28]
        break;
 8003b7a:	e010      	b.n	8003b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b7c:	4b8f      	ldr	r3, [pc, #572]	; (8003dbc <UART_SetConfig+0x56c>)
 8003b7e:	61fb      	str	r3, [r7, #28]
        break;
 8003b80:	e00d      	b.n	8003b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b82:	f7fe fafb 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003b86:	61f8      	str	r0, [r7, #28]
        break;
 8003b88:	e009      	b.n	8003b9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b8e:	61fb      	str	r3, [r7, #28]
        break;
 8003b90:	e005      	b.n	8003b9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80fb 	beq.w	8003d9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d305      	bcc.n	8003bc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d903      	bls.n	8003bca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bc8:	e0e8      	b.n	8003d9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	461c      	mov	r4, r3
 8003bd0:	4615      	mov	r5, r2
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	022b      	lsls	r3, r5, #8
 8003bdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003be0:	0222      	lsls	r2, r4, #8
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	6849      	ldr	r1, [r1, #4]
 8003be6:	0849      	lsrs	r1, r1, #1
 8003be8:	2000      	movs	r0, #0
 8003bea:	4688      	mov	r8, r1
 8003bec:	4681      	mov	r9, r0
 8003bee:	eb12 0a08 	adds.w	sl, r2, r8
 8003bf2:	eb43 0b09 	adc.w	fp, r3, r9
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c04:	4650      	mov	r0, sl
 8003c06:	4659      	mov	r1, fp
 8003c08:	f7fc fb4a 	bl	80002a0 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4613      	mov	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c1a:	d308      	bcc.n	8003c2e <UART_SetConfig+0x3de>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c22:	d204      	bcs.n	8003c2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	e0b6      	b.n	8003d9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c34:	e0b2      	b.n	8003d9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3e:	d15e      	bne.n	8003cfe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d828      	bhi.n	8003c9a <UART_SetConfig+0x44a>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x400>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c9b 	.word	0x08003c9b
 8003c60:	08003c8b 	.word	0x08003c8b
 8003c64:	08003c9b 	.word	0x08003c9b
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003c9b 	.word	0x08003c9b
 8003c70:	08003c93 	.word	0x08003c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7fe fb1a 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8003c78:	61f8      	str	r0, [r7, #28]
        break;
 8003c7a:	e014      	b.n	8003ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c7c:	f7fe fb2c 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8003c80:	61f8      	str	r0, [r7, #28]
        break;
 8003c82:	e010      	b.n	8003ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c84:	4b4d      	ldr	r3, [pc, #308]	; (8003dbc <UART_SetConfig+0x56c>)
 8003c86:	61fb      	str	r3, [r7, #28]
        break;
 8003c88:	e00d      	b.n	8003ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8a:	f7fe fa77 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003c8e:	61f8      	str	r0, [r7, #28]
        break;
 8003c90:	e009      	b.n	8003ca6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e005      	b.n	8003ca6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d077      	beq.n	8003d9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005a      	lsls	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b0f      	cmp	r3, #15
 8003cc6:	d916      	bls.n	8003cf6 <UART_SetConfig+0x4a6>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d212      	bcs.n	8003cf6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f023 030f 	bic.w	r3, r3, #15
 8003cd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	8afa      	ldrh	r2, [r7, #22]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e052      	b.n	8003d9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cfc:	e04e      	b.n	8003d9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d827      	bhi.n	8003d56 <UART_SetConfig+0x506>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <UART_SetConfig+0x4bc>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d41 	.word	0x08003d41
 8003d18:	08003d57 	.word	0x08003d57
 8003d1c:	08003d47 	.word	0x08003d47
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003d57 	.word	0x08003d57
 8003d2c:	08003d4f 	.word	0x08003d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7fe fabc 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e014      	b.n	8003d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7fe face 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8003d3c:	61f8      	str	r0, [r7, #28]
        break;
 8003d3e:	e010      	b.n	8003d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d40:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <UART_SetConfig+0x56c>)
 8003d42:	61fb      	str	r3, [r7, #28]
        break;
 8003d44:	e00d      	b.n	8003d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d46:	f7fe fa19 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003d4a:	61f8      	str	r0, [r7, #28]
        break;
 8003d4c:	e009      	b.n	8003d62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d52:	61fb      	str	r3, [r7, #28]
        break;
 8003d54:	e005      	b.n	8003d62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d60:	bf00      	nop
    }

    if (pclk != 0U)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d019      	beq.n	8003d9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	085a      	lsrs	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d909      	bls.n	8003d96 <UART_SetConfig+0x546>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d205      	bcs.n	8003d96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	e002      	b.n	8003d9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003da8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	40008000 	.word	0x40008000
 8003dbc:	00f42400 	.word	0x00f42400

08003dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d10a      	bne.n	8003ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f14:	f7fc fedc 	bl	8000cd0 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10e      	bne.n	8003f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f82d 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e023      	b.n	8003f8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d10e      	bne.n	8003f72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f817 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00d      	b.n	8003f8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b09c      	sub	sp, #112	; 0x70
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa6:	e0a5      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fae:	f000 80a1 	beq.w	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fc fe8d 	bl	8000cd0 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13e      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	663b      	str	r3, [r7, #96]	; 0x60
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800401a:	64ba      	str	r2, [r7, #72]	; 0x48
 800401c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e067      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d04f      	beq.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d147      	bne.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
 800408e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	613b      	str	r3, [r7, #16]
   return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040c0:	623a      	str	r2, [r7, #32]
 80040c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69f9      	ldr	r1, [r7, #28]
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e010      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	429a      	cmp	r2, r3
 8004110:	f43f af4a 	beq.w	8003fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3770      	adds	r7, #112	; 0x70
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b096      	sub	sp, #88	; 0x58
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2222      	movs	r2, #34	; 0x22
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02b      	beq.n	80041aa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <UART_Start_Receive_DMA+0x140>)
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <UART_Start_Receive_DMA+0x144>)
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <UART_Start_Receive_DMA+0x148>)
 8004168:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	2200      	movs	r2, #0
 8004170:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	4619      	mov	r1, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	461a      	mov	r2, r3
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f7fc ff9d 	bl	80010c4 <HAL_DMA_Start_IT>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2210      	movs	r2, #16
 8004194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e055      	b.n	8004256 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004240:	623a      	str	r2, [r7, #32]
 8004242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	61bb      	str	r3, [r7, #24]
   return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3758      	adds	r7, #88	; 0x58
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	0800437f 	.word	0x0800437f
 8004264:	080044a3 	.word	0x080044a3
 8004268:	080044db 	.word	0x080044db

0800426c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80042ac:	bf00      	nop
 80042ae:	3724      	adds	r7, #36	; 0x24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b095      	sub	sp, #84	; 0x54
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
 80042e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	61fb      	str	r3, [r7, #28]
   return(result);
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	64bb      	str	r3, [r7, #72]	; 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	2b01      	cmp	r3, #1
 800432c:	d118      	bne.n	8004360 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60bb      	str	r3, [r7, #8]
   return(result);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004372:	bf00      	nop
 8004374:	3754      	adds	r7, #84	; 0x54
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b09c      	sub	sp, #112	; 0x70
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d170      	bne.n	800447c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800439a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800439c:	2200      	movs	r2, #0
 800439e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e6      	bne.n	80043a2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	667b      	str	r3, [r7, #100]	; 0x64
 80043ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043f4:	647a      	str	r2, [r7, #68]	; 0x44
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	623b      	str	r3, [r7, #32]
   return(result);
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441e:	663b      	str	r3, [r7, #96]	; 0x60
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004428:	633a      	str	r2, [r7, #48]	; 0x30
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	2b01      	cmp	r3, #1
 8004448:	d118      	bne.n	800447c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	60fb      	str	r3, [r7, #12]
   return(result);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0310 	bic.w	r3, r3, #16
 800445e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e6      	bne.n	800444a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004486:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800448a:	4619      	mov	r1, r3
 800448c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800448e:	f7ff f9d3 	bl	8003838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004492:	e002      	b.n	800449a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004494:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004496:	f7ff f9b1 	bl	80037fc <HAL_UART_RxCpltCallback>
}
 800449a:	bf00      	nop
 800449c:	3770      	adds	r7, #112	; 0x70
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d109      	bne.n	80044cc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff f9b7 	bl	8003838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044ca:	e002      	b.n	80044d2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff f99f 	bl	8003810 <HAL_UART_RxHalfCpltCallback>
}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d109      	bne.n	8004516 <UART_DMAError+0x3c>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b21      	cmp	r3, #33	; 0x21
 8004506:	d106      	bne.n	8004516 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7ff feab 	bl	800426c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d109      	bne.n	8004538 <UART_DMAError+0x5e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b22      	cmp	r3, #34	; 0x22
 8004528:	d106      	bne.n	8004538 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2200      	movs	r2, #0
 800452e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff fec0 	bl	80042b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004548:	6978      	ldr	r0, [r7, #20]
 800454a:	f7ff f96b 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <help>:
void respondERROR(){
	printCli(szERROR);
}
*/

void help(int argc, const char * const * argv){
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	printCli ("microCLI library based shell v 1.1\n\r\n");
 8004562:	4819      	ldr	r0, [pc, #100]	; (80045c8 <help+0x70>)
 8004564:	f001 f8a6 	bl	80056b4 <printCli>
	int i=0;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 800456c:	e01c      	b.n	80045a8 <help+0x50>
		printCli("[");
 800456e:	4817      	ldr	r0, [pc, #92]	; (80045cc <help+0x74>)
 8004570:	f001 f8a0 	bl	80056b4 <printCli>
		printCli(list_cmds[i].name);
 8004574:	4a16      	ldr	r2, [pc, #88]	; (80045d0 <help+0x78>)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f898 	bl	80056b4 <printCli>
		printCli("] \t ");
 8004584:	4813      	ldr	r0, [pc, #76]	; (80045d4 <help+0x7c>)
 8004586:	f001 f895 	bl	80056b4 <printCli>
		printCli(list_cmds[i].descriptions);
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <help+0x78>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4413      	add	r3, r2
 8004592:	3308      	adds	r3, #8
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f001 f88c 	bl	80056b4 <printCli>
		printCli("\n\r");
 800459c:	480e      	ldr	r0, [pc, #56]	; (80045d8 <help+0x80>)
 800459e:	f001 f889 	bl	80056b4 <printCli>
		i++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <help+0x78>)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1da      	bne.n	800456e <help+0x16>
	}
	printCli ("When you enter a command without a parameter, "
 80045b8:	4808      	ldr	r0, [pc, #32]	; (80045dc <help+0x84>)
 80045ba:	f001 f87b 	bl	80056b4 <printCli>
			"the current set value is displayed.");
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08006338 	.word	0x08006338
 80045cc:	08006360 	.word	0x08006360
 80045d0:	2000000c 	.word	0x2000000c
 80045d4:	08006364 	.word	0x08006364
 80045d8:	0800636c 	.word	0x0800636c
 80045dc:	08006370 	.word	0x08006370

080045e0 <clear>:
void clear(int argc, const char * const * argv){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
	printCli ("\033[2J");    // ESC seq for clear entire screen
 80045ea:	4805      	ldr	r0, [pc, #20]	; (8004600 <clear+0x20>)
 80045ec:	f001 f862 	bl	80056b4 <printCli>
	printCli ("\033[H");     // ESC seq for move cursor at left-top corner
 80045f0:	4804      	ldr	r0, [pc, #16]	; (8004604 <clear+0x24>)
 80045f2:	f001 f85f 	bl	80056b4 <printCli>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	080063c4 	.word	0x080063c4
 8004604:	080063cc 	.word	0x080063cc

08004608 <list>:
void list(int argc, const char * const * argv){
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	int i=0;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
	printCli(CLYELLOW);
 8004616:	4812      	ldr	r0, [pc, #72]	; (8004660 <list+0x58>)
 8004618:	f001 f84c 	bl	80056b4 <printCli>
	while (list_cmds[i].name[0]){
 800461c:	e010      	b.n	8004640 <list+0x38>
		printCli("'");
 800461e:	4811      	ldr	r0, [pc, #68]	; (8004664 <list+0x5c>)
 8004620:	f001 f848 	bl	80056b4 <printCli>
		printCli(list_cmds[i].name);
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <list+0x60>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f001 f840 	bl	80056b4 <printCli>
		printCli ("'\t");
 8004634:	480d      	ldr	r0, [pc, #52]	; (800466c <list+0x64>)
 8004636:	f001 f83d 	bl	80056b4 <printCli>
		i++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 8004640:	4a09      	ldr	r2, [pc, #36]	; (8004668 <list+0x60>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	4413      	add	r3, r2
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <list+0x16>
	}
	printCli(CLDEFAULTTEXT);
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <list+0x68>)
 8004652:	f001 f82f 	bl	80056b4 <printCli>
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	080063d0 	.word	0x080063d0
 8004664:	080063d8 	.word	0x080063d8
 8004668:	2000000c 	.word	0x2000000c
 800466c:	080063dc 	.word	0x080063dc
 8004670:	080063e0 	.word	0x080063e0

08004674 <prolongationsExec>:
	printCli(str);
	printCli("'");
	//заключить данные в ' так-же для серийника и прпр, тк регулярка может обработать недопринятые данные и закрыть порт
}
*/
void prolongationsExec( int argc , const char * const * argv ){
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	execute_list_commands ( argc , &argv[0]);
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 f851 	bl	8005728 <execute_list_commands>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <catver>:

void catver(int argc, const char *const* argv){
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
	printCli ("FwVersion:");
 800469a:	4805      	ldr	r0, [pc, #20]	; (80046b0 <catver+0x20>)
 800469c:	f001 f80a 	bl	80056b4 <printCli>
	printCli ( "Build: " __DATE__", " __TIME__ );
 80046a0:	4804      	ldr	r0, [pc, #16]	; (80046b4 <catver+0x24>)
 80046a2:	f001 f807 	bl	80056b4 <printCli>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	080063e8 	.word	0x080063e8
 80046b4:	080063f4 	.word	0x080063f4

080046b8 <man>:

void man(int argc, const char *const* argv){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
	int i=0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 80046c6:	e030      	b.n	800472a <man+0x72>
		if (strcmp(argv[0],list_cmds[i].name)==0){
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	491e      	ldr	r1, [pc, #120]	; (8004748 <man+0x90>)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7fb fd79 	bl	80001d0 <strcmp>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d11f      	bne.n	8004724 <man+0x6c>
			if (list_cmds[i].man[0]!=0){
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <man+0x90>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	4413      	add	r3, r2
 80046ec:	330c      	adds	r3, #12
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <man+0x52>
				printCli(list_cmds[i].man);
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <man+0x90>)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4413      	add	r3, r2
 80046fe:	330c      	adds	r3, #12
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ffd6 	bl	80056b4 <printCli>
 8004708:	e008      	b.n	800471c <man+0x64>
			}else{
				printCli(list_cmds[i].descriptions);
 800470a:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <man+0x90>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	4413      	add	r3, r2
 8004712:	3308      	adds	r3, #8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 ffcc 	bl	80056b4 <printCli>
			}
			printCli("\n\r");
 800471c:	480b      	ldr	r0, [pc, #44]	; (800474c <man+0x94>)
 800471e:	f000 ffc9 	bl	80056b4 <printCli>
			return;
 8004722:	e00d      	b.n	8004740 <man+0x88>
		}
		i++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
	while (list_cmds[i].name[0]){
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <man+0x90>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	4413      	add	r3, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1c6      	bne.n	80046c8 <man+0x10>
	}
	printCli ("Command for man absent, exec: list\n\r");
 800473a:	4805      	ldr	r0, [pc, #20]	; (8004750 <man+0x98>)
 800473c:	f000 ffba 	bl	80056b4 <printCli>
}
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	2000000c 	.word	0x2000000c
 800474c:	0800636c 	.word	0x0800636c
 8004750:	08006414 	.word	0x08006414

08004754 <uid>:

	}while (i<size);
}
*/

void uid(int argc, const char *const* argv){
 8004754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004758:	b0ae      	sub	sp, #184	; 0xb8
 800475a:	af06      	add	r7, sp, #24
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
	uint8_t UId[8];
	GetUniqueIdFlash25q(UId);
 8004760:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f8b9 	bl	80048dc <GetUniqueIdFlash25q>

	const char stroutmask[]= "Manufacture Uniqui UID SPI flash: %02x%02x%02x%02x%02x%02x%02x%02x\n\r";
 800476a:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <uid+0x84>)
 800476c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004770:	4611      	mov	r1, r2
 8004772:	2245      	movs	r2, #69	; 0x45
 8004774:	4618      	mov	r0, r3
 8004776:	f001 f883 	bl	8005880 <memcpy>
	char strout[sizeof(stroutmask)+2];
	sprintf(strout,stroutmask
								, UId[0]
 800477a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
	sprintf(strout,stroutmask
 800477e:	469c      	mov	ip, r3
								, UId[1]
 8004780:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
	sprintf(strout,stroutmask
 8004784:	469e      	mov	lr, r3
								, UId[2]
 8004786:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
								, UId[3]
 800478a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
								, UId[4]
 800478e:	f897 109c 	ldrb.w	r1, [r7, #156]	; 0x9c
	sprintf(strout,stroutmask
 8004792:	460c      	mov	r4, r1
								, UId[5]
 8004794:	f897 109d 	ldrb.w	r1, [r7, #157]	; 0x9d
	sprintf(strout,stroutmask
 8004798:	460d      	mov	r5, r1
								, UId[6]
 800479a:	f897 109e 	ldrb.w	r1, [r7, #158]	; 0x9e
	sprintf(strout,stroutmask
 800479e:	460e      	mov	r6, r1
								, UId[7]
 80047a0:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
	sprintf(strout,stroutmask
 80047a4:	f107 0850 	add.w	r8, r7, #80	; 0x50
 80047a8:	f107 0008 	add.w	r0, r7, #8
 80047ac:	9105      	str	r1, [sp, #20]
 80047ae:	9604      	str	r6, [sp, #16]
 80047b0:	9503      	str	r5, [sp, #12]
 80047b2:	9402      	str	r4, [sp, #8]
 80047b4:	9201      	str	r2, [sp, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	4673      	mov	r3, lr
 80047ba:	4662      	mov	r2, ip
 80047bc:	4641      	mov	r1, r8
 80047be:	f001 f8c3 	bl	8005948 <siprintf>
								  );
	printCli (strout);
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 ff74 	bl	80056b4 <printCli>
}
 80047cc:	bf00      	nop
 80047ce:	37a0      	adds	r7, #160	; 0xa0
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047d6:	bf00      	nop
 80047d8:	0800643c 	.word	0x0800643c

080047dc <userApp>:
#include <usb.h>



void userApp(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0

	initFlash25q();
 80047e0:	f000 f866 	bl	80048b0 <initFlash25q>

	initCLI();
 80047e4:	f000 ff02 	bl	80055ec <initCLI>

	while (1){

		//!! thread - 01
	#ifdef __SW_CLI_HTREAD
		CLIthread();
 80047e8:	f000 ff2e 	bl	8005648 <CLIthread>
	#endif
	//!! thread - 02
		HAL_Delay(1);
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7fc fa7b 	bl	8000ce8 <HAL_Delay>
		static char c;
		if ((++c & 127) == 127){
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <userApp+0x3c>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <userApp+0x3c>)
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <userApp+0x3c>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004806:	2b7f      	cmp	r3, #127	; 0x7f
 8004808:	d1ee      	bne.n	80047e8 <userApp+0xc>
			  HAL_GPIO_TogglePin(fromMX(BLINK));
 800480a:	2120      	movs	r1, #32
 800480c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004810:	f7fc ff5a 	bl	80016c8 <HAL_GPIO_TogglePin>
	while (1){
 8004814:	e7e8      	b.n	80047e8 <userApp+0xc>
 8004816:	bf00      	nop
 8004818:	20000258 	.word	0x20000258

0800481c <selectFlashSpi>:

#include "w25Qxx.h"

#define SPITIMEOUTMS (10UL)

void selectFlashSpi(void){
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),RESET);
 8004820:	2200      	movs	r2, #0
 8004822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800482a:	f7fc ff35 	bl	8001698 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800482e:	200a      	movs	r0, #10
 8004830:	f7fc fa5a 	bl	8000ce8 <HAL_Delay>
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}

08004838 <deselectFlashSpi>:
void deselectFlashSpi(void){
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(fromMX(SPI_FLASH_CS),SET);
 800483c:	2201      	movs	r2, #1
 800483e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004846:	f7fc ff27 	bl	8001698 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800484a:	200a      	movs	r0, #10
 800484c:	f7fc fa4c 	bl	8000ce8 <HAL_Delay>
}
 8004850:	bf00      	nop
 8004852:	bd80      	pop	{r7, pc}

08004854 <sendGetDataSpi>:


t_spi_data sendGetDataSpi(t_spi_data arg){
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
	t_spi_data TX = arg;
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	72fb      	strb	r3, [r7, #11]
	t_spi_data RX;
	size_t t=SPITIMEOUTMS;
 8004862:	230a      	movs	r3, #10
 8004864:	60fb      	str	r3, [r7, #12]
	while(  (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY) && (--t!=0)  ){
 8004866:	e002      	b.n	800486e <sendGetDataSpi+0x1a>
		HAL_Delay(1);
 8004868:	2001      	movs	r0, #1
 800486a:	f7fc fa3d 	bl	8000ce8 <HAL_Delay>
	while(  (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY) && (--t!=0)  ){
 800486e:	480f      	ldr	r0, [pc, #60]	; (80048ac <sendGetDataSpi+0x58>)
 8004870:	f7fe fd1a 	bl	80032a8 <HAL_SPI_GetState>
 8004874:	4603      	mov	r3, r0
 8004876:	2b01      	cmp	r3, #1
 8004878:	d005      	beq.n	8004886 <sendGetDataSpi+0x32>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <sendGetDataSpi+0x14>
	}
		#if DBUG>=1
	if (t==0){
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d100      	bne.n	800488e <sendGetDataSpi+0x3a>
			//		dbugerr("timeout SPI");
			#if DBUG>=2
		while(1==1);
 800488c:	e7fe      	b.n	800488c <sendGetDataSpi+0x38>
			#endif
	}
		#endif

	HAL_SPI_TransmitReceive(&hspi3
 800488e:	f107 020a 	add.w	r2, r7, #10
 8004892:	f107 010b 	add.w	r1, r7, #11
 8004896:	2364      	movs	r3, #100	; 0x64
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2301      	movs	r3, #1
 800489c:	4803      	ldr	r0, [pc, #12]	; (80048ac <sendGetDataSpi+0x58>)
 800489e:	f7fe faf0 	bl	8002e82 <HAL_SPI_TransmitReceive>
			, &RX
			,1/*sizeof(t_spi_data)*/
			,100
			);

	return ( RX );
 80048a2:	7abb      	ldrb	r3, [r7, #10]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000120 	.word	0x20000120

080048b0 <initFlash25q>:
t_spi_data (*_pfSpiGetSend)(t_spi_data) = &sendGetDataSpi;
void (*pfSelectSpiFlash)(void) = &selectFlashSpi;
void (*pfSetFreeSpiFlash)(void) = &deselectFlashSpi;

/************************/
void initFlash25q(void){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
	char pVoid[8];
	GetUniqueIdFlash25q(pVoid);
 80048b6:	463b      	mov	r3, r7
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f80f 	bl	80048dc <GetUniqueIdFlash25q>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <whileBusyFlash25q>:

static void whileBusyFlash25q(){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	(*pfSelectSpiFlash)();
 80048cc:	4b02      	ldr	r3, [pc, #8]	; (80048d8 <whileBusyFlash25q+0x10>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4798      	blx	r3
//	while (getBusyStatusFlash25q() != 0) {
//
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000090 	.word	0x20000090

080048dc <GetUniqueIdFlash25q>:
	temp |= (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);

	return temp;
}

void GetUniqueIdFlash25q(uint8_t *pRet) {
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

	whileBusyFlash25q();
 80048e4:	f7ff fff0 	bl	80048c8 <whileBusyFlash25q>


	(*pfSelectSpiFlash)();
 80048e8:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <GetUniqueIdFlash25q+0xc8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4798      	blx	r3

	(*_pfSpiGetSend)(FLASH25Q_COMMAND_UNIQUE_ID);
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	204b      	movs	r0, #75	; 0x4b
 80048f4:	4798      	blx	r3
	(*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 80048f6:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2000      	movs	r0, #0
 80048fc:	4798      	blx	r3
	(*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 80048fe:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2000      	movs	r0, #0
 8004904:	4798      	blx	r3
	(*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004906:	4b28      	ldr	r3, [pc, #160]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2000      	movs	r0, #0
 800490c:	4798      	blx	r3
	(*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2000      	movs	r0, #0
 8004914:	4798      	blx	r3

	pRet[0] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2000      	movs	r0, #0
 800491c:	4798      	blx	r3
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	701a      	strb	r2, [r3, #0]
	pRet[1] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	1c54      	adds	r4, r2, #1
 800492e:	2000      	movs	r0, #0
 8004930:	4798      	blx	r3
 8004932:	4603      	mov	r3, r0
 8004934:	7023      	strb	r3, [r4, #0]
	pRet[2] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	1c94      	adds	r4, r2, #2
 800493e:	2000      	movs	r0, #0
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	7023      	strb	r3, [r4, #0]
	pRet[3] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004946:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	1cd4      	adds	r4, r2, #3
 800494e:	2000      	movs	r0, #0
 8004950:	4798      	blx	r3
 8004952:	4603      	mov	r3, r0
 8004954:	7023      	strb	r3, [r4, #0]
	pRet[4] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	1d14      	adds	r4, r2, #4
 800495e:	2000      	movs	r0, #0
 8004960:	4798      	blx	r3
 8004962:	4603      	mov	r3, r0
 8004964:	7023      	strb	r3, [r4, #0]
	pRet[5] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	1d54      	adds	r4, r2, #5
 800496e:	2000      	movs	r0, #0
 8004970:	4798      	blx	r3
 8004972:	4603      	mov	r3, r0
 8004974:	7023      	strb	r3, [r4, #0]
	pRet[6] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	1d94      	adds	r4, r2, #6
 800497e:	2000      	movs	r0, #0
 8004980:	4798      	blx	r3
 8004982:	4603      	mov	r3, r0
 8004984:	7023      	strb	r3, [r4, #0]
	pRet[7] = (uint8_t) (*_pfSpiGetSend)(FLASH25Q_COMMAND_NOP);
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <GetUniqueIdFlash25q+0xcc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	1dd4      	adds	r4, r2, #7
 800498e:	2000      	movs	r0, #0
 8004990:	4798      	blx	r3
 8004992:	4603      	mov	r3, r0
 8004994:	7023      	strb	r3, [r4, #0]

	(*pfSetFreeSpiFlash)();
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <GetUniqueIdFlash25q+0xd0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4798      	blx	r3
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	20000090 	.word	0x20000090
 80049a8:	2000008c 	.word	0x2000008c
 80049ac:	20000094 	.word	0x20000094

080049b0 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	5c8a      	ldrb	r2, [r1, r2]
 80049c4:	4413      	add	r3, r2
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b3f      	cmp	r3, #63	; 0x3f
 80049ce:	dd02      	ble.n	80049d6 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3b40      	subs	r3, #64	; 0x40
 80049d4:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	5cd3      	ldrb	r3, [r2, r3]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <hist_is_space_for_new+0x1a>
		return true;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e01e      	b.n	8004a40 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	db0c      	blt.n	8004a28 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	da0c      	bge.n	8004a3e <hist_is_space_for_new+0x56>
			return true;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e00b      	b.n	8004a40 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	da01      	bge.n	8004a3e <hist_is_space_for_new+0x56>
			return true;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <hist_is_space_for_new+0x58>
	}
	return false;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a5c:	dc61      	bgt.n	8004b22 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8004a5e:	e002      	b.n	8004a66 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff ffa5 	bl	80049b0 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ffbd 	bl	80049e8 <hist_is_space_for_new>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f5      	beq.n	8004a60 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	b2d1      	uxtb	r1, r2
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	da0a      	bge.n	8004ab0 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	4413      	add	r3, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fee9 	bl	8005880 <memcpy>
 8004aae:	e018      	b.n	8004ae2 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004ab8:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fed9 	bl	8005880 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	18d1      	adds	r1, r2, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	f000 fecf 	bl	8005880 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	b2d1      	uxtb	r1, r2
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	2b3f      	cmp	r3, #63	; 0x3f
 8004b02:	dd05      	ble.n	8004b10 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	2100      	movs	r1, #0
 8004b18:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	649a      	str	r2, [r3, #72]	; 0x48
 8004b20:	e000      	b.n	8004b24 <hist_save_line+0xd8>
		return;
 8004b22:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08c      	sub	sp, #48	; 0x30
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8004b40:	e010      	b.n	8004b64 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b4e:	4413      	add	r3, r2
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	2b3f      	cmp	r3, #63	; 0x3f
 8004b56:	dd02      	ble.n	8004b5e <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	3b40      	subs	r3, #64	; 0x40
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	3301      	adds	r3, #1
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	4413      	add	r3, r2
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e8      	bne.n	8004b42 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d176      	bne.n	8004c64 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	f2c0 80d6 	blt.w	8004d2e <hist_restore_line+0x204>
			int header = pThis->begin;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004b8c:	e010      	b.n	8004bb0 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	4413      	add	r3, r2
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	4413      	add	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	2b3f      	cmp	r3, #63	; 0x3f
 8004ba2:	dd02      	ble.n	8004baa <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3b40      	subs	r3, #64	; 0x40
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	3301      	adds	r3, #1
 8004bae:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	4413      	add	r3, r2
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <hist_restore_line+0xa2>
 8004bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d1e0      	bne.n	8004b8e <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	4413      	add	r3, r2
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80aa 	beq.w	8004d2e <hist_restore_line+0x204>
					pThis->cur++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	4413      	add	r3, r2
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	4413      	add	r3, r2
 8004bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8004bf4:	dc11      	bgt.n	8004c1a <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8004bf6:	2265      	movs	r2, #101	; 0x65
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f000 fe68 	bl	80058d0 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	18d1      	adds	r1, r2, r3
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	4413      	add	r3, r2
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	f000 fe34 	bl	8005880 <memcpy>
 8004c18:	e01f      	b.n	8004c5a <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004c20:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8004c22:	2265      	movs	r2, #101	; 0x65
 8004c24:	2100      	movs	r1, #0
 8004c26:	68b8      	ldr	r0, [r7, #8]
 8004c28:	f000 fe52 	bl	80058d0 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	3301      	adds	r3, #1
 8004c32:	4413      	add	r3, r2
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4619      	mov	r1, r3
 8004c38:	68b8      	ldr	r0, [r7, #8]
 8004c3a:	f000 fe21 	bl	8005880 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	18d0      	adds	r0, r2, r3
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	f000 fe13 	bl	8005880 <memcpy>
				}
				return pThis->ring_buf[header];
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	4413      	add	r3, r2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	e066      	b.n	8004d32 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dd5e      	ble.n	8004d2a <hist_restore_line+0x200>
				pThis->cur--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004c80:	e010      	b.n	8004ca4 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b3f      	cmp	r3, #63	; 0x3f
 8004c96:	dd02      	ble.n	8004c9e <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	3b40      	subs	r3, #64	; 0x40
 8004c9c:	61fb      	str	r3, [r7, #28]
				j++;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <hist_restore_line+0x194>
 8004cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d1e1      	bne.n	8004c82 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	2b3f      	cmp	r3, #63	; 0x3f
 8004cce:	dc0c      	bgt.n	8004cea <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	18d1      	adds	r1, r2, r3
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68b8      	ldr	r0, [r7, #8]
 8004ce4:	f000 fdcc 	bl	8005880 <memcpy>
 8004ce8:	e01a      	b.n	8004d20 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004cf0:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	68b8      	ldr	r0, [r7, #8]
 8004d00:	f000 fdbe 	bl	8005880 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	18d0      	adds	r0, r2, r3
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 fdb0 	bl	8005880 <memcpy>
			}
			return pThis->ring_buf[header];
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	4413      	add	r3, r2
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	e003      	b.n	8004d32 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e001      	b.n	8004d32 <hist_restore_line+0x208>
		}
	}
	return -1;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3730      	adds	r7, #48	; 0x30
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b087      	sub	sp, #28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
	int i = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004d4e:	e002      	b.n	8004d56 <split+0x1c>
			ind++;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3301      	adds	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3354      	adds	r3, #84	; 0x54
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <split+0x32>
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dbf1      	blt.n	8004d50 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	db01      	blt.n	8004d78 <split+0x3e>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e024      	b.n	8004dc2 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1c58      	adds	r0, r3, #1
 8004d84:	6178      	str	r0, [r7, #20]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4403      	add	r3, r0
 8004d8c:	440a      	add	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b1f      	cmp	r3, #31
 8004d94:	dd05      	ble.n	8004da2 <split+0x68>
			return -1;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d9a:	e012      	b.n	8004dc2 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	3354      	adds	r3, #84	; 0x54
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <split+0x7e>
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	dbf1      	blt.n	8004d9c <split+0x62>
		}
		if (!(ind < limit)) return i;
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	dbca      	blt.n	8004d56 <split+0x1c>
 8004dc0:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004dfa:	4803      	ldr	r0, [pc, #12]	; (8004e08 <terminal_backspace+0x1c>)
 8004dfc:	4798      	blx	r3
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	080064a0 	.word	0x080064a0

08004e0c <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004e1a:	4803      	ldr	r0, [pc, #12]	; (8004e28 <terminal_newline+0x1c>)
 8004e1c:	4798      	blx	r3
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	080064a8 	.word	0x080064a8

08004e2c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	609a      	str	r2, [r3, #8]
#ifdef _USE_LIBC_STDIO 
	if (offset > 0) {
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dd07      	ble.n	8004e5c <terminal_move_cursor+0x30>
		snprintf (str, 16, "\033[%dC", offset);
 8004e4c:	f107 0008 	add.w	r0, r7, #8
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <terminal_move_cursor+0x5c>)
 8004e54:	2110      	movs	r1, #16
 8004e56:	f000 fd43 	bl	80058e0 <sniprintf>
 8004e5a:	e00a      	b.n	8004e72 <terminal_move_cursor+0x46>
	} else if (offset < 0) {
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da07      	bge.n	8004e72 <terminal_move_cursor+0x46>
		snprintf (str, 16, "\033[%dD", -(offset));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	425b      	negs	r3, r3
 8004e66:	f107 0008 	add.w	r0, r7, #8
 8004e6a:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <terminal_move_cursor+0x60>)
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	f000 fd37 	bl	80058e0 <sniprintf>
		endstr = u16bit_to_str (-(offset), str+2);
		strcpy (endstr, "D");
	} else
		return;
#endif	
	pThis->print (str);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004e78:	f107 0208 	add.w	r2, r7, #8
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
}
 8004e80:	bf00      	nop
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	080064ac 	.word	0x080064ac
 8004e8c:	080064b4 	.word	0x080064b4

08004e90 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
	char str[16];
#ifdef _USE_LIBC_STDIO
	snprintf (str, 16, "\033[%dD\033[%dC", \
 8004e98:	f107 0008 	add.w	r0, r7, #8
 8004e9c:	230d      	movs	r3, #13
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2374      	movs	r3, #116	; 0x74
 8004ea2:	4a07      	ldr	r2, [pc, #28]	; (8004ec0 <terminal_reset_cursor+0x30>)
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	f000 fd1b 	bl	80058e0 <sniprintf>
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
	strcpy (endstr, "D\033["); endstr += 3;
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
	strcpy (endstr, "C");
#endif
	pThis->print (str);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004eb0:	f107 0208 	add.w	r2, r7, #8
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4798      	blx	r3
}
 8004eb8:	bf00      	nop
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	080064bc 	.word	0x080064bc

08004ec4 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004ed6:	4816      	ldr	r0, [pc, #88]	; (8004f30 <terminal_print_line+0x6c>)
 8004ed8:	4798      	blx	r3

	char nch [] = {0,0};
 8004eda:	2300      	movs	r3, #0
 8004edc:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e014      	b.n	8004f0e <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	3354      	adds	r3, #84	; 0x54
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8004ef0:	7c3b      	ldrb	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <terminal_print_line+0x36>
			nch[0] = ' ';
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004f00:	f107 0210 	add.w	r2, r7, #16
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	dbe4      	blt.n	8004ee4 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ffb8 	bl	8004e90 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff ff82 	bl	8004e2c <terminal_move_cursor>
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	080064c8 	.word	0x080064c8

08004f34 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3354      	adds	r3, #84	; 0x54
 8004f42:	2265      	movs	r2, #101	; 0x65
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fcc2 	bl	80058d0 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2240      	movs	r2, #64	; 0x40
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fcbb 	bl	80058d0 <memset>
	pThis->ring_hist.begin = 0;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	pThis->execute = NULL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pThis->get_completion = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
	pThis->prompt_str = prompt_default;
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <microrl_init+0x78>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000098 	.word	0x20000098

08004fb0 <microrl_set_execute_callback>:
	pThis->get_completion = get_completion;
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <microrl_set_sigint_callback>:
//}

#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	1d18      	adds	r0, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3354      	adds	r3, #84	; 0x54
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	f7ff fd92 	bl	8004b2a <hist_restore_line>
 8005006:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	db1a      	blt.n	8005044 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	3354      	adds	r3, #84	; 0x54
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		terminal_reset_cursor (pThis);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ff2e 	bl	8004e90 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800503a:	461a      	mov	r2, r3
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ff40 	bl	8004ec4 <terminal_print_line>
	}
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	2b5b      	cmp	r3, #91	; 0x5b
 800505c:	d104      	bne.n	8005068 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
		return 0;
 8005064:	2300      	movs	r3, #0
 8005066:	e07b      	b.n	8005160 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d14f      	bne.n	8005110 <escape_process+0xc4>
		if (ch == 'A') {
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	2b41      	cmp	r3, #65	; 0x41
 8005074:	d105      	bne.n	8005082 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8005076:	2100      	movs	r1, #0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ffb7 	bl	8004fec <hist_search>
#endif
			return 1;
 800507e:	2301      	movs	r3, #1
 8005080:	e06e      	b.n	8005160 <escape_process+0x114>
		} else if (ch == 'B') {
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	2b42      	cmp	r3, #66	; 0x42
 8005086:	d105      	bne.n	8005094 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8005088:	2101      	movs	r1, #1
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ffae 	bl	8004fec <hist_search>
#endif
			return 1;
 8005090:	2301      	movs	r3, #1
 8005092:	e065      	b.n	8005160 <escape_process+0x114>
		} else if (ch == 'C') {
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b43      	cmp	r3, #67	; 0x43
 8005098:	d114      	bne.n	80050c4 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80050a6:	429a      	cmp	r2, r3
 80050a8:	da0a      	bge.n	80050c0 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80050aa:	2101      	movs	r1, #1
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff febd 	bl	8004e2c <terminal_move_cursor>
				pThis->cursor++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e04d      	b.n	8005160 <escape_process+0x114>
		} else if (ch == 'D') {
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	2b44      	cmp	r3, #68	; 0x44
 80050c8:	d112      	bne.n	80050f0 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dd0b      	ble.n	80050ec <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80050d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff fea7 	bl	8004e2c <terminal_move_cursor>
				pThis->cursor--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			}
			return 1;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e037      	b.n	8005160 <escape_process+0x114>
		} else if (ch == '7') {
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b37      	cmp	r3, #55	; 0x37
 80050f4:	d104      	bne.n	8005100 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
			return 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e02f      	b.n	8005160 <escape_process+0x114>
		} else if (ch == '8') {
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	2b38      	cmp	r3, #56	; 0x38
 8005104:	d12b      	bne.n	800515e <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2203      	movs	r2, #3
 800510a:	701a      	strb	r2, [r3, #0]
			return 0;
 800510c:	2300      	movs	r3, #0
 800510e:	e027      	b.n	8005160 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	2b7e      	cmp	r3, #126	; 0x7e
 8005114:	d123      	bne.n	800515e <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d108      	bne.n	8005130 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff feb6 	bl	8004e90 <terminal_reset_cursor>
			pThis->cursor = 0;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800512c:	2301      	movs	r3, #1
 800512e:	e017      	b.n	8005160 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d112      	bne.n	800515e <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff fe6f 	bl	8004e2c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			return 1;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 800515e:	2301      	movs	r3, #1
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	dc60      	bgt.n	8005244 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800518e:	4619      	mov	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	440b      	add	r3, r1
 8005194:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3354      	adds	r3, #84	; 0x54
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor + len,
 80051a0:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051ae:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80051b0:	461a      	mov	r2, r3
 80051b2:	f000 fb73 	bl	800589c <memmove>
		for (i = 0; i < len; i++) {
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e025      	b.n	8005208 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	441a      	add	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	440b      	add	r3, r1
 80051cc:	7811      	ldrb	r1, [r2, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	460a      	mov	r2, r1
 80051d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4413      	add	r3, r2
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d109      	bne.n	8005202 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4413      	add	r3, r2
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	dbd5      	blt.n	80051bc <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdlen += len;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	441a      	add	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pThis->cmdline [pThis->cmdlen] = '\0';
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <microrl_insert_text+0xde>
	}
	return false;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800525c:	2b00      	cmp	r3, #0
 800525e:	dd31      	ble.n	80052c4 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff fdc3 	bl	8004dec <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005272:	3b01      	subs	r3, #1
 8005274:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3354      	adds	r3, #84	; 0x54
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
		memmove (pThis->cmdline + pThis->cursor-1,
 8005280:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8005292:	461a      	mov	r2, r3
 8005294:	f000 fb02 	bl	800589c <memmove>
		pThis->cursor--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800529e:	1e5a      	subs	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		pThis->cmdline [pThis->cmdlen] = '\0';
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4413      	add	r3, r2
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052bc:	1e5a      	subs	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	}
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b0a4      	sub	sp, #144	; 0x90
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fd99 	bl	8004e0c <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dd0a      	ble.n	80052fa <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	1d18      	adds	r0, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80052f4:	461a      	mov	r2, r3
 80052f6:	f7ff fba9 	bl	8004a4c <hist_save_line>
//	else
		pThis->print ("\n\r");
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005300:	4823      	ldr	r0, [pc, #140]	; (8005390 <new_line_handler+0xc4>)
 8005302:	4798      	blx	r3
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800530a:	f107 020c 	add.w	r2, r7, #12
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fd12 	bl	8004d3a <split>
 8005316:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (status == -1){
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005322:	d109      	bne.n	8005338 <new_line_handler+0x6c>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800532a:	481a      	ldr	r0, [pc, #104]	; (8005394 <new_line_handler+0xc8>)
 800532c:	4798      	blx	r3
		pThis->print (ENDL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005334:	4818      	ldr	r0, [pc, #96]	; (8005398 <new_line_handler+0xcc>)
 8005336:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8005338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800533c:	2b00      	cmp	r3, #0
 800533e:	dd0d      	ble.n	800535c <new_line_handler+0x90>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <new_line_handler+0x90>
		pThis->execute (status, tkn_arr);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005350:	f107 020c 	add.w	r2, r7, #12
 8005354:	4611      	mov	r1, r2
 8005356:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800535a:	4798      	blx	r3
	print_prompt (pThis);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fd36 	bl	8004dce <print_prompt>
	pThis->cmdlen = 0;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pThis->cursor = 0;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3354      	adds	r3, #84	; 0x54
 8005376:	2265      	movs	r2, #101	; 0x65
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f000 faa8 	bl	80058d0 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8005386:	bf00      	nop
 8005388:	3790      	adds	r7, #144	; 0x90
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	080064cc 	.word	0x080064cc
 8005394:	080064d0 	.word	0x080064d0
 8005398:	080064a8 	.word	0x080064a8

0800539c <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fe49 	bl	800504c <escape_process>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 810e 	beq.w	80055de <microrl_insert_char+0x242>
			pThis->escape = 0;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80053c8:	e109      	b.n	80055de <microrl_insert_char+0x242>
		switch (ch) {
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b1b      	cmp	r3, #27
 80053ce:	dc3f      	bgt.n	8005450 <microrl_insert_char+0xb4>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f340 80d9 	ble.w	8005588 <microrl_insert_char+0x1ec>
 80053d6:	3b01      	subs	r3, #1
 80053d8:	2b1a      	cmp	r3, #26
 80053da:	f200 80d5 	bhi.w	8005588 <microrl_insert_char+0x1ec>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <microrl_insert_char+0x48>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080054c5 	.word	0x080054c5
 80053e8:	080054fd 	.word	0x080054fd
 80053ec:	08005575 	.word	0x08005575
 80053f0:	08005589 	.word	0x08005589
 80053f4:	080054a1 	.word	0x080054a1
 80053f8:	080054d5 	.word	0x080054d5
 80053fc:	08005589 	.word	0x08005589
 8005400:	08005535 	.word	0x08005535
 8005404:	08005589 	.word	0x08005589
 8005408:	080055c9 	.word	0x080055c9
 800540c:	08005489 	.word	0x08005489
 8005410:	08005589 	.word	0x08005589
 8005414:	08005457 	.word	0x08005457
 8005418:	0800552b 	.word	0x0800552b
 800541c:	08005589 	.word	0x08005589
 8005420:	08005521 	.word	0x08005521
 8005424:	08005589 	.word	0x08005589
 8005428:	08005551 	.word	0x08005551
 800542c:	08005589 	.word	0x08005589
 8005430:	08005589 	.word	0x08005589
 8005434:	0800546d 	.word	0x0800546d
 8005438:	08005589 	.word	0x08005589
 800543c:	08005589 	.word	0x08005589
 8005440:	08005589 	.word	0x08005589
 8005444:	08005589 	.word	0x08005589
 8005448:	08005589 	.word	0x08005589
 800544c:	0800545f 	.word	0x0800545f
 8005450:	2b7f      	cmp	r3, #127	; 0x7f
 8005452:	d06f      	beq.n	8005534 <microrl_insert_char+0x198>
 8005454:	e098      	b.n	8005588 <microrl_insert_char+0x1ec>
				new_line_handler(pThis);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff38 	bl	80052cc <new_line_handler>
			break;
 800545c:	e0bf      	b.n	80055de <microrl_insert_char+0x242>
				pThis->escape = 1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	705a      	strb	r2, [r3, #1]
			break;
 8005464:	e0bb      	b.n	80055de <microrl_insert_char+0x242>
					microrl_backspace (pThis);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fef1 	bl	800524e <microrl_backspace>
					while (pThis->cursor > 0) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005472:	2b00      	cmp	r3, #0
 8005474:	dcf7      	bgt.n	8005466 <microrl_insert_char+0xca>
				terminal_print_line (pThis, 0, pThis->cursor);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800547c:	461a      	mov	r2, r3
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fd1f 	bl	8004ec4 <terminal_print_line>
			break;
 8005486:	e0aa      	b.n	80055de <microrl_insert_char+0x242>
				pThis->print ("\033[K");
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800548e:	4856      	ldr	r0, [pc, #344]	; (80055e8 <microrl_insert_char+0x24c>)
 8005490:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			break;
 800549e:	e09e      	b.n	80055de <microrl_insert_char+0x242>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fcbb 	bl	8004e2c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80054c2:	e08c      	b.n	80055de <microrl_insert_char+0x242>
				terminal_reset_cursor (pThis);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fce3 	bl	8004e90 <terminal_reset_cursor>
				pThis->cursor = 0;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80054d2:	e084      	b.n	80055de <microrl_insert_char+0x242>
			if (pThis->cursor < pThis->cmdlen) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80054e0:	429a      	cmp	r2, r3
 80054e2:	da73      	bge.n	80055cc <microrl_insert_char+0x230>
				terminal_move_cursor (pThis, 1);
 80054e4:	2101      	movs	r1, #1
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff fca0 	bl	8004e2c <terminal_move_cursor>
				pThis->cursor++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 80054fa:	e067      	b.n	80055cc <microrl_insert_char+0x230>
			if (pThis->cursor) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d064      	beq.n	80055d0 <microrl_insert_char+0x234>
				terminal_move_cursor (pThis, -1);
 8005506:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fc8e 	bl	8004e2c <terminal_move_cursor>
				pThis->cursor--;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			break;
 800551e:	e057      	b.n	80055d0 <microrl_insert_char+0x234>
			hist_search (pThis, _HIST_UP);
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fd62 	bl	8004fec <hist_search>
			break;
 8005528:	e059      	b.n	80055de <microrl_insert_char+0x242>
			hist_search (pThis, _HIST_DOWN);
 800552a:	2101      	movs	r1, #1
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fd5d 	bl	8004fec <hist_search>
			break;
 8005532:	e054      	b.n	80055de <microrl_insert_char+0x242>
				microrl_backspace (pThis);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff fe8a 	bl	800524e <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005546:	461a      	mov	r2, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fcbb 	bl	8004ec4 <terminal_print_line>
			break;
 800554e:	e046      	b.n	80055de <microrl_insert_char+0x242>
				terminal_newline (pThis);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fc5b 	bl	8004e0c <terminal_newline>
				print_prompt (pThis);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fc39 	bl	8004dce <print_prompt>
				terminal_reset_cursor (pThis);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fc97 	bl	8004e90 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005568:	461a      	mov	r2, r3
 800556a:	2100      	movs	r1, #0
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fca9 	bl	8004ec4 <terminal_print_line>
			break;
 8005572:	e034      	b.n	80055de <microrl_insert_char+0x242>
			if (pThis->sigint != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02a      	beq.n	80055d4 <microrl_insert_char+0x238>
				pThis->sigint();
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005584:	4798      	blx	r3
			break;
 8005586:	e025      	b.n	80055d4 <microrl_insert_char+0x238>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b20      	cmp	r3, #32
 800558c:	d104      	bne.n	8005598 <microrl_insert_char+0x1fc>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01f      	beq.n	80055d8 <microrl_insert_char+0x23c>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b1f      	cmp	r3, #31
 800559c:	dd1c      	ble.n	80055d8 <microrl_insert_char+0x23c>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 800559e:	463b      	mov	r3, r7
 80055a0:	2201      	movs	r2, #1
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fddf 	bl	8005168 <microrl_insert_text>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d015      	beq.n	80055dc <microrl_insert_char+0x240>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055b6:	1e59      	subs	r1, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055be:	461a      	mov	r2, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fc7f 	bl	8004ec4 <terminal_print_line>
			break;
 80055c6:	e009      	b.n	80055dc <microrl_insert_char+0x240>
			break;
 80055c8:	bf00      	nop
 80055ca:	e008      	b.n	80055de <microrl_insert_char+0x242>
			break;
 80055cc:	bf00      	nop
 80055ce:	e006      	b.n	80055de <microrl_insert_char+0x242>
			break;
 80055d0:	bf00      	nop
 80055d2:	e004      	b.n	80055de <microrl_insert_char+0x242>
			break;
 80055d4:	bf00      	nop
 80055d6:	e002      	b.n	80055de <microrl_insert_char+0x242>
	}
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <microrl_insert_char+0x242>
			break;
 80055dc:	bf00      	nop
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	080064c8 	.word	0x080064c8

080055ec <initCLI>:



//*****************************************************************************
//dummy function, no need on linux-PC
void initCLI(void){
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
#ifdef HUART_CLI
	HAL_UART_Receive_DMA(&HUART_CLI, bRx, RX_SIZE);
 80055f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055f4:	490d      	ldr	r1, [pc, #52]	; (800562c <initCLI+0x40>)
 80055f6:	480e      	ldr	r0, [pc, #56]	; (8005630 <initCLI+0x44>)
 80055f8:	f7fe f8aa 	bl	8003750 <HAL_UART_Receive_DMA>
#endif
	// call init with ptr to microrl instance and print callback
	microrl_init (prl, printCli);
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <initCLI+0x48>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	490d      	ldr	r1, [pc, #52]	; (8005638 <initCLI+0x4c>)
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fc96 	bl	8004f34 <microrl_init>
	// set callback for execute
	microrl_set_execute_callback (prl, execute_list_commands);
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <initCLI+0x48>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	490b      	ldr	r1, [pc, #44]	; (800563c <initCLI+0x50>)
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fcce 	bl	8004fb0 <microrl_set_execute_callback>
#ifdef _USE_COMPLETE
	// set callback for completion
	microrl_set_complete_callback (prl, complet);
#endif
	// set callback for Ctrl+C
	microrl_set_sigint_callback (prl, sigint);
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <initCLI+0x48>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4909      	ldr	r1, [pc, #36]	; (8005640 <initCLI+0x54>)
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fcd7 	bl	8004fce <microrl_set_sigint_callback>
//	setListComs(prl, p_list_cmds);
#ifndef __SW_CLI_HTREAD
	extern TIM_HandleTypeDef htim7;
	HAL_TIM_Base_Start_IT(&htim7);
#endif
	cli_enable=1;
 8005620:	4b08      	ldr	r3, [pc, #32]	; (8005644 <initCLI+0x58>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
};
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2000025c 	.word	0x2000025c
 8005630:	20000188 	.word	0x20000188
 8005634:	2000009c 	.word	0x2000009c
 8005638:	080056b5 	.word	0x080056b5
 800563c:	08005729 	.word	0x08005729
 8005640:	08005819 	.word	0x08005819
 8005644:	20002330 	.word	0x20002330

08005648 <CLIthread>:

//*****************************************************************************
// non blocked CLI command line interface thread, periodically call 1 each system pass
void CLIthread(){
 8005648:	b598      	push	{r3, r4, r7, lr}
 800564a:	af00      	add	r7, sp, #0
	if  (cli_enable) {
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <CLIthread+0x2c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <CLIthread+0x28>
		if (rxUsbLen()!=0){
			getRxCDC();
		}
		#endif
		#ifdef HUART_CLI
		if (rxCharLen()!=0) {
 8005654:	f000 f812 	bl	800567c <rxCharLen>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <CLIthread+0x28>
			microrl_insert_char (prl, get_char());
 800565e:	4b06      	ldr	r3, [pc, #24]	; (8005678 <CLIthread+0x30>)
 8005660:	681c      	ldr	r4, [r3, #0]
 8005662:	f000 f83d 	bl	80056e0 <get_char>
 8005666:	4603      	mov	r3, r0
 8005668:	4619      	mov	r1, r3
 800566a:	4620      	mov	r0, r4
 800566c:	f7ff fe96 	bl	800539c <microrl_insert_char>
		#endif
	#ifdef USE_USB_FS_HAL
	deferredCliTask();
	#endif
	}
}
 8005670:	bf00      	nop
 8005672:	bd98      	pop	{r3, r4, r7, pc}
 8005674:	20002330 	.word	0x20002330
 8005678:	2000009c 	.word	0x2000009c

0800567c <rxCharLen>:
	usbPush();
}
#endif

#ifdef HUART_CLI
uint16_t rxCharLen(){ //проверяет наличие байтов, не 0 - можно читать, побайтно
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
	uint16_t p_rx = RX_SIZE - HUART_CLI.hdmarx->Instance->CNDTR;
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <rxCharLen+0x30>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8005690:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSizeReady=(p_rx - p_old);
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <rxCharLen+0x34>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	80bb      	strh	r3, [r7, #4]
	return dataSizeReady;
 800569e:	88bb      	ldrh	r3, [r7, #4]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000188 	.word	0x20000188
 80056b0:	20002334 	.word	0x20002334

080056b4 <printCli>:
#endif

//*****************************************************************************
// print callback for microrl library
void printCli(const char * str)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	size_t len=strlen(str);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fa fd91 	bl	80001e4 <strlen>
 80056c2:	60f8      	str	r0, [r7, #12]

#ifdef HUART_CLI
#warning	//todo tx  HUART_CLI.hdmatx->Instance->CNDTR;
//    while ( (HAL_UART_GetState(&HUART_CLI)==HAL_UART_STATE_BUSY_TX_RX));
//    HAL_UART_Transmit_DMA(&HUART_CLI,(uint8_t*)str,strlen(str));
    HAL_UART_Transmit(&HUART_CLI,(uint8_t*)str,len,100);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	2364      	movs	r3, #100	; 0x64
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4803      	ldr	r0, [pc, #12]	; (80056dc <printCli+0x28>)
 80056ce:	f7fd ffab 	bl	8003628 <HAL_UART_Transmit>
#else
#warning CLI без обратного вывода
#endif
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000188 	.word	0x20000188

080056e0 <get_char>:

#ifdef HUART_CLI
//*****************************************************************************
// get char user pressed, no waiting Enter input
char get_char(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
	char ret;
	while(rxCharLen()==0);
 80056e6:	bf00      	nop
 80056e8:	f7ff ffc8 	bl	800567c <rxCharLen>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0fa      	beq.n	80056e8 <get_char+0x8>
	ret=(char)bRx[p_old];
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <get_char+0x40>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <get_char+0x44>)
 80056f8:	5cd3      	ldrb	r3, [r2, r3]
 80056fa:	71fb      	strb	r3, [r7, #7]
	p_old++;
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <get_char+0x40>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <get_char+0x40>)
 8005704:	6013      	str	r3, [r2, #0]
	if (p_old == RX_SIZE){
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <get_char+0x40>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	d102      	bne.n	8005716 <get_char+0x36>
		p_old = 0;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <get_char+0x40>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
	}
	return ret;
 8005716:	79fb      	ldrb	r3, [r7, #7]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20002334 	.word	0x20002334
 8005724:	2000025c 	.word	0x2000025c

08005728 <execute_list_commands>:

//*****************************************************************************
// execute callback for microrl library
// do what you want here, but don't write to argv!!! read only!!
int execute_list_commands(int argc, const char * const * argv)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	int i = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
	extern exec_cmds_t list_cmds[];
	void (*fexec)(int argc, const char * const * argv);
	int flagexec=0;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
	// just iterate through argv word and compare it with your commands
	while (i < argc) {
 800573a:	e057      	b.n	80057ec <execute_list_commands+0xc4>
		int ii= 0;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 8005740:	e03d      	b.n	80057be <execute_list_commands+0x96>
			if (strcmp(argv[i],list_cmds[ii].name)==0){
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	4413      	add	r3, r2
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	492f      	ldr	r1, [pc, #188]	; (800580c <execute_list_commands+0xe4>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	440b      	add	r3, r1
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fa fd39 	bl	80001d0 <strcmp>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d129      	bne.n	80057b8 <execute_list_commands+0x90>
				fexec=list_cmds[ii].f_exec;
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <execute_list_commands+0xe4>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	4413      	add	r3, r2
 800576c:	3304      	adds	r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
				int ac=argc-1-i;	//кол-во аргументов передаваемых командам
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	613b      	str	r3, [r7, #16]
				if (( ac>0 )&&( argv[i+1][0]=='&' )) {	//для случая когда аргумент за командой &
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	dd0a      	ble.n	8005798 <execute_list_commands+0x70>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	4413      	add	r3, r2
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b26      	cmp	r3, #38	; 0x26
 8005792:	d101      	bne.n	8005798 <execute_list_commands+0x70>
					ac=0;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
				}
				fexec(ac,&argv[i+1]);
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	441a      	add	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4611      	mov	r1, r2
 80057a6:	6938      	ldr	r0, [r7, #16]
 80057a8:	4798      	blx	r3
				printCli ("\n\r");
 80057aa:	4819      	ldr	r0, [pc, #100]	; (8005810 <execute_list_commands+0xe8>)
 80057ac:	f7ff ff82 	bl	80056b4 <printCli>
				flagexec++;
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
				break;
 80057b6:	e00a      	b.n	80057ce <execute_list_commands+0xa6>
			}
			ii++;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3301      	adds	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
		while (list_cmds[ii].name[0]){
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <execute_list_commands+0xe4>)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	4413      	add	r3, r2
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1b9      	bne.n	8005742 <execute_list_commands+0x1a>
		}
		while (  (argv[i++][0]!='&') && (i<argc) );
 80057ce:	bf00      	nop
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	61fa      	str	r2, [r7, #28]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	4413      	add	r3, r2
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b26      	cmp	r3, #38	; 0x26
 80057e2:	d003      	beq.n	80057ec <execute_list_commands+0xc4>
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	dbf1      	blt.n	80057d0 <execute_list_commands+0xa8>
	while (i < argc) {
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dba3      	blt.n	800573c <execute_list_commands+0x14>
	}
	if (flagexec==0){
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <execute_list_commands+0xd8>
		printCli ("Valid command absent!\n\r");
 80057fa:	4806      	ldr	r0, [pc, #24]	; (8005814 <execute_list_commands+0xec>)
 80057fc:	f7ff ff5a 	bl	80056b4 <printCli>
	}
	return 0;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000000c 	.word	0x2000000c
 8005810:	080064e8 	.word	0x080064e8
 8005814:	080064ec 	.word	0x080064ec

08005818 <sigint>:
}
#endif

//*****************************************************************************
void sigint (void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
	printCli ("^C catched!\n\r");
 800581c:	4802      	ldr	r0, [pc, #8]	; (8005828 <sigint+0x10>)
 800581e:	f7ff ff49 	bl	80056b4 <printCli>
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	08006504 	.word	0x08006504

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	200000a0 	.word	0x200000a0

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4d0d      	ldr	r5, [pc, #52]	; (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2600      	movs	r6, #0
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4d0b      	ldr	r5, [pc, #44]	; (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	; (800587c <__libc_init_array+0x44>)
 800584c:	f000 fcc2 	bl	80061d4 <_init>
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2600      	movs	r6, #0
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08006598 	.word	0x08006598
 8005874:	08006598 	.word	0x08006598
 8005878:	08006598 	.word	0x08006598
 800587c:	0800659c 	.word	0x0800659c

08005880 <memcpy>:
 8005880:	440a      	add	r2, r1
 8005882:	4291      	cmp	r1, r2
 8005884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	4770      	bx	lr
 800588c:	b510      	push	{r4, lr}
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005896:	4291      	cmp	r1, r2
 8005898:	d1f9      	bne.n	800588e <memcpy+0xe>
 800589a:	bd10      	pop	{r4, pc}

0800589c <memmove>:
 800589c:	4288      	cmp	r0, r1
 800589e:	b510      	push	{r4, lr}
 80058a0:	eb01 0402 	add.w	r4, r1, r2
 80058a4:	d902      	bls.n	80058ac <memmove+0x10>
 80058a6:	4284      	cmp	r4, r0
 80058a8:	4623      	mov	r3, r4
 80058aa:	d807      	bhi.n	80058bc <memmove+0x20>
 80058ac:	1e43      	subs	r3, r0, #1
 80058ae:	42a1      	cmp	r1, r4
 80058b0:	d008      	beq.n	80058c4 <memmove+0x28>
 80058b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058ba:	e7f8      	b.n	80058ae <memmove+0x12>
 80058bc:	4402      	add	r2, r0
 80058be:	4601      	mov	r1, r0
 80058c0:	428a      	cmp	r2, r1
 80058c2:	d100      	bne.n	80058c6 <memmove+0x2a>
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ce:	e7f7      	b.n	80058c0 <memmove+0x24>

080058d0 <memset>:
 80058d0:	4402      	add	r2, r0
 80058d2:	4603      	mov	r3, r0
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	f803 1b01 	strb.w	r1, [r3], #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <sniprintf>:
 80058e0:	b40c      	push	{r2, r3}
 80058e2:	b530      	push	{r4, r5, lr}
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <sniprintf+0x64>)
 80058e6:	1e0c      	subs	r4, r1, #0
 80058e8:	681d      	ldr	r5, [r3, #0]
 80058ea:	b09d      	sub	sp, #116	; 0x74
 80058ec:	da08      	bge.n	8005900 <sniprintf+0x20>
 80058ee:	238b      	movs	r3, #139	; 0x8b
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f6:	b01d      	add	sp, #116	; 0x74
 80058f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058fc:	b002      	add	sp, #8
 80058fe:	4770      	bx	lr
 8005900:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005904:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005908:	bf14      	ite	ne
 800590a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800590e:	4623      	moveq	r3, r4
 8005910:	9304      	str	r3, [sp, #16]
 8005912:	9307      	str	r3, [sp, #28]
 8005914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005918:	9002      	str	r0, [sp, #8]
 800591a:	9006      	str	r0, [sp, #24]
 800591c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005920:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005922:	ab21      	add	r3, sp, #132	; 0x84
 8005924:	a902      	add	r1, sp, #8
 8005926:	4628      	mov	r0, r5
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f000 f889 	bl	8005a40 <_svfiprintf_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	bfbc      	itt	lt
 8005932:	238b      	movlt	r3, #139	; 0x8b
 8005934:	602b      	strlt	r3, [r5, #0]
 8005936:	2c00      	cmp	r4, #0
 8005938:	d0dd      	beq.n	80058f6 <sniprintf+0x16>
 800593a:	9b02      	ldr	r3, [sp, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e7d9      	b.n	80058f6 <sniprintf+0x16>
 8005942:	bf00      	nop
 8005944:	200000a0 	.word	0x200000a0

08005948 <siprintf>:
 8005948:	b40e      	push	{r1, r2, r3}
 800594a:	b500      	push	{lr}
 800594c:	b09c      	sub	sp, #112	; 0x70
 800594e:	ab1d      	add	r3, sp, #116	; 0x74
 8005950:	9002      	str	r0, [sp, #8]
 8005952:	9006      	str	r0, [sp, #24]
 8005954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005958:	4809      	ldr	r0, [pc, #36]	; (8005980 <siprintf+0x38>)
 800595a:	9107      	str	r1, [sp, #28]
 800595c:	9104      	str	r1, [sp, #16]
 800595e:	4909      	ldr	r1, [pc, #36]	; (8005984 <siprintf+0x3c>)
 8005960:	f853 2b04 	ldr.w	r2, [r3], #4
 8005964:	9105      	str	r1, [sp, #20]
 8005966:	6800      	ldr	r0, [r0, #0]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	a902      	add	r1, sp, #8
 800596c:	f000 f868 	bl	8005a40 <_svfiprintf_r>
 8005970:	9b02      	ldr	r3, [sp, #8]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	b01c      	add	sp, #112	; 0x70
 8005978:	f85d eb04 	ldr.w	lr, [sp], #4
 800597c:	b003      	add	sp, #12
 800597e:	4770      	bx	lr
 8005980:	200000a0 	.word	0x200000a0
 8005984:	ffff0208 	.word	0xffff0208

08005988 <__ssputs_r>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	688e      	ldr	r6, [r1, #8]
 800598e:	429e      	cmp	r6, r3
 8005990:	4682      	mov	sl, r0
 8005992:	460c      	mov	r4, r1
 8005994:	4690      	mov	r8, r2
 8005996:	461f      	mov	r7, r3
 8005998:	d838      	bhi.n	8005a0c <__ssputs_r+0x84>
 800599a:	898a      	ldrh	r2, [r1, #12]
 800599c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059a0:	d032      	beq.n	8005a08 <__ssputs_r+0x80>
 80059a2:	6825      	ldr	r5, [r4, #0]
 80059a4:	6909      	ldr	r1, [r1, #16]
 80059a6:	eba5 0901 	sub.w	r9, r5, r1
 80059aa:	6965      	ldr	r5, [r4, #20]
 80059ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059b4:	3301      	adds	r3, #1
 80059b6:	444b      	add	r3, r9
 80059b8:	106d      	asrs	r5, r5, #1
 80059ba:	429d      	cmp	r5, r3
 80059bc:	bf38      	it	cc
 80059be:	461d      	movcc	r5, r3
 80059c0:	0553      	lsls	r3, r2, #21
 80059c2:	d531      	bpl.n	8005a28 <__ssputs_r+0xa0>
 80059c4:	4629      	mov	r1, r5
 80059c6:	f000 fb3b 	bl	8006040 <_malloc_r>
 80059ca:	4606      	mov	r6, r0
 80059cc:	b950      	cbnz	r0, 80059e4 <__ssputs_r+0x5c>
 80059ce:	230c      	movs	r3, #12
 80059d0:	f8ca 3000 	str.w	r3, [sl]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e4:	6921      	ldr	r1, [r4, #16]
 80059e6:	464a      	mov	r2, r9
 80059e8:	f7ff ff4a 	bl	8005880 <memcpy>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	6126      	str	r6, [r4, #16]
 80059fa:	6165      	str	r5, [r4, #20]
 80059fc:	444e      	add	r6, r9
 80059fe:	eba5 0509 	sub.w	r5, r5, r9
 8005a02:	6026      	str	r6, [r4, #0]
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	463e      	mov	r6, r7
 8005a08:	42be      	cmp	r6, r7
 8005a0a:	d900      	bls.n	8005a0e <__ssputs_r+0x86>
 8005a0c:	463e      	mov	r6, r7
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	4632      	mov	r2, r6
 8005a12:	4641      	mov	r1, r8
 8005a14:	f7ff ff42 	bl	800589c <memmove>
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	1b9b      	subs	r3, r3, r6
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4433      	add	r3, r6
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	2000      	movs	r0, #0
 8005a26:	e7db      	b.n	80059e0 <__ssputs_r+0x58>
 8005a28:	462a      	mov	r2, r5
 8005a2a:	f000 fb7d 	bl	8006128 <_realloc_r>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1e1      	bne.n	80059f8 <__ssputs_r+0x70>
 8005a34:	6921      	ldr	r1, [r4, #16]
 8005a36:	4650      	mov	r0, sl
 8005a38:	f000 fa96 	bl	8005f68 <_free_r>
 8005a3c:	e7c7      	b.n	80059ce <__ssputs_r+0x46>
	...

08005a40 <_svfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	4698      	mov	r8, r3
 8005a46:	898b      	ldrh	r3, [r1, #12]
 8005a48:	061b      	lsls	r3, r3, #24
 8005a4a:	b09d      	sub	sp, #116	; 0x74
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	460d      	mov	r5, r1
 8005a50:	4614      	mov	r4, r2
 8005a52:	d50e      	bpl.n	8005a72 <_svfiprintf_r+0x32>
 8005a54:	690b      	ldr	r3, [r1, #16]
 8005a56:	b963      	cbnz	r3, 8005a72 <_svfiprintf_r+0x32>
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	f000 faf1 	bl	8006040 <_malloc_r>
 8005a5e:	6028      	str	r0, [r5, #0]
 8005a60:	6128      	str	r0, [r5, #16]
 8005a62:	b920      	cbnz	r0, 8005a6e <_svfiprintf_r+0x2e>
 8005a64:	230c      	movs	r3, #12
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a6c:	e0d1      	b.n	8005c12 <_svfiprintf_r+0x1d2>
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	616b      	str	r3, [r5, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	2320      	movs	r3, #32
 8005a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a80:	2330      	movs	r3, #48	; 0x30
 8005a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c2c <_svfiprintf_r+0x1ec>
 8005a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a8a:	f04f 0901 	mov.w	r9, #1
 8005a8e:	4623      	mov	r3, r4
 8005a90:	469a      	mov	sl, r3
 8005a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a96:	b10a      	cbz	r2, 8005a9c <_svfiprintf_r+0x5c>
 8005a98:	2a25      	cmp	r2, #37	; 0x25
 8005a9a:	d1f9      	bne.n	8005a90 <_svfiprintf_r+0x50>
 8005a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa0:	d00b      	beq.n	8005aba <_svfiprintf_r+0x7a>
 8005aa2:	465b      	mov	r3, fp
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4629      	mov	r1, r5
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f7ff ff6d 	bl	8005988 <__ssputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f000 80aa 	beq.w	8005c08 <_svfiprintf_r+0x1c8>
 8005ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ab6:	445a      	add	r2, fp
 8005ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aba:	f89a 3000 	ldrb.w	r3, [sl]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80a2 	beq.w	8005c08 <_svfiprintf_r+0x1c8>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ace:	f10a 0a01 	add.w	sl, sl, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9307      	str	r3, [sp, #28]
 8005ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ada:	931a      	str	r3, [sp, #104]	; 0x68
 8005adc:	4654      	mov	r4, sl
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae4:	4851      	ldr	r0, [pc, #324]	; (8005c2c <_svfiprintf_r+0x1ec>)
 8005ae6:	f7fa fb8b 	bl	8000200 <memchr>
 8005aea:	9a04      	ldr	r2, [sp, #16]
 8005aec:	b9d8      	cbnz	r0, 8005b26 <_svfiprintf_r+0xe6>
 8005aee:	06d0      	lsls	r0, r2, #27
 8005af0:	bf44      	itt	mi
 8005af2:	2320      	movmi	r3, #32
 8005af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005af8:	0711      	lsls	r1, r2, #28
 8005afa:	bf44      	itt	mi
 8005afc:	232b      	movmi	r3, #43	; 0x2b
 8005afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b02:	f89a 3000 	ldrb.w	r3, [sl]
 8005b06:	2b2a      	cmp	r3, #42	; 0x2a
 8005b08:	d015      	beq.n	8005b36 <_svfiprintf_r+0xf6>
 8005b0a:	9a07      	ldr	r2, [sp, #28]
 8005b0c:	4654      	mov	r4, sl
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4621      	mov	r1, r4
 8005b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b1a:	3b30      	subs	r3, #48	; 0x30
 8005b1c:	2b09      	cmp	r3, #9
 8005b1e:	d94e      	bls.n	8005bbe <_svfiprintf_r+0x17e>
 8005b20:	b1b0      	cbz	r0, 8005b50 <_svfiprintf_r+0x110>
 8005b22:	9207      	str	r2, [sp, #28]
 8005b24:	e014      	b.n	8005b50 <_svfiprintf_r+0x110>
 8005b26:	eba0 0308 	sub.w	r3, r0, r8
 8005b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	46a2      	mov	sl, r4
 8005b34:	e7d2      	b.n	8005adc <_svfiprintf_r+0x9c>
 8005b36:	9b03      	ldr	r3, [sp, #12]
 8005b38:	1d19      	adds	r1, r3, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	9103      	str	r1, [sp, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bfbb      	ittet	lt
 8005b42:	425b      	neglt	r3, r3
 8005b44:	f042 0202 	orrlt.w	r2, r2, #2
 8005b48:	9307      	strge	r3, [sp, #28]
 8005b4a:	9307      	strlt	r3, [sp, #28]
 8005b4c:	bfb8      	it	lt
 8005b4e:	9204      	strlt	r2, [sp, #16]
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b2e      	cmp	r3, #46	; 0x2e
 8005b54:	d10c      	bne.n	8005b70 <_svfiprintf_r+0x130>
 8005b56:	7863      	ldrb	r3, [r4, #1]
 8005b58:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5a:	d135      	bne.n	8005bc8 <_svfiprintf_r+0x188>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9203      	str	r2, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfb8      	it	lt
 8005b68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b6c:	3402      	adds	r4, #2
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c3c <_svfiprintf_r+0x1fc>
 8005b74:	7821      	ldrb	r1, [r4, #0]
 8005b76:	2203      	movs	r2, #3
 8005b78:	4650      	mov	r0, sl
 8005b7a:	f7fa fb41 	bl	8000200 <memchr>
 8005b7e:	b140      	cbz	r0, 8005b92 <_svfiprintf_r+0x152>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	eba0 000a 	sub.w	r0, r0, sl
 8005b86:	fa03 f000 	lsl.w	r0, r3, r0
 8005b8a:	9b04      	ldr	r3, [sp, #16]
 8005b8c:	4303      	orrs	r3, r0
 8005b8e:	3401      	adds	r4, #1
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b96:	4826      	ldr	r0, [pc, #152]	; (8005c30 <_svfiprintf_r+0x1f0>)
 8005b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b9c:	2206      	movs	r2, #6
 8005b9e:	f7fa fb2f 	bl	8000200 <memchr>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d038      	beq.n	8005c18 <_svfiprintf_r+0x1d8>
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <_svfiprintf_r+0x1f4>)
 8005ba8:	bb1b      	cbnz	r3, 8005bf2 <_svfiprintf_r+0x1b2>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	3307      	adds	r3, #7
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	4433      	add	r3, r6
 8005bba:	9309      	str	r3, [sp, #36]	; 0x24
 8005bbc:	e767      	b.n	8005a8e <_svfiprintf_r+0x4e>
 8005bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e7a5      	b.n	8005b14 <_svfiprintf_r+0xd4>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	3401      	adds	r4, #1
 8005bcc:	9305      	str	r3, [sp, #20]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f04f 0c0a 	mov.w	ip, #10
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bda:	3a30      	subs	r2, #48	; 0x30
 8005bdc:	2a09      	cmp	r2, #9
 8005bde:	d903      	bls.n	8005be8 <_svfiprintf_r+0x1a8>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0c5      	beq.n	8005b70 <_svfiprintf_r+0x130>
 8005be4:	9105      	str	r1, [sp, #20]
 8005be6:	e7c3      	b.n	8005b70 <_svfiprintf_r+0x130>
 8005be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bec:	4604      	mov	r4, r0
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e7f0      	b.n	8005bd4 <_svfiprintf_r+0x194>
 8005bf2:	ab03      	add	r3, sp, #12
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	462a      	mov	r2, r5
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005bfa:	a904      	add	r1, sp, #16
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f3af 8000 	nop.w
 8005c02:	1c42      	adds	r2, r0, #1
 8005c04:	4606      	mov	r6, r0
 8005c06:	d1d6      	bne.n	8005bb6 <_svfiprintf_r+0x176>
 8005c08:	89ab      	ldrh	r3, [r5, #12]
 8005c0a:	065b      	lsls	r3, r3, #25
 8005c0c:	f53f af2c 	bmi.w	8005a68 <_svfiprintf_r+0x28>
 8005c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c12:	b01d      	add	sp, #116	; 0x74
 8005c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <_svfiprintf_r+0x1f8>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4638      	mov	r0, r7
 8005c24:	f000 f87a 	bl	8005d1c <_printf_i>
 8005c28:	e7eb      	b.n	8005c02 <_svfiprintf_r+0x1c2>
 8005c2a:	bf00      	nop
 8005c2c:	0800655c 	.word	0x0800655c
 8005c30:	08006566 	.word	0x08006566
 8005c34:	00000000 	.word	0x00000000
 8005c38:	08005989 	.word	0x08005989
 8005c3c:	08006562 	.word	0x08006562

08005c40 <_printf_common>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	4616      	mov	r6, r2
 8005c46:	4699      	mov	r9, r3
 8005c48:	688a      	ldr	r2, [r1, #8]
 8005c4a:	690b      	ldr	r3, [r1, #16]
 8005c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bfb8      	it	lt
 8005c54:	4613      	movlt	r3, r2
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	b10a      	cbz	r2, 8005c66 <_printf_common+0x26>
 8005c62:	3301      	adds	r3, #1
 8005c64:	6033      	str	r3, [r6, #0]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	0699      	lsls	r1, r3, #26
 8005c6a:	bf42      	ittt	mi
 8005c6c:	6833      	ldrmi	r3, [r6, #0]
 8005c6e:	3302      	addmi	r3, #2
 8005c70:	6033      	strmi	r3, [r6, #0]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	f015 0506 	ands.w	r5, r5, #6
 8005c78:	d106      	bne.n	8005c88 <_printf_common+0x48>
 8005c7a:	f104 0a19 	add.w	sl, r4, #25
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	6832      	ldr	r2, [r6, #0]
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dc26      	bgt.n	8005cd6 <_printf_common+0x96>
 8005c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c8c:	1e13      	subs	r3, r2, #0
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	bf18      	it	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	0692      	lsls	r2, r2, #26
 8005c96:	d42b      	bmi.n	8005cf0 <_printf_common+0xb0>
 8005c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d01e      	beq.n	8005ce4 <_printf_common+0xa4>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	68e5      	ldr	r5, [r4, #12]
 8005caa:	6832      	ldr	r2, [r6, #0]
 8005cac:	f003 0306 	and.w	r3, r3, #6
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	bf08      	it	eq
 8005cb4:	1aad      	subeq	r5, r5, r2
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	6922      	ldr	r2, [r4, #16]
 8005cba:	bf0c      	ite	eq
 8005cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc0:	2500      	movne	r5, #0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bfc4      	itt	gt
 8005cc6:	1a9b      	subgt	r3, r3, r2
 8005cc8:	18ed      	addgt	r5, r5, r3
 8005cca:	2600      	movs	r6, #0
 8005ccc:	341a      	adds	r4, #26
 8005cce:	42b5      	cmp	r5, r6
 8005cd0:	d11a      	bne.n	8005d08 <_printf_common+0xc8>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e008      	b.n	8005ce8 <_printf_common+0xa8>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4638      	mov	r0, r7
 8005cde:	47c0      	blx	r8
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d103      	bne.n	8005cec <_printf_common+0xac>
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cec:	3501      	adds	r5, #1
 8005cee:	e7c6      	b.n	8005c7e <_printf_common+0x3e>
 8005cf0:	18e1      	adds	r1, r4, r3
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	2030      	movs	r0, #48	; 0x30
 8005cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfa:	4422      	add	r2, r4
 8005cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d04:	3302      	adds	r3, #2
 8005d06:	e7c7      	b.n	8005c98 <_printf_common+0x58>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0e6      	beq.n	8005ce4 <_printf_common+0xa4>
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7d9      	b.n	8005cce <_printf_common+0x8e>
	...

08005d1c <_printf_i>:
 8005d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	7e0f      	ldrb	r7, [r1, #24]
 8005d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d24:	2f78      	cmp	r7, #120	; 0x78
 8005d26:	4691      	mov	r9, r2
 8005d28:	4680      	mov	r8, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	469a      	mov	sl, r3
 8005d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d32:	d807      	bhi.n	8005d44 <_printf_i+0x28>
 8005d34:	2f62      	cmp	r7, #98	; 0x62
 8005d36:	d80a      	bhi.n	8005d4e <_printf_i+0x32>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	f000 80d8 	beq.w	8005eee <_printf_i+0x1d2>
 8005d3e:	2f58      	cmp	r7, #88	; 0x58
 8005d40:	f000 80a3 	beq.w	8005e8a <_printf_i+0x16e>
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d4c:	e03a      	b.n	8005dc4 <_printf_i+0xa8>
 8005d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d52:	2b15      	cmp	r3, #21
 8005d54:	d8f6      	bhi.n	8005d44 <_printf_i+0x28>
 8005d56:	a101      	add	r1, pc, #4	; (adr r1, 8005d5c <_printf_i+0x40>)
 8005d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005d45 	.word	0x08005d45
 8005d68:	08005d45 	.word	0x08005d45
 8005d6c:	08005d45 	.word	0x08005d45
 8005d70:	08005d45 	.word	0x08005d45
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d45 	.word	0x08005d45
 8005d7c:	08005d45 	.word	0x08005d45
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005ed5 	.word	0x08005ed5
 8005d8c:	08005df9 	.word	0x08005df9
 8005d90:	08005eb7 	.word	0x08005eb7
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ef7 	.word	0x08005ef7
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005ebf 	.word	0x08005ebf
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0a3      	b.n	8005f10 <_printf_i+0x1f4>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	6829      	ldr	r1, [r5, #0]
 8005dcc:	0606      	lsls	r6, r0, #24
 8005dce:	f101 0304 	add.w	r3, r1, #4
 8005dd2:	d50a      	bpl.n	8005dea <_printf_i+0xce>
 8005dd4:	680e      	ldr	r6, [r1, #0]
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	da03      	bge.n	8005de4 <_printf_i+0xc8>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	4276      	negs	r6, r6
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de4:	485e      	ldr	r0, [pc, #376]	; (8005f60 <_printf_i+0x244>)
 8005de6:	230a      	movs	r3, #10
 8005de8:	e019      	b.n	8005e1e <_printf_i+0x102>
 8005dea:	680e      	ldr	r6, [r1, #0]
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df2:	bf18      	it	ne
 8005df4:	b236      	sxthne	r6, r6
 8005df6:	e7ef      	b.n	8005dd8 <_printf_i+0xbc>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	6029      	str	r1, [r5, #0]
 8005e00:	0601      	lsls	r1, r0, #24
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0xec>
 8005e04:	681e      	ldr	r6, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0xf2>
 8005e08:	0646      	lsls	r6, r0, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0xe8>
 8005e0c:	881e      	ldrh	r6, [r3, #0]
 8005e0e:	4854      	ldr	r0, [pc, #336]	; (8005f60 <_printf_i+0x244>)
 8005e10:	2f6f      	cmp	r7, #111	; 0x6f
 8005e12:	bf0c      	ite	eq
 8005e14:	2308      	moveq	r3, #8
 8005e16:	230a      	movne	r3, #10
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1e:	6865      	ldr	r5, [r4, #4]
 8005e20:	60a5      	str	r5, [r4, #8]
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	bfa2      	ittt	ge
 8005e26:	6821      	ldrge	r1, [r4, #0]
 8005e28:	f021 0104 	bicge.w	r1, r1, #4
 8005e2c:	6021      	strge	r1, [r4, #0]
 8005e2e:	b90e      	cbnz	r6, 8005e34 <_printf_i+0x118>
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	d04d      	beq.n	8005ed0 <_printf_i+0x1b4>
 8005e34:	4615      	mov	r5, r2
 8005e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e3e:	5dc7      	ldrb	r7, [r0, r7]
 8005e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e44:	4637      	mov	r7, r6
 8005e46:	42bb      	cmp	r3, r7
 8005e48:	460e      	mov	r6, r1
 8005e4a:	d9f4      	bls.n	8005e36 <_printf_i+0x11a>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10b      	bne.n	8005e68 <_printf_i+0x14c>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07de      	lsls	r6, r3, #31
 8005e54:	d508      	bpl.n	8005e68 <_printf_i+0x14c>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	bfde      	ittt	le
 8005e5e:	2330      	movle	r3, #48	; 0x30
 8005e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e68:	1b52      	subs	r2, r2, r5
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	464b      	mov	r3, r9
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fee2 	bl	8005c40 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14c      	bne.n	8005f1a <_printf_i+0x1fe>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	b004      	add	sp, #16
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	4835      	ldr	r0, [pc, #212]	; (8005f60 <_printf_i+0x244>)
 8005e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e90:	6829      	ldr	r1, [r5, #0]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e98:	6029      	str	r1, [r5, #0]
 8005e9a:	061d      	lsls	r5, r3, #24
 8005e9c:	d514      	bpl.n	8005ec8 <_printf_i+0x1ac>
 8005e9e:	07df      	lsls	r7, r3, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea6:	6023      	strmi	r3, [r4, #0]
 8005ea8:	b91e      	cbnz	r6, 8005eb2 <_printf_i+0x196>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f023 0320 	bic.w	r3, r3, #32
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	e7b0      	b.n	8005e18 <_printf_i+0xfc>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f043 0320 	orr.w	r3, r3, #32
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	2378      	movs	r3, #120	; 0x78
 8005ec0:	4828      	ldr	r0, [pc, #160]	; (8005f64 <_printf_i+0x248>)
 8005ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ec6:	e7e3      	b.n	8005e90 <_printf_i+0x174>
 8005ec8:	0659      	lsls	r1, r3, #25
 8005eca:	bf48      	it	mi
 8005ecc:	b2b6      	uxthmi	r6, r6
 8005ece:	e7e6      	b.n	8005e9e <_printf_i+0x182>
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	e7bb      	b.n	8005e4c <_printf_i+0x130>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	6826      	ldr	r6, [r4, #0]
 8005ed8:	6961      	ldr	r1, [r4, #20]
 8005eda:	1d18      	adds	r0, r3, #4
 8005edc:	6028      	str	r0, [r5, #0]
 8005ede:	0635      	lsls	r5, r6, #24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0x1cc>
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0x1d2>
 8005ee8:	0670      	lsls	r0, r6, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0x1c8>
 8005eec:	8019      	strh	r1, [r3, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	e7ba      	b.n	8005e6c <_printf_i+0x150>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	2100      	movs	r1, #0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7fa f97c 	bl	8000200 <memchr>
 8005f08:	b108      	cbz	r0, 8005f0e <_printf_i+0x1f2>
 8005f0a:	1b40      	subs	r0, r0, r5
 8005f0c:	6060      	str	r0, [r4, #4]
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	2300      	movs	r3, #0
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	e7a8      	b.n	8005e6c <_printf_i+0x150>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	47d0      	blx	sl
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0ab      	beq.n	8005e80 <_printf_i+0x164>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	079b      	lsls	r3, r3, #30
 8005f2c:	d413      	bmi.n	8005f56 <_printf_i+0x23a>
 8005f2e:	68e0      	ldr	r0, [r4, #12]
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	4298      	cmp	r0, r3
 8005f34:	bfb8      	it	lt
 8005f36:	4618      	movlt	r0, r3
 8005f38:	e7a4      	b.n	8005e84 <_printf_i+0x168>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d09b      	beq.n	8005e80 <_printf_i+0x164>
 8005f48:	3501      	adds	r5, #1
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	1a5b      	subs	r3, r3, r1
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dcf2      	bgt.n	8005f3a <_printf_i+0x21e>
 8005f54:	e7eb      	b.n	8005f2e <_printf_i+0x212>
 8005f56:	2500      	movs	r5, #0
 8005f58:	f104 0619 	add.w	r6, r4, #25
 8005f5c:	e7f5      	b.n	8005f4a <_printf_i+0x22e>
 8005f5e:	bf00      	nop
 8005f60:	0800656d 	.word	0x0800656d
 8005f64:	0800657e 	.word	0x0800657e

08005f68 <_free_r>:
 8005f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f6a:	2900      	cmp	r1, #0
 8005f6c:	d044      	beq.n	8005ff8 <_free_r+0x90>
 8005f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f72:	9001      	str	r0, [sp, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f1a1 0404 	sub.w	r4, r1, #4
 8005f7a:	bfb8      	it	lt
 8005f7c:	18e4      	addlt	r4, r4, r3
 8005f7e:	f000 f913 	bl	80061a8 <__malloc_lock>
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <_free_r+0x94>)
 8005f84:	9801      	ldr	r0, [sp, #4]
 8005f86:	6813      	ldr	r3, [r2, #0]
 8005f88:	b933      	cbnz	r3, 8005f98 <_free_r+0x30>
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	6014      	str	r4, [r2, #0]
 8005f8e:	b003      	add	sp, #12
 8005f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f94:	f000 b90e 	b.w	80061b4 <__malloc_unlock>
 8005f98:	42a3      	cmp	r3, r4
 8005f9a:	d908      	bls.n	8005fae <_free_r+0x46>
 8005f9c:	6825      	ldr	r5, [r4, #0]
 8005f9e:	1961      	adds	r1, r4, r5
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf01      	itttt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	1949      	addeq	r1, r1, r5
 8005faa:	6021      	streq	r1, [r4, #0]
 8005fac:	e7ed      	b.n	8005f8a <_free_r+0x22>
 8005fae:	461a      	mov	r2, r3
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b10b      	cbz	r3, 8005fb8 <_free_r+0x50>
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d9fa      	bls.n	8005fae <_free_r+0x46>
 8005fb8:	6811      	ldr	r1, [r2, #0]
 8005fba:	1855      	adds	r5, r2, r1
 8005fbc:	42a5      	cmp	r5, r4
 8005fbe:	d10b      	bne.n	8005fd8 <_free_r+0x70>
 8005fc0:	6824      	ldr	r4, [r4, #0]
 8005fc2:	4421      	add	r1, r4
 8005fc4:	1854      	adds	r4, r2, r1
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	6011      	str	r1, [r2, #0]
 8005fca:	d1e0      	bne.n	8005f8e <_free_r+0x26>
 8005fcc:	681c      	ldr	r4, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	6053      	str	r3, [r2, #4]
 8005fd2:	4421      	add	r1, r4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	e7da      	b.n	8005f8e <_free_r+0x26>
 8005fd8:	d902      	bls.n	8005fe0 <_free_r+0x78>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	6003      	str	r3, [r0, #0]
 8005fde:	e7d6      	b.n	8005f8e <_free_r+0x26>
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	1961      	adds	r1, r4, r5
 8005fe4:	428b      	cmp	r3, r1
 8005fe6:	bf04      	itt	eq
 8005fe8:	6819      	ldreq	r1, [r3, #0]
 8005fea:	685b      	ldreq	r3, [r3, #4]
 8005fec:	6063      	str	r3, [r4, #4]
 8005fee:	bf04      	itt	eq
 8005ff0:	1949      	addeq	r1, r1, r5
 8005ff2:	6021      	streq	r1, [r4, #0]
 8005ff4:	6054      	str	r4, [r2, #4]
 8005ff6:	e7ca      	b.n	8005f8e <_free_r+0x26>
 8005ff8:	b003      	add	sp, #12
 8005ffa:	bd30      	pop	{r4, r5, pc}
 8005ffc:	20002338 	.word	0x20002338

08006000 <sbrk_aligned>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4e0e      	ldr	r6, [pc, #56]	; (800603c <sbrk_aligned+0x3c>)
 8006004:	460c      	mov	r4, r1
 8006006:	6831      	ldr	r1, [r6, #0]
 8006008:	4605      	mov	r5, r0
 800600a:	b911      	cbnz	r1, 8006012 <sbrk_aligned+0x12>
 800600c:	f000 f8bc 	bl	8006188 <_sbrk_r>
 8006010:	6030      	str	r0, [r6, #0]
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 f8b7 	bl	8006188 <_sbrk_r>
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d00a      	beq.n	8006034 <sbrk_aligned+0x34>
 800601e:	1cc4      	adds	r4, r0, #3
 8006020:	f024 0403 	bic.w	r4, r4, #3
 8006024:	42a0      	cmp	r0, r4
 8006026:	d007      	beq.n	8006038 <sbrk_aligned+0x38>
 8006028:	1a21      	subs	r1, r4, r0
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f8ac 	bl	8006188 <_sbrk_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d101      	bne.n	8006038 <sbrk_aligned+0x38>
 8006034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006038:	4620      	mov	r0, r4
 800603a:	bd70      	pop	{r4, r5, r6, pc}
 800603c:	2000233c 	.word	0x2000233c

08006040 <_malloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	1ccd      	adds	r5, r1, #3
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	2d00      	cmp	r5, #0
 8006054:	4607      	mov	r7, r0
 8006056:	db01      	blt.n	800605c <_malloc_r+0x1c>
 8006058:	42a9      	cmp	r1, r5
 800605a:	d905      	bls.n	8006068 <_malloc_r+0x28>
 800605c:	230c      	movs	r3, #12
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	2600      	movs	r6, #0
 8006062:	4630      	mov	r0, r6
 8006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006068:	4e2e      	ldr	r6, [pc, #184]	; (8006124 <_malloc_r+0xe4>)
 800606a:	f000 f89d 	bl	80061a8 <__malloc_lock>
 800606e:	6833      	ldr	r3, [r6, #0]
 8006070:	461c      	mov	r4, r3
 8006072:	bb34      	cbnz	r4, 80060c2 <_malloc_r+0x82>
 8006074:	4629      	mov	r1, r5
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff ffc2 	bl	8006000 <sbrk_aligned>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	4604      	mov	r4, r0
 8006080:	d14d      	bne.n	800611e <_malloc_r+0xde>
 8006082:	6834      	ldr	r4, [r6, #0]
 8006084:	4626      	mov	r6, r4
 8006086:	2e00      	cmp	r6, #0
 8006088:	d140      	bne.n	800610c <_malloc_r+0xcc>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	4631      	mov	r1, r6
 800608e:	4638      	mov	r0, r7
 8006090:	eb04 0803 	add.w	r8, r4, r3
 8006094:	f000 f878 	bl	8006188 <_sbrk_r>
 8006098:	4580      	cmp	r8, r0
 800609a:	d13a      	bne.n	8006112 <_malloc_r+0xd2>
 800609c:	6821      	ldr	r1, [r4, #0]
 800609e:	3503      	adds	r5, #3
 80060a0:	1a6d      	subs	r5, r5, r1
 80060a2:	f025 0503 	bic.w	r5, r5, #3
 80060a6:	3508      	adds	r5, #8
 80060a8:	2d0c      	cmp	r5, #12
 80060aa:	bf38      	it	cc
 80060ac:	250c      	movcc	r5, #12
 80060ae:	4629      	mov	r1, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ffa5 	bl	8006000 <sbrk_aligned>
 80060b6:	3001      	adds	r0, #1
 80060b8:	d02b      	beq.n	8006112 <_malloc_r+0xd2>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	442b      	add	r3, r5
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	e00e      	b.n	80060e0 <_malloc_r+0xa0>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	1b52      	subs	r2, r2, r5
 80060c6:	d41e      	bmi.n	8006106 <_malloc_r+0xc6>
 80060c8:	2a0b      	cmp	r2, #11
 80060ca:	d916      	bls.n	80060fa <_malloc_r+0xba>
 80060cc:	1961      	adds	r1, r4, r5
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6025      	str	r5, [r4, #0]
 80060d2:	bf18      	it	ne
 80060d4:	6059      	strne	r1, [r3, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	bf08      	it	eq
 80060da:	6031      	streq	r1, [r6, #0]
 80060dc:	5162      	str	r2, [r4, r5]
 80060de:	604b      	str	r3, [r1, #4]
 80060e0:	4638      	mov	r0, r7
 80060e2:	f104 060b 	add.w	r6, r4, #11
 80060e6:	f000 f865 	bl	80061b4 <__malloc_unlock>
 80060ea:	f026 0607 	bic.w	r6, r6, #7
 80060ee:	1d23      	adds	r3, r4, #4
 80060f0:	1af2      	subs	r2, r6, r3
 80060f2:	d0b6      	beq.n	8006062 <_malloc_r+0x22>
 80060f4:	1b9b      	subs	r3, r3, r6
 80060f6:	50a3      	str	r3, [r4, r2]
 80060f8:	e7b3      	b.n	8006062 <_malloc_r+0x22>
 80060fa:	6862      	ldr	r2, [r4, #4]
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	bf0c      	ite	eq
 8006100:	6032      	streq	r2, [r6, #0]
 8006102:	605a      	strne	r2, [r3, #4]
 8006104:	e7ec      	b.n	80060e0 <_malloc_r+0xa0>
 8006106:	4623      	mov	r3, r4
 8006108:	6864      	ldr	r4, [r4, #4]
 800610a:	e7b2      	b.n	8006072 <_malloc_r+0x32>
 800610c:	4634      	mov	r4, r6
 800610e:	6876      	ldr	r6, [r6, #4]
 8006110:	e7b9      	b.n	8006086 <_malloc_r+0x46>
 8006112:	230c      	movs	r3, #12
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4638      	mov	r0, r7
 8006118:	f000 f84c 	bl	80061b4 <__malloc_unlock>
 800611c:	e7a1      	b.n	8006062 <_malloc_r+0x22>
 800611e:	6025      	str	r5, [r4, #0]
 8006120:	e7de      	b.n	80060e0 <_malloc_r+0xa0>
 8006122:	bf00      	nop
 8006124:	20002338 	.word	0x20002338

08006128 <_realloc_r>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	4680      	mov	r8, r0
 800612e:	4614      	mov	r4, r2
 8006130:	460e      	mov	r6, r1
 8006132:	b921      	cbnz	r1, 800613e <_realloc_r+0x16>
 8006134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	4611      	mov	r1, r2
 800613a:	f7ff bf81 	b.w	8006040 <_malloc_r>
 800613e:	b92a      	cbnz	r2, 800614c <_realloc_r+0x24>
 8006140:	f7ff ff12 	bl	8005f68 <_free_r>
 8006144:	4625      	mov	r5, r4
 8006146:	4628      	mov	r0, r5
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	f000 f838 	bl	80061c0 <_malloc_usable_size_r>
 8006150:	4284      	cmp	r4, r0
 8006152:	4607      	mov	r7, r0
 8006154:	d802      	bhi.n	800615c <_realloc_r+0x34>
 8006156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800615a:	d812      	bhi.n	8006182 <_realloc_r+0x5a>
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff ff6e 	bl	8006040 <_malloc_r>
 8006164:	4605      	mov	r5, r0
 8006166:	2800      	cmp	r0, #0
 8006168:	d0ed      	beq.n	8006146 <_realloc_r+0x1e>
 800616a:	42bc      	cmp	r4, r7
 800616c:	4622      	mov	r2, r4
 800616e:	4631      	mov	r1, r6
 8006170:	bf28      	it	cs
 8006172:	463a      	movcs	r2, r7
 8006174:	f7ff fb84 	bl	8005880 <memcpy>
 8006178:	4631      	mov	r1, r6
 800617a:	4640      	mov	r0, r8
 800617c:	f7ff fef4 	bl	8005f68 <_free_r>
 8006180:	e7e1      	b.n	8006146 <_realloc_r+0x1e>
 8006182:	4635      	mov	r5, r6
 8006184:	e7df      	b.n	8006146 <_realloc_r+0x1e>
	...

08006188 <_sbrk_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	; (80061a4 <_sbrk_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fa fc00 	bl	8000998 <_sbrk>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_sbrk_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_sbrk_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20002340 	.word	0x20002340

080061a8 <__malloc_lock>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__malloc_lock+0x8>)
 80061aa:	f000 b811 	b.w	80061d0 <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	20002344 	.word	0x20002344

080061b4 <__malloc_unlock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	; (80061bc <__malloc_unlock+0x8>)
 80061b6:	f000 b80c 	b.w	80061d2 <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	20002344 	.word	0x20002344

080061c0 <_malloc_usable_size_r>:
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f18      	subs	r0, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfbc      	itt	lt
 80061ca:	580b      	ldrlt	r3, [r1, r0]
 80061cc:	18c0      	addlt	r0, r0, r3
 80061ce:	4770      	bx	lr

080061d0 <__retarget_lock_acquire_recursive>:
 80061d0:	4770      	bx	lr

080061d2 <__retarget_lock_release_recursive>:
 80061d2:	4770      	bx	lr

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr
